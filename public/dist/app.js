/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(2);
	
	__webpack_require__(299);
	
	var _tko = __webpack_require__(368);
	
	var _tko2 = _interopRequireDefault(_tko);
	
	__webpack_require__(369);
	
	var _Application = __webpack_require__(373);
	
	var _Application2 = _interopRequireDefault(_Application);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * BOOTSTRAP
	 */
	
	
	/**
	 * Application styles
	 */
	
	
	/**
	 * JS Router
	 */
	window.ko = _tko2.default;
	
	/**
	 * Application kernel
	 */
	
	
	/**
	 * Technical Knockout library
	 */
	/**
	 * Babel kernel polyfill for full ES6 support
	 */
	
	
	new _Application2.default().ready(function (e) {
	  return document.body.classList.add('loaded');
	});

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	
	__webpack_require__(3);
	
	__webpack_require__(294);
	
	__webpack_require__(296);
	
	if (global._babelPolyfill) {
	  throw new Error("only one instance of babel-polyfill is allowed");
	}
	global._babelPolyfill = true;
	
	var DEFINE_PROPERTY = "defineProperty";
	function define(O, key, value) {
	  O[key] || Object[DEFINE_PROPERTY](O, key, {
	    writable: true,
	    configurable: true,
	    value: value
	  });
	}
	
	define(String.prototype, "padLeft", "".padStart);
	define(String.prototype, "padRight", "".padEnd);
	
	"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
	  [][key] && define(Array, key, Function.call.bind([][key]));
	});
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(4);
	__webpack_require__(53);
	__webpack_require__(54);
	__webpack_require__(55);
	__webpack_require__(56);
	__webpack_require__(58);
	__webpack_require__(61);
	__webpack_require__(62);
	__webpack_require__(63);
	__webpack_require__(64);
	__webpack_require__(65);
	__webpack_require__(66);
	__webpack_require__(67);
	__webpack_require__(68);
	__webpack_require__(69);
	__webpack_require__(71);
	__webpack_require__(73);
	__webpack_require__(75);
	__webpack_require__(77);
	__webpack_require__(80);
	__webpack_require__(81);
	__webpack_require__(82);
	__webpack_require__(86);
	__webpack_require__(88);
	__webpack_require__(90);
	__webpack_require__(93);
	__webpack_require__(94);
	__webpack_require__(95);
	__webpack_require__(96);
	__webpack_require__(98);
	__webpack_require__(99);
	__webpack_require__(100);
	__webpack_require__(101);
	__webpack_require__(102);
	__webpack_require__(103);
	__webpack_require__(104);
	__webpack_require__(106);
	__webpack_require__(107);
	__webpack_require__(108);
	__webpack_require__(110);
	__webpack_require__(111);
	__webpack_require__(112);
	__webpack_require__(114);
	__webpack_require__(115);
	__webpack_require__(116);
	__webpack_require__(117);
	__webpack_require__(118);
	__webpack_require__(119);
	__webpack_require__(120);
	__webpack_require__(121);
	__webpack_require__(122);
	__webpack_require__(123);
	__webpack_require__(124);
	__webpack_require__(125);
	__webpack_require__(126);
	__webpack_require__(127);
	__webpack_require__(132);
	__webpack_require__(133);
	__webpack_require__(137);
	__webpack_require__(138);
	__webpack_require__(139);
	__webpack_require__(140);
	__webpack_require__(142);
	__webpack_require__(143);
	__webpack_require__(144);
	__webpack_require__(145);
	__webpack_require__(146);
	__webpack_require__(147);
	__webpack_require__(148);
	__webpack_require__(149);
	__webpack_require__(150);
	__webpack_require__(151);
	__webpack_require__(152);
	__webpack_require__(153);
	__webpack_require__(154);
	__webpack_require__(155);
	__webpack_require__(156);
	__webpack_require__(157);
	__webpack_require__(158);
	__webpack_require__(160);
	__webpack_require__(161);
	__webpack_require__(167);
	__webpack_require__(168);
	__webpack_require__(170);
	__webpack_require__(171);
	__webpack_require__(172);
	__webpack_require__(176);
	__webpack_require__(177);
	__webpack_require__(178);
	__webpack_require__(179);
	__webpack_require__(180);
	__webpack_require__(182);
	__webpack_require__(183);
	__webpack_require__(184);
	__webpack_require__(185);
	__webpack_require__(188);
	__webpack_require__(190);
	__webpack_require__(191);
	__webpack_require__(192);
	__webpack_require__(194);
	__webpack_require__(196);
	__webpack_require__(198);
	__webpack_require__(199);
	__webpack_require__(200);
	__webpack_require__(202);
	__webpack_require__(203);
	__webpack_require__(204);
	__webpack_require__(205);
	__webpack_require__(212);
	__webpack_require__(215);
	__webpack_require__(216);
	__webpack_require__(218);
	__webpack_require__(219);
	__webpack_require__(222);
	__webpack_require__(223);
	__webpack_require__(225);
	__webpack_require__(226);
	__webpack_require__(227);
	__webpack_require__(228);
	__webpack_require__(229);
	__webpack_require__(230);
	__webpack_require__(231);
	__webpack_require__(232);
	__webpack_require__(233);
	__webpack_require__(234);
	__webpack_require__(235);
	__webpack_require__(236);
	__webpack_require__(237);
	__webpack_require__(238);
	__webpack_require__(239);
	__webpack_require__(240);
	__webpack_require__(241);
	__webpack_require__(242);
	__webpack_require__(243);
	__webpack_require__(245);
	__webpack_require__(246);
	__webpack_require__(247);
	__webpack_require__(248);
	__webpack_require__(249);
	__webpack_require__(250);
	__webpack_require__(252);
	__webpack_require__(253);
	__webpack_require__(254);
	__webpack_require__(255);
	__webpack_require__(256);
	__webpack_require__(257);
	__webpack_require__(258);
	__webpack_require__(259);
	__webpack_require__(261);
	__webpack_require__(262);
	__webpack_require__(264);
	__webpack_require__(265);
	__webpack_require__(266);
	__webpack_require__(267);
	__webpack_require__(270);
	__webpack_require__(271);
	__webpack_require__(272);
	__webpack_require__(273);
	__webpack_require__(274);
	__webpack_require__(275);
	__webpack_require__(276);
	__webpack_require__(277);
	__webpack_require__(279);
	__webpack_require__(280);
	__webpack_require__(281);
	__webpack_require__(282);
	__webpack_require__(283);
	__webpack_require__(284);
	__webpack_require__(285);
	__webpack_require__(286);
	__webpack_require__(287);
	__webpack_require__(288);
	__webpack_require__(289);
	__webpack_require__(292);
	__webpack_require__(293);
	module.exports = __webpack_require__(10);

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global         = __webpack_require__(5)
	  , has            = __webpack_require__(6)
	  , DESCRIPTORS    = __webpack_require__(7)
	  , $export        = __webpack_require__(9)
	  , redefine       = __webpack_require__(19)
	  , META           = __webpack_require__(23).KEY
	  , $fails         = __webpack_require__(8)
	  , shared         = __webpack_require__(24)
	  , setToStringTag = __webpack_require__(25)
	  , uid            = __webpack_require__(20)
	  , wks            = __webpack_require__(26)
	  , wksExt         = __webpack_require__(27)
	  , wksDefine      = __webpack_require__(28)
	  , keyOf          = __webpack_require__(30)
	  , enumKeys       = __webpack_require__(43)
	  , isArray        = __webpack_require__(46)
	  , anObject       = __webpack_require__(13)
	  , toIObject      = __webpack_require__(33)
	  , toPrimitive    = __webpack_require__(17)
	  , createDesc     = __webpack_require__(18)
	  , _create        = __webpack_require__(47)
	  , gOPNExt        = __webpack_require__(50)
	  , $GOPD          = __webpack_require__(52)
	  , $DP            = __webpack_require__(12)
	  , $keys          = __webpack_require__(31)
	  , gOPD           = $GOPD.f
	  , dP             = $DP.f
	  , gOPN           = gOPNExt.f
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , PROTOTYPE      = 'prototype'
	  , HIDDEN         = wks('_hidden')
	  , TO_PRIMITIVE   = wks('toPrimitive')
	  , isEnum         = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , OPSymbols      = shared('op-symbols')
	  , ObjectProto    = Object[PROTOTYPE]
	  , USE_NATIVE     = typeof $Symbol == 'function'
	  , QObject        = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(dP({}, 'a', {
	    get: function(){ return dP(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = gOPD(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  dP(it, key, D);
	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
	  return typeof it == 'symbol';
	} : function(it){
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D){
	  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if(has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  it  = toIObject(it);
	  key = toPrimitive(key, true);
	  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
	  var D = gOPD(it, key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var IS_OP  = it === ObjectProto
	    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if(!USE_NATIVE){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function(value){
	      if(this === ObjectProto)$set.call(OPSymbols, value);
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f   = $defineProperty;
	  __webpack_require__(51).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(45).f  = $propertyIsEnumerable;
	  __webpack_require__(44).f = $getOwnPropertySymbols;
	
	  if(DESCRIPTORS && !__webpack_require__(29)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function(name){
	    return wrap(wks(name));
	  }
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});
	
	for(var symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);
	
	for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    if(isSymbol(key))return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it){
	    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	    var args = [it]
	      , i    = 1
	      , replacer, $replacer;
	    while(arguments.length > i)args.push(arguments[i++]);
	    replacer = args[1];
	    if(typeof replacer == 'function')$replacer = replacer;
	    if($replacer || !isArray(replacer))replacer = function(key, value){
	      if($replacer)value = $replacer.call(this, key, value);
	      if(!isSymbol(value))return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(11)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 5 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 6 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(8)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 8 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(5)
	  , core      = __webpack_require__(10)
	  , hide      = __webpack_require__(11)
	  , redefine  = __webpack_require__(19)
	  , ctx       = __webpack_require__(21)
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})
	    , key, own, out, exp;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // extend global
	    if(target)redefine(target, key, out, type & $export.U);
	    // export
	    if(exports[key] != out)hide(exports, key, exp);
	    if(IS_PROTO && expProto[key] != out)expProto[key] = out;
	  }
	};
	global.core = core;
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ },
/* 10 */
/***/ function(module, exports) {

	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(12)
	  , createDesc = __webpack_require__(18);
	module.exports = __webpack_require__(7) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var anObject       = __webpack_require__(13)
	  , IE8_DOM_DEFINE = __webpack_require__(15)
	  , toPrimitive    = __webpack_require__(17)
	  , dP             = Object.defineProperty;
	
	exports.f = __webpack_require__(7) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(14);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 14 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(7) && !__webpack_require__(8)(function(){
	  return Object.defineProperty(__webpack_require__(16)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(14)
	  , document = __webpack_require__(5).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(14);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 18 */
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(5)
	  , hide      = __webpack_require__(11)
	  , has       = __webpack_require__(6)
	  , SRC       = __webpack_require__(20)('src')
	  , TO_STRING = 'toString'
	  , $toString = Function[TO_STRING]
	  , TPL       = ('' + $toString).split(TO_STRING);
	
	__webpack_require__(10).inspectSource = function(it){
	  return $toString.call(it);
	};
	
	(module.exports = function(O, key, val, safe){
	  var isFunction = typeof val == 'function';
	  if(isFunction)has(val, 'name') || hide(val, 'name', key);
	  if(O[key] === val)return;
	  if(isFunction)has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
	  if(O === global){
	    O[key] = val;
	  } else {
	    if(!safe){
	      delete O[key];
	      hide(O, key, val);
	    } else {
	      if(O[key])O[key] = val;
	      else hide(O, key, val);
	    }
	  }
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, TO_STRING, function toString(){
	  return typeof this == 'function' && this[SRC] || $toString.call(this);
	});

/***/ },
/* 20 */
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(22);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 22 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var META     = __webpack_require__(20)('meta')
	  , isObject = __webpack_require__(14)
	  , has      = __webpack_require__(6)
	  , setDesc  = __webpack_require__(12).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(8)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(5)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(12).f
	  , has = __webpack_require__(6)
	  , TAG = __webpack_require__(26)('toStringTag');
	
	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	var store      = __webpack_require__(24)('wks')
	  , uid        = __webpack_require__(20)
	  , Symbol     = __webpack_require__(5).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(26);

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	var global         = __webpack_require__(5)
	  , core           = __webpack_require__(10)
	  , LIBRARY        = __webpack_require__(29)
	  , wksExt         = __webpack_require__(27)
	  , defineProperty = __webpack_require__(12).f;
	module.exports = function(name){
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
	};

/***/ },
/* 29 */
/***/ function(module, exports) {

	module.exports = false;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(31)
	  , toIObject = __webpack_require__(33);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(32)
	  , enumBugKeys = __webpack_require__(42);
	
	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	var has          = __webpack_require__(6)
	  , toIObject    = __webpack_require__(33)
	  , arrayIndexOf = __webpack_require__(37)(false)
	  , IE_PROTO     = __webpack_require__(41)('IE_PROTO');
	
	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(34)
	  , defined = __webpack_require__(36);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(35);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 35 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 36 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(33)
	  , toLength  = __webpack_require__(38)
	  , toIndex   = __webpack_require__(40);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(39)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 39 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(39)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(24)('keys')
	  , uid    = __webpack_require__(20);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 42 */
/***/ function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(31)
	  , gOPS    = __webpack_require__(44)
	  , pIE     = __webpack_require__(45);
	module.exports = function(it){
	  var result     = getKeys(it)
	    , getSymbols = gOPS.f;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = pIE.f
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
	  } return result;
	};

/***/ },
/* 44 */
/***/ function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 45 */
/***/ function(module, exports) {

	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(35);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(13)
	  , dPs         = __webpack_require__(48)
	  , enumBugKeys = __webpack_require__(42)
	  , IE_PROTO    = __webpack_require__(41)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(16)('iframe')
	    , i      = enumBugKeys.length
	    , lt     = '<'
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(49).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	var dP       = __webpack_require__(12)
	  , anObject = __webpack_require__(13)
	  , getKeys  = __webpack_require__(31);
	
	module.exports = __webpack_require__(7) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(5).document && document.documentElement;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(33)
	  , gOPN      = __webpack_require__(51).f
	  , toString  = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function(it){
	  try {
	    return gOPN(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it){
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys      = __webpack_require__(32)
	  , hiddenKeys = __webpack_require__(42).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
	  return $keys(O, hiddenKeys);
	};

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	var pIE            = __webpack_require__(45)
	  , createDesc     = __webpack_require__(18)
	  , toIObject      = __webpack_require__(33)
	  , toPrimitive    = __webpack_require__(17)
	  , has            = __webpack_require__(6)
	  , IE8_DOM_DEFINE = __webpack_require__(15)
	  , gOPD           = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(7) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(9)
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', {create: __webpack_require__(47)});

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(9);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(7), 'Object', {defineProperty: __webpack_require__(12).f});

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(9);
	// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
	$export($export.S + $export.F * !__webpack_require__(7), 'Object', {defineProperties: __webpack_require__(48)});

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	var toIObject                 = __webpack_require__(33)
	  , $getOwnPropertyDescriptor = __webpack_require__(52).f;
	
	__webpack_require__(57)('getOwnPropertyDescriptor', function(){
	  return function getOwnPropertyDescriptor(it, key){
	    return $getOwnPropertyDescriptor(toIObject(it), key);
	  };
	});

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(9)
	  , core    = __webpack_require__(10)
	  , fails   = __webpack_require__(8);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject        = __webpack_require__(59)
	  , $getPrototypeOf = __webpack_require__(60);
	
	__webpack_require__(57)('getPrototypeOf', function(){
	  return function getPrototypeOf(it){
	    return $getPrototypeOf(toObject(it));
	  };
	});

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(36);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(6)
	  , toObject    = __webpack_require__(59)
	  , IE_PROTO    = __webpack_require__(41)('IE_PROTO')
	  , ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(59)
	  , $keys    = __webpack_require__(31);
	
	__webpack_require__(57)('keys', function(){
	  return function keys(it){
	    return $keys(toObject(it));
	  };
	});

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 Object.getOwnPropertyNames(O)
	__webpack_require__(57)('getOwnPropertyNames', function(){
	  return __webpack_require__(50).f;
	});

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.5 Object.freeze(O)
	var isObject = __webpack_require__(14)
	  , meta     = __webpack_require__(23).onFreeze;
	
	__webpack_require__(57)('freeze', function($freeze){
	  return function freeze(it){
	    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
	  };
	});

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.17 Object.seal(O)
	var isObject = __webpack_require__(14)
	  , meta     = __webpack_require__(23).onFreeze;
	
	__webpack_require__(57)('seal', function($seal){
	  return function seal(it){
	    return $seal && isObject(it) ? $seal(meta(it)) : it;
	  };
	});

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.15 Object.preventExtensions(O)
	var isObject = __webpack_require__(14)
	  , meta     = __webpack_require__(23).onFreeze;
	
	__webpack_require__(57)('preventExtensions', function($preventExtensions){
	  return function preventExtensions(it){
	    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
	  };
	});

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.12 Object.isFrozen(O)
	var isObject = __webpack_require__(14);
	
	__webpack_require__(57)('isFrozen', function($isFrozen){
	  return function isFrozen(it){
	    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
	  };
	});

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.13 Object.isSealed(O)
	var isObject = __webpack_require__(14);
	
	__webpack_require__(57)('isSealed', function($isSealed){
	  return function isSealed(it){
	    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
	  };
	});

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.11 Object.isExtensible(O)
	var isObject = __webpack_require__(14);
	
	__webpack_require__(57)('isExtensible', function($isExtensible){
	  return function isExtensible(it){
	    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
	  };
	});

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(9);
	
	$export($export.S + $export.F, 'Object', {assign: __webpack_require__(70)});

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys  = __webpack_require__(31)
	  , gOPS     = __webpack_require__(44)
	  , pIE      = __webpack_require__(45)
	  , toObject = __webpack_require__(59)
	  , IObject  = __webpack_require__(34)
	  , $assign  = Object.assign;
	
	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(8)(function(){
	  var A = {}
	    , B = {}
	    , S = Symbol()
	    , K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function(k){ B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
	  var T     = toObject(target)
	    , aLen  = arguments.length
	    , index = 1
	    , getSymbols = gOPS.f
	    , isEnum     = pIE.f;
	  while(aLen > index){
	    var S      = IObject(arguments[index++])
	      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
	      , length = keys.length
	      , j      = 0
	      , key;
	    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
	  } return T;
	} : $assign;

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.10 Object.is(value1, value2)
	var $export = __webpack_require__(9);
	$export($export.S, 'Object', {is: __webpack_require__(72)});

/***/ },
/* 72 */
/***/ function(module, exports) {

	// 7.2.9 SameValue(x, y)
	module.exports = Object.is || function is(x, y){
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(9);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(74).set});

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(14)
	  , anObject = __webpack_require__(13);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(21)(Function.call, __webpack_require__(52).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.3.6 Object.prototype.toString()
	var classof = __webpack_require__(76)
	  , test    = {};
	test[__webpack_require__(26)('toStringTag')] = 'z';
	if(test + '' != '[object z]'){
	  __webpack_require__(19)(Object.prototype, 'toString', function toString(){
	    return '[object ' + classof(this) + ']';
	  }, true);
	}

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(35)
	  , TAG = __webpack_require__(26)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function(it, key){
	  try {
	    return it[key];
	  } catch(e){ /* empty */ }
	};
	
	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
	var $export = __webpack_require__(9);
	
	$export($export.P, 'Function', {bind: __webpack_require__(78)});

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var aFunction  = __webpack_require__(22)
	  , isObject   = __webpack_require__(14)
	  , invoke     = __webpack_require__(79)
	  , arraySlice = [].slice
	  , factories  = {};
	
	var construct = function(F, len, args){
	  if(!(len in factories)){
	    for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';
	    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
	  } return factories[len](F, args);
	};
	
	module.exports = Function.bind || function bind(that /*, args... */){
	  var fn       = aFunction(this)
	    , partArgs = arraySlice.call(arguments, 1);
	  var bound = function(/* args... */){
	    var args = partArgs.concat(arraySlice.call(arguments));
	    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
	  };
	  if(isObject(fn.prototype))bound.prototype = fn.prototype;
	  return bound;
	};

/***/ },
/* 79 */
/***/ function(module, exports) {

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function(fn, args, that){
	  var un = that === undefined;
	  switch(args.length){
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return              fn.apply(that, args);
	};

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(12).f
	  , createDesc = __webpack_require__(18)
	  , has        = __webpack_require__(6)
	  , FProto     = Function.prototype
	  , nameRE     = /^\s*function ([^ (]*)/
	  , NAME       = 'name';
	
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	
	// 19.2.4.2 name
	NAME in FProto || __webpack_require__(7) && dP(FProto, NAME, {
	  configurable: true,
	  get: function(){
	    try {
	      var that = this
	        , name = ('' + that).match(nameRE)[1];
	      has(that, NAME) || !isExtensible(that) || dP(that, NAME, createDesc(5, name));
	      return name;
	    } catch(e){
	      return '';
	    }
	  }
	});

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var isObject       = __webpack_require__(14)
	  , getPrototypeOf = __webpack_require__(60)
	  , HAS_INSTANCE   = __webpack_require__(26)('hasInstance')
	  , FunctionProto  = Function.prototype;
	// 19.2.3.6 Function.prototype[@@hasInstance](V)
	if(!(HAS_INSTANCE in FunctionProto))__webpack_require__(12).f(FunctionProto, HAS_INSTANCE, {value: function(O){
	  if(typeof this != 'function' || !isObject(O))return false;
	  if(!isObject(this.prototype))return O instanceof this;
	  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
	  while(O = getPrototypeOf(O))if(this.prototype === O)return true;
	  return false;
	}});

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	var $export   = __webpack_require__(9)
	  , $parseInt = __webpack_require__(83);
	// 18.2.5 parseInt(string, radix)
	$export($export.G + $export.F * (parseInt != $parseInt), {parseInt: $parseInt});

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	var $parseInt = __webpack_require__(5).parseInt
	  , $trim     = __webpack_require__(84).trim
	  , ws        = __webpack_require__(85)
	  , hex       = /^[\-+]?0[xX]/;
	
	module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix){
	  var string = $trim(String(str), 3);
	  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
	} : $parseInt;

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(9)
	  , defined = __webpack_require__(36)
	  , fails   = __webpack_require__(8)
	  , spaces  = __webpack_require__(85)
	  , space   = '[' + spaces + ']'
	  , non     = '\u200b\u0085'
	  , ltrim   = RegExp('^' + space + space + '*')
	  , rtrim   = RegExp(space + space + '*$');
	
	var exporter = function(KEY, exec, ALIAS){
	  var exp   = {};
	  var FORCE = fails(function(){
	    return !!spaces[KEY]() || non[KEY]() != non;
	  });
	  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
	  if(ALIAS)exp[ALIAS] = fn;
	  $export($export.P + $export.F * FORCE, 'String', exp);
	};
	
	// 1 -> String#trimLeft
	// 2 -> String#trimRight
	// 3 -> String#trim
	var trim = exporter.trim = function(string, TYPE){
	  string = String(defined(string));
	  if(TYPE & 1)string = string.replace(ltrim, '');
	  if(TYPE & 2)string = string.replace(rtrim, '');
	  return string;
	};
	
	module.exports = exporter;

/***/ },
/* 85 */
/***/ function(module, exports) {

	module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
	  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	var $export     = __webpack_require__(9)
	  , $parseFloat = __webpack_require__(87);
	// 18.2.4 parseFloat(string)
	$export($export.G + $export.F * (parseFloat != $parseFloat), {parseFloat: $parseFloat});

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	var $parseFloat = __webpack_require__(5).parseFloat
	  , $trim       = __webpack_require__(84).trim;
	
	module.exports = 1 / $parseFloat(__webpack_require__(85) + '-0') !== -Infinity ? function parseFloat(str){
	  var string = $trim(String(str), 3)
	    , result = $parseFloat(string);
	  return result === 0 && string.charAt(0) == '-' ? -0 : result;
	} : $parseFloat;

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global            = __webpack_require__(5)
	  , has               = __webpack_require__(6)
	  , cof               = __webpack_require__(35)
	  , inheritIfRequired = __webpack_require__(89)
	  , toPrimitive       = __webpack_require__(17)
	  , fails             = __webpack_require__(8)
	  , gOPN              = __webpack_require__(51).f
	  , gOPD              = __webpack_require__(52).f
	  , dP                = __webpack_require__(12).f
	  , $trim             = __webpack_require__(84).trim
	  , NUMBER            = 'Number'
	  , $Number           = global[NUMBER]
	  , Base              = $Number
	  , proto             = $Number.prototype
	  // Opera ~12 has broken Object#toString
	  , BROKEN_COF        = cof(__webpack_require__(47)(proto)) == NUMBER
	  , TRIM              = 'trim' in String.prototype;
	
	// 7.1.3 ToNumber(argument)
	var toNumber = function(argument){
	  var it = toPrimitive(argument, false);
	  if(typeof it == 'string' && it.length > 2){
	    it = TRIM ? it.trim() : $trim(it, 3);
	    var first = it.charCodeAt(0)
	      , third, radix, maxCode;
	    if(first === 43 || first === 45){
	      third = it.charCodeAt(2);
	      if(third === 88 || third === 120)return NaN; // Number('+0x1') should be NaN, old V8 fix
	    } else if(first === 48){
	      switch(it.charCodeAt(1)){
	        case 66 : case 98  : radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
	        case 79 : case 111 : radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
	        default : return +it;
	      }
	      for(var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++){
	        code = digits.charCodeAt(i);
	        // parseInt parses a string to a first unavailable symbol
	        // but ToNumber should return NaN if a string contains unavailable symbols
	        if(code < 48 || code > maxCode)return NaN;
	      } return parseInt(digits, radix);
	    }
	  } return +it;
	};
	
	if(!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')){
	  $Number = function Number(value){
	    var it = arguments.length < 1 ? 0 : value
	      , that = this;
	    return that instanceof $Number
	      // check on 1..constructor(foo) case
	      && (BROKEN_COF ? fails(function(){ proto.valueOf.call(that); }) : cof(that) != NUMBER)
	        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
	  };
	  for(var keys = __webpack_require__(7) ? gOPN(Base) : (
	    // ES3:
	    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
	    // ES6 (in case, if modules with ES6 Number statics required before):
	    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
	    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
	  ).split(','), j = 0, key; keys.length > j; j++){
	    if(has(Base, key = keys[j]) && !has($Number, key)){
	      dP($Number, key, gOPD(Base, key));
	    }
	  }
	  $Number.prototype = proto;
	  proto.constructor = $Number;
	  __webpack_require__(19)(global, NUMBER, $Number);
	}

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	var isObject       = __webpack_require__(14)
	  , setPrototypeOf = __webpack_require__(74).set;
	module.exports = function(that, target, C){
	  var P, S = target.constructor;
	  if(S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf){
	    setPrototypeOf(that, P);
	  } return that;
	};

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export      = __webpack_require__(9)
	  , toInteger    = __webpack_require__(39)
	  , aNumberValue = __webpack_require__(91)
	  , repeat       = __webpack_require__(92)
	  , $toFixed     = 1..toFixed
	  , floor        = Math.floor
	  , data         = [0, 0, 0, 0, 0, 0]
	  , ERROR        = 'Number.toFixed: incorrect invocation!'
	  , ZERO         = '0';
	
	var multiply = function(n, c){
	  var i  = -1
	    , c2 = c;
	  while(++i < 6){
	    c2 += n * data[i];
	    data[i] = c2 % 1e7;
	    c2 = floor(c2 / 1e7);
	  }
	};
	var divide = function(n){
	  var i = 6
	    , c = 0;
	  while(--i >= 0){
	    c += data[i];
	    data[i] = floor(c / n);
	    c = (c % n) * 1e7;
	  }
	};
	var numToString = function(){
	  var i = 6
	    , s = '';
	  while(--i >= 0){
	    if(s !== '' || i === 0 || data[i] !== 0){
	      var t = String(data[i]);
	      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
	    }
	  } return s;
	};
	var pow = function(x, n, acc){
	  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
	};
	var log = function(x){
	  var n  = 0
	    , x2 = x;
	  while(x2 >= 4096){
	    n += 12;
	    x2 /= 4096;
	  }
	  while(x2 >= 2){
	    n  += 1;
	    x2 /= 2;
	  } return n;
	};
	
	$export($export.P + $export.F * (!!$toFixed && (
	  0.00008.toFixed(3) !== '0.000' ||
	  0.9.toFixed(0) !== '1' ||
	  1.255.toFixed(2) !== '1.25' ||
	  1000000000000000128..toFixed(0) !== '1000000000000000128'
	) || !__webpack_require__(8)(function(){
	  // V8 ~ Android 4.3-
	  $toFixed.call({});
	})), 'Number', {
	  toFixed: function toFixed(fractionDigits){
	    var x = aNumberValue(this, ERROR)
	      , f = toInteger(fractionDigits)
	      , s = ''
	      , m = ZERO
	      , e, z, j, k;
	    if(f < 0 || f > 20)throw RangeError(ERROR);
	    if(x != x)return 'NaN';
	    if(x <= -1e21 || x >= 1e21)return String(x);
	    if(x < 0){
	      s = '-';
	      x = -x;
	    }
	    if(x > 1e-21){
	      e = log(x * pow(2, 69, 1)) - 69;
	      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
	      z *= 0x10000000000000;
	      e = 52 - e;
	      if(e > 0){
	        multiply(0, z);
	        j = f;
	        while(j >= 7){
	          multiply(1e7, 0);
	          j -= 7;
	        }
	        multiply(pow(10, j, 1), 0);
	        j = e - 1;
	        while(j >= 23){
	          divide(1 << 23);
	          j -= 23;
	        }
	        divide(1 << j);
	        multiply(1, 1);
	        divide(2);
	        m = numToString();
	      } else {
	        multiply(0, z);
	        multiply(1 << -e, 0);
	        m = numToString() + repeat.call(ZERO, f);
	      }
	    }
	    if(f > 0){
	      k = m.length;
	      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
	    } else {
	      m = s + m;
	    } return m;
	  }
	});

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	var cof = __webpack_require__(35);
	module.exports = function(it, msg){
	  if(typeof it != 'number' && cof(it) != 'Number')throw TypeError(msg);
	  return +it;
	};

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var toInteger = __webpack_require__(39)
	  , defined   = __webpack_require__(36);
	
	module.exports = function repeat(count){
	  var str = String(defined(this))
	    , res = ''
	    , n   = toInteger(count);
	  if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
	  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
	  return res;
	};

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export      = __webpack_require__(9)
	  , $fails       = __webpack_require__(8)
	  , aNumberValue = __webpack_require__(91)
	  , $toPrecision = 1..toPrecision;
	
	$export($export.P + $export.F * ($fails(function(){
	  // IE7-
	  return $toPrecision.call(1, undefined) !== '1';
	}) || !$fails(function(){
	  // V8 ~ Android 4.3-
	  $toPrecision.call({});
	})), 'Number', {
	  toPrecision: function toPrecision(precision){
	    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
	    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision); 
	  }
	});

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.1 Number.EPSILON
	var $export = __webpack_require__(9);
	
	$export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.2 Number.isFinite(number)
	var $export   = __webpack_require__(9)
	  , _isFinite = __webpack_require__(5).isFinite;
	
	$export($export.S, 'Number', {
	  isFinite: function isFinite(it){
	    return typeof it == 'number' && _isFinite(it);
	  }
	});

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.3 Number.isInteger(number)
	var $export = __webpack_require__(9);
	
	$export($export.S, 'Number', {isInteger: __webpack_require__(97)});

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.3 Number.isInteger(number)
	var isObject = __webpack_require__(14)
	  , floor    = Math.floor;
	module.exports = function isInteger(it){
	  return !isObject(it) && isFinite(it) && floor(it) === it;
	};

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.4 Number.isNaN(number)
	var $export = __webpack_require__(9);
	
	$export($export.S, 'Number', {
	  isNaN: function isNaN(number){
	    return number != number;
	  }
	});

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.5 Number.isSafeInteger(number)
	var $export   = __webpack_require__(9)
	  , isInteger = __webpack_require__(97)
	  , abs       = Math.abs;
	
	$export($export.S, 'Number', {
	  isSafeInteger: function isSafeInteger(number){
	    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
	  }
	});

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.6 Number.MAX_SAFE_INTEGER
	var $export = __webpack_require__(9);
	
	$export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.10 Number.MIN_SAFE_INTEGER
	var $export = __webpack_require__(9);
	
	$export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	var $export     = __webpack_require__(9)
	  , $parseFloat = __webpack_require__(87);
	// 20.1.2.12 Number.parseFloat(string)
	$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {parseFloat: $parseFloat});

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	var $export   = __webpack_require__(9)
	  , $parseInt = __webpack_require__(83);
	// 20.1.2.13 Number.parseInt(string, radix)
	$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {parseInt: $parseInt});

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.3 Math.acosh(x)
	var $export = __webpack_require__(9)
	  , log1p   = __webpack_require__(105)
	  , sqrt    = Math.sqrt
	  , $acosh  = Math.acosh;
	
	$export($export.S + $export.F * !($acosh
	  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
	  && Math.floor($acosh(Number.MAX_VALUE)) == 710
	  // Tor Browser bug: Math.acosh(Infinity) -> NaN 
	  && $acosh(Infinity) == Infinity
	), 'Math', {
	  acosh: function acosh(x){
	    return (x = +x) < 1 ? NaN : x > 94906265.62425156
	      ? Math.log(x) + Math.LN2
	      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
	  }
	});

/***/ },
/* 105 */
/***/ function(module, exports) {

	// 20.2.2.20 Math.log1p(x)
	module.exports = Math.log1p || function log1p(x){
	  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
	};

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.5 Math.asinh(x)
	var $export = __webpack_require__(9)
	  , $asinh  = Math.asinh;
	
	function asinh(x){
	  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
	}
	
	// Tor Browser bug: Math.asinh(0) -> -0 
	$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {asinh: asinh});

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.7 Math.atanh(x)
	var $export = __webpack_require__(9)
	  , $atanh  = Math.atanh;
	
	// Tor Browser bug: Math.atanh(-0) -> 0 
	$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
	  atanh: function atanh(x){
	    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
	  }
	});

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.9 Math.cbrt(x)
	var $export = __webpack_require__(9)
	  , sign    = __webpack_require__(109);
	
	$export($export.S, 'Math', {
	  cbrt: function cbrt(x){
	    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
	  }
	});

/***/ },
/* 109 */
/***/ function(module, exports) {

	// 20.2.2.28 Math.sign(x)
	module.exports = Math.sign || function sign(x){
	  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
	};

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.11 Math.clz32(x)
	var $export = __webpack_require__(9);
	
	$export($export.S, 'Math', {
	  clz32: function clz32(x){
	    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
	  }
	});

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.12 Math.cosh(x)
	var $export = __webpack_require__(9)
	  , exp     = Math.exp;
	
	$export($export.S, 'Math', {
	  cosh: function cosh(x){
	    return (exp(x = +x) + exp(-x)) / 2;
	  }
	});

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.14 Math.expm1(x)
	var $export = __webpack_require__(9)
	  , $expm1  = __webpack_require__(113);
	
	$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {expm1: $expm1});

/***/ },
/* 113 */
/***/ function(module, exports) {

	// 20.2.2.14 Math.expm1(x)
	var $expm1 = Math.expm1;
	module.exports = (!$expm1
	  // Old FF bug
	  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
	  // Tor Browser bug
	  || $expm1(-2e-17) != -2e-17
	) ? function expm1(x){
	  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
	} : $expm1;

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.16 Math.fround(x)
	var $export   = __webpack_require__(9)
	  , sign      = __webpack_require__(109)
	  , pow       = Math.pow
	  , EPSILON   = pow(2, -52)
	  , EPSILON32 = pow(2, -23)
	  , MAX32     = pow(2, 127) * (2 - EPSILON32)
	  , MIN32     = pow(2, -126);
	
	var roundTiesToEven = function(n){
	  return n + 1 / EPSILON - 1 / EPSILON;
	};
	
	
	$export($export.S, 'Math', {
	  fround: function fround(x){
	    var $abs  = Math.abs(x)
	      , $sign = sign(x)
	      , a, result;
	    if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
	    a = (1 + EPSILON32 / EPSILON) * $abs;
	    result = a - (a - $abs);
	    if(result > MAX32 || result != result)return $sign * Infinity;
	    return $sign * result;
	  }
	});

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
	var $export = __webpack_require__(9)
	  , abs     = Math.abs;
	
	$export($export.S, 'Math', {
	  hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars
	    var sum  = 0
	      , i    = 0
	      , aLen = arguments.length
	      , larg = 0
	      , arg, div;
	    while(i < aLen){
	      arg = abs(arguments[i++]);
	      if(larg < arg){
	        div  = larg / arg;
	        sum  = sum * div * div + 1;
	        larg = arg;
	      } else if(arg > 0){
	        div  = arg / larg;
	        sum += div * div;
	      } else sum += arg;
	    }
	    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
	  }
	});

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.18 Math.imul(x, y)
	var $export = __webpack_require__(9)
	  , $imul   = Math.imul;
	
	// some WebKit versions fails with big numbers, some has wrong arity
	$export($export.S + $export.F * __webpack_require__(8)(function(){
	  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
	}), 'Math', {
	  imul: function imul(x, y){
	    var UINT16 = 0xffff
	      , xn = +x
	      , yn = +y
	      , xl = UINT16 & xn
	      , yl = UINT16 & yn;
	    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
	  }
	});

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.21 Math.log10(x)
	var $export = __webpack_require__(9);
	
	$export($export.S, 'Math', {
	  log10: function log10(x){
	    return Math.log(x) / Math.LN10;
	  }
	});

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.20 Math.log1p(x)
	var $export = __webpack_require__(9);
	
	$export($export.S, 'Math', {log1p: __webpack_require__(105)});

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.22 Math.log2(x)
	var $export = __webpack_require__(9);
	
	$export($export.S, 'Math', {
	  log2: function log2(x){
	    return Math.log(x) / Math.LN2;
	  }
	});

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.28 Math.sign(x)
	var $export = __webpack_require__(9);
	
	$export($export.S, 'Math', {sign: __webpack_require__(109)});

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.30 Math.sinh(x)
	var $export = __webpack_require__(9)
	  , expm1   = __webpack_require__(113)
	  , exp     = Math.exp;
	
	// V8 near Chromium 38 has a problem with very small numbers
	$export($export.S + $export.F * __webpack_require__(8)(function(){
	  return !Math.sinh(-2e-17) != -2e-17;
	}), 'Math', {
	  sinh: function sinh(x){
	    return Math.abs(x = +x) < 1
	      ? (expm1(x) - expm1(-x)) / 2
	      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
	  }
	});

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.33 Math.tanh(x)
	var $export = __webpack_require__(9)
	  , expm1   = __webpack_require__(113)
	  , exp     = Math.exp;
	
	$export($export.S, 'Math', {
	  tanh: function tanh(x){
	    var a = expm1(x = +x)
	      , b = expm1(-x);
	    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
	  }
	});

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.34 Math.trunc(x)
	var $export = __webpack_require__(9);
	
	$export($export.S, 'Math', {
	  trunc: function trunc(it){
	    return (it > 0 ? Math.floor : Math.ceil)(it);
	  }
	});

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	var $export        = __webpack_require__(9)
	  , toIndex        = __webpack_require__(40)
	  , fromCharCode   = String.fromCharCode
	  , $fromCodePoint = String.fromCodePoint;
	
	// length should be 1, old FF problem
	$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
	  // 21.1.2.2 String.fromCodePoint(...codePoints)
	  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
	    var res  = []
	      , aLen = arguments.length
	      , i    = 0
	      , code;
	    while(aLen > i){
	      code = +arguments[i++];
	      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
	      res.push(code < 0x10000
	        ? fromCharCode(code)
	        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
	      );
	    } return res.join('');
	  }
	});

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	var $export   = __webpack_require__(9)
	  , toIObject = __webpack_require__(33)
	  , toLength  = __webpack_require__(38);
	
	$export($export.S, 'String', {
	  // 21.1.2.4 String.raw(callSite, ...substitutions)
	  raw: function raw(callSite){
	    var tpl  = toIObject(callSite.raw)
	      , len  = toLength(tpl.length)
	      , aLen = arguments.length
	      , res  = []
	      , i    = 0;
	    while(len > i){
	      res.push(String(tpl[i++]));
	      if(i < aLen)res.push(String(arguments[i]));
	    } return res.join('');
	  }
	});

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 21.1.3.25 String.prototype.trim()
	__webpack_require__(84)('trim', function($trim){
	  return function trim(){
	    return $trim(this, 3);
	  };
	});

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $at  = __webpack_require__(128)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(129)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(39)
	  , defined   = __webpack_require__(36);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(29)
	  , $export        = __webpack_require__(9)
	  , redefine       = __webpack_require__(19)
	  , hide           = __webpack_require__(11)
	  , has            = __webpack_require__(6)
	  , Iterators      = __webpack_require__(130)
	  , $iterCreate    = __webpack_require__(131)
	  , setToStringTag = __webpack_require__(25)
	  , getPrototypeOf = __webpack_require__(60)
	  , ITERATOR       = __webpack_require__(26)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';
	
	var returnThis = function(){ return this; };
	
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 130 */
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var create         = __webpack_require__(47)
	  , descriptor     = __webpack_require__(18)
	  , setToStringTag = __webpack_require__(25)
	  , IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(11)(IteratorPrototype, __webpack_require__(26)('iterator'), function(){ return this; });
	
	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(9)
	  , $at     = __webpack_require__(128)(false);
	$export($export.P, 'String', {
	  // 21.1.3.3 String.prototype.codePointAt(pos)
	  codePointAt: function codePointAt(pos){
	    return $at(this, pos);
	  }
	});

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
	'use strict';
	var $export   = __webpack_require__(9)
	  , toLength  = __webpack_require__(38)
	  , context   = __webpack_require__(134)
	  , ENDS_WITH = 'endsWith'
	  , $endsWith = ''[ENDS_WITH];
	
	$export($export.P + $export.F * __webpack_require__(136)(ENDS_WITH), 'String', {
	  endsWith: function endsWith(searchString /*, endPosition = @length */){
	    var that = context(this, searchString, ENDS_WITH)
	      , endPosition = arguments.length > 1 ? arguments[1] : undefined
	      , len    = toLength(that.length)
	      , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)
	      , search = String(searchString);
	    return $endsWith
	      ? $endsWith.call(that, search, end)
	      : that.slice(end - search.length, end) === search;
	  }
	});

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	// helper for String#{startsWith, endsWith, includes}
	var isRegExp = __webpack_require__(135)
	  , defined  = __webpack_require__(36);
	
	module.exports = function(that, searchString, NAME){
	  if(isRegExp(searchString))throw TypeError('String#' + NAME + " doesn't accept regex!");
	  return String(defined(that));
	};

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.8 IsRegExp(argument)
	var isObject = __webpack_require__(14)
	  , cof      = __webpack_require__(35)
	  , MATCH    = __webpack_require__(26)('match');
	module.exports = function(it){
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
	};

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	var MATCH = __webpack_require__(26)('match');
	module.exports = function(KEY){
	  var re = /./;
	  try {
	    '/./'[KEY](re);
	  } catch(e){
	    try {
	      re[MATCH] = false;
	      return !'/./'[KEY](re);
	    } catch(f){ /* empty */ }
	  } return true;
	};

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	// 21.1.3.7 String.prototype.includes(searchString, position = 0)
	'use strict';
	var $export  = __webpack_require__(9)
	  , context  = __webpack_require__(134)
	  , INCLUDES = 'includes';
	
	$export($export.P + $export.F * __webpack_require__(136)(INCLUDES), 'String', {
	  includes: function includes(searchString /*, position = 0 */){
	    return !!~context(this, searchString, INCLUDES)
	      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(9);
	
	$export($export.P, 'String', {
	  // 21.1.3.13 String.prototype.repeat(count)
	  repeat: __webpack_require__(92)
	});

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
	'use strict';
	var $export     = __webpack_require__(9)
	  , toLength    = __webpack_require__(38)
	  , context     = __webpack_require__(134)
	  , STARTS_WITH = 'startsWith'
	  , $startsWith = ''[STARTS_WITH];
	
	$export($export.P + $export.F * __webpack_require__(136)(STARTS_WITH), 'String', {
	  startsWith: function startsWith(searchString /*, position = 0 */){
	    var that   = context(this, searchString, STARTS_WITH)
	      , index  = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length))
	      , search = String(searchString);
	    return $startsWith
	      ? $startsWith.call(that, search, index)
	      : that.slice(index, index + search.length) === search;
	  }
	});

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.2 String.prototype.anchor(name)
	__webpack_require__(141)('anchor', function(createHTML){
	  return function anchor(name){
	    return createHTML(this, 'a', 'name', name);
	  }
	});

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(9)
	  , fails   = __webpack_require__(8)
	  , defined = __webpack_require__(36)
	  , quot    = /"/g;
	// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
	var createHTML = function(string, tag, attribute, value) {
	  var S  = String(defined(string))
	    , p1 = '<' + tag;
	  if(attribute !== '')p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
	  return p1 + '>' + S + '</' + tag + '>';
	};
	module.exports = function(NAME, exec){
	  var O = {};
	  O[NAME] = exec(createHTML);
	  $export($export.P + $export.F * fails(function(){
	    var test = ''[NAME]('"');
	    return test !== test.toLowerCase() || test.split('"').length > 3;
	  }), 'String', O);
	};

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.3 String.prototype.big()
	__webpack_require__(141)('big', function(createHTML){
	  return function big(){
	    return createHTML(this, 'big', '', '');
	  }
	});

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.4 String.prototype.blink()
	__webpack_require__(141)('blink', function(createHTML){
	  return function blink(){
	    return createHTML(this, 'blink', '', '');
	  }
	});

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.5 String.prototype.bold()
	__webpack_require__(141)('bold', function(createHTML){
	  return function bold(){
	    return createHTML(this, 'b', '', '');
	  }
	});

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.6 String.prototype.fixed()
	__webpack_require__(141)('fixed', function(createHTML){
	  return function fixed(){
	    return createHTML(this, 'tt', '', '');
	  }
	});

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.7 String.prototype.fontcolor(color)
	__webpack_require__(141)('fontcolor', function(createHTML){
	  return function fontcolor(color){
	    return createHTML(this, 'font', 'color', color);
	  }
	});

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.8 String.prototype.fontsize(size)
	__webpack_require__(141)('fontsize', function(createHTML){
	  return function fontsize(size){
	    return createHTML(this, 'font', 'size', size);
	  }
	});

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.9 String.prototype.italics()
	__webpack_require__(141)('italics', function(createHTML){
	  return function italics(){
	    return createHTML(this, 'i', '', '');
	  }
	});

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.10 String.prototype.link(url)
	__webpack_require__(141)('link', function(createHTML){
	  return function link(url){
	    return createHTML(this, 'a', 'href', url);
	  }
	});

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.11 String.prototype.small()
	__webpack_require__(141)('small', function(createHTML){
	  return function small(){
	    return createHTML(this, 'small', '', '');
	  }
	});

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.12 String.prototype.strike()
	__webpack_require__(141)('strike', function(createHTML){
	  return function strike(){
	    return createHTML(this, 'strike', '', '');
	  }
	});

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.13 String.prototype.sub()
	__webpack_require__(141)('sub', function(createHTML){
	  return function sub(){
	    return createHTML(this, 'sub', '', '');
	  }
	});

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.14 String.prototype.sup()
	__webpack_require__(141)('sup', function(createHTML){
	  return function sup(){
	    return createHTML(this, 'sup', '', '');
	  }
	});

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	// 20.3.3.1 / 15.9.4.4 Date.now()
	var $export = __webpack_require__(9);
	
	$export($export.S, 'Date', {now: function(){ return new Date().getTime(); }});

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export     = __webpack_require__(9)
	  , toObject    = __webpack_require__(59)
	  , toPrimitive = __webpack_require__(17);
	
	$export($export.P + $export.F * __webpack_require__(8)(function(){
	  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({toISOString: function(){ return 1; }}) !== 1;
	}), 'Date', {
	  toJSON: function toJSON(key){
	    var O  = toObject(this)
	      , pv = toPrimitive(O);
	    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
	  }
	});

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
	var $export = __webpack_require__(9)
	  , fails   = __webpack_require__(8)
	  , getTime = Date.prototype.getTime;
	
	var lz = function(num){
	  return num > 9 ? num : '0' + num;
	};
	
	// PhantomJS / old WebKit has a broken implementations
	$export($export.P + $export.F * (fails(function(){
	  return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';
	}) || !fails(function(){
	  new Date(NaN).toISOString();
	})), 'Date', {
	  toISOString: function toISOString(){
	    if(!isFinite(getTime.call(this)))throw RangeError('Invalid time value');
	    var d = this
	      , y = d.getUTCFullYear()
	      , m = d.getUTCMilliseconds()
	      , s = y < 0 ? '-' : y > 9999 ? '+' : '';
	    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
	      '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
	      'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
	      ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
	  }
	});

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	var DateProto    = Date.prototype
	  , INVALID_DATE = 'Invalid Date'
	  , TO_STRING    = 'toString'
	  , $toString    = DateProto[TO_STRING]
	  , getTime      = DateProto.getTime;
	if(new Date(NaN) + '' != INVALID_DATE){
	  __webpack_require__(19)(DateProto, TO_STRING, function toString(){
	    var value = getTime.call(this);
	    return value === value ? $toString.call(this) : INVALID_DATE;
	  });
	}

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	var TO_PRIMITIVE = __webpack_require__(26)('toPrimitive')
	  , proto        = Date.prototype;
	
	if(!(TO_PRIMITIVE in proto))__webpack_require__(11)(proto, TO_PRIMITIVE, __webpack_require__(159));

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var anObject    = __webpack_require__(13)
	  , toPrimitive = __webpack_require__(17)
	  , NUMBER      = 'number';
	
	module.exports = function(hint){
	  if(hint !== 'string' && hint !== NUMBER && hint !== 'default')throw TypeError('Incorrect hint');
	  return toPrimitive(anObject(this), hint != NUMBER);
	};

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
	var $export = __webpack_require__(9);
	
	$export($export.S, 'Array', {isArray: __webpack_require__(46)});

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var ctx            = __webpack_require__(21)
	  , $export        = __webpack_require__(9)
	  , toObject       = __webpack_require__(59)
	  , call           = __webpack_require__(162)
	  , isArrayIter    = __webpack_require__(163)
	  , toLength       = __webpack_require__(38)
	  , createProperty = __webpack_require__(164)
	  , getIterFn      = __webpack_require__(165);
	
	$export($export.S + $export.F * !__webpack_require__(166)(function(iter){ Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
	    var O       = toObject(arrayLike)
	      , C       = typeof this == 'function' ? this : Array
	      , aLen    = arguments.length
	      , mapfn   = aLen > 1 ? arguments[1] : undefined
	      , mapping = mapfn !== undefined
	      , index   = 0
	      , iterFn  = getIterFn(O)
	      , length, result, step, iterator;
	    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
	      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
	        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = toLength(O.length);
	      for(result = new C(length); length > index; index++){
	        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(13);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators  = __webpack_require__(130)
	  , ITERATOR   = __webpack_require__(26)('iterator')
	  , ArrayProto = Array.prototype;
	
	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $defineProperty = __webpack_require__(12)
	  , createDesc      = __webpack_require__(18);
	
	module.exports = function(object, index, value){
	  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
	  else object[index] = value;
	};

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	var classof   = __webpack_require__(76)
	  , ITERATOR  = __webpack_require__(26)('iterator')
	  , Iterators = __webpack_require__(130);
	module.exports = __webpack_require__(10).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	var ITERATOR     = __webpack_require__(26)('iterator')
	  , SAFE_CLOSING = false;
	
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }
	
	module.exports = function(exec, skipClosing){
	  if(!skipClosing && !SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[ITERATOR]();
	    iter.next = function(){ return {done: safe = true}; };
	    arr[ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export        = __webpack_require__(9)
	  , createProperty = __webpack_require__(164);
	
	// WebKit Array.of isn't generic
	$export($export.S + $export.F * __webpack_require__(8)(function(){
	  function F(){}
	  return !(Array.of.call(F) instanceof F);
	}), 'Array', {
	  // 22.1.2.3 Array.of( ...items)
	  of: function of(/* ...args */){
	    var index  = 0
	      , aLen   = arguments.length
	      , result = new (typeof this == 'function' ? this : Array)(aLen);
	    while(aLen > index)createProperty(result, index, arguments[index++]);
	    result.length = aLen;
	    return result;
	  }
	});

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.13 Array.prototype.join(separator)
	var $export   = __webpack_require__(9)
	  , toIObject = __webpack_require__(33)
	  , arrayJoin = [].join;
	
	// fallback for not array-like strings
	$export($export.P + $export.F * (__webpack_require__(34) != Object || !__webpack_require__(169)(arrayJoin)), 'Array', {
	  join: function join(separator){
	    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
	  }
	});

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	var fails = __webpack_require__(8);
	
	module.exports = function(method, arg){
	  return !!method && fails(function(){
	    arg ? method.call(null, function(){}, 1) : method.call(null);
	  });
	};

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export    = __webpack_require__(9)
	  , html       = __webpack_require__(49)
	  , cof        = __webpack_require__(35)
	  , toIndex    = __webpack_require__(40)
	  , toLength   = __webpack_require__(38)
	  , arraySlice = [].slice;
	
	// fallback for not array-like ES3 strings and DOM objects
	$export($export.P + $export.F * __webpack_require__(8)(function(){
	  if(html)arraySlice.call(html);
	}), 'Array', {
	  slice: function slice(begin, end){
	    var len   = toLength(this.length)
	      , klass = cof(this);
	    end = end === undefined ? len : end;
	    if(klass == 'Array')return arraySlice.call(this, begin, end);
	    var start  = toIndex(begin, len)
	      , upTo   = toIndex(end, len)
	      , size   = toLength(upTo - start)
	      , cloned = Array(size)
	      , i      = 0;
	    for(; i < size; i++)cloned[i] = klass == 'String'
	      ? this.charAt(start + i)
	      : this[start + i];
	    return cloned;
	  }
	});

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export   = __webpack_require__(9)
	  , aFunction = __webpack_require__(22)
	  , toObject  = __webpack_require__(59)
	  , fails     = __webpack_require__(8)
	  , $sort     = [].sort
	  , test      = [1, 2, 3];
	
	$export($export.P + $export.F * (fails(function(){
	  // IE8-
	  test.sort(undefined);
	}) || !fails(function(){
	  // V8 bug
	  test.sort(null);
	  // Old WebKit
	}) || !__webpack_require__(169)($sort)), 'Array', {
	  // 22.1.3.25 Array.prototype.sort(comparefn)
	  sort: function sort(comparefn){
	    return comparefn === undefined
	      ? $sort.call(toObject(this))
	      : $sort.call(toObject(this), aFunction(comparefn));
	  }
	});

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export  = __webpack_require__(9)
	  , $forEach = __webpack_require__(173)(0)
	  , STRICT   = __webpack_require__(169)([].forEach, true);
	
	$export($export.P + $export.F * !STRICT, 'Array', {
	  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
	  forEach: function forEach(callbackfn /* , thisArg */){
	    return $forEach(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex
	var ctx      = __webpack_require__(21)
	  , IObject  = __webpack_require__(34)
	  , toObject = __webpack_require__(59)
	  , toLength = __webpack_require__(38)
	  , asc      = __webpack_require__(174);
	module.exports = function(TYPE, $create){
	  var IS_MAP        = TYPE == 1
	    , IS_FILTER     = TYPE == 2
	    , IS_SOME       = TYPE == 3
	    , IS_EVERY      = TYPE == 4
	    , IS_FIND_INDEX = TYPE == 6
	    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
	    , create        = $create || asc;
	  return function($this, callbackfn, that){
	    var O      = toObject($this)
	      , self   = IObject(O)
	      , f      = ctx(callbackfn, that, 3)
	      , length = toLength(self.length)
	      , index  = 0
	      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
	      , val, res;
	    for(;length > index; index++)if(NO_HOLES || index in self){
	      val = self[index];
	      res = f(val, index, O);
	      if(TYPE){
	        if(IS_MAP)result[index] = res;            // map
	        else if(res)switch(TYPE){
	          case 3: return true;                    // some
	          case 5: return val;                     // find
	          case 6: return index;                   // findIndex
	          case 2: result.push(val);               // filter
	        } else if(IS_EVERY)return false;          // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
	var speciesConstructor = __webpack_require__(175);
	
	module.exports = function(original, length){
	  return new (speciesConstructor(original))(length);
	};

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(14)
	  , isArray  = __webpack_require__(46)
	  , SPECIES  = __webpack_require__(26)('species');
	
	module.exports = function(original){
	  var C;
	  if(isArray(original)){
	    C = original.constructor;
	    // cross-realm fallback
	    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
	    if(isObject(C)){
	      C = C[SPECIES];
	      if(C === null)C = undefined;
	    }
	  } return C === undefined ? Array : C;
	};

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(9)
	  , $map    = __webpack_require__(173)(1);
	
	$export($export.P + $export.F * !__webpack_require__(169)([].map, true), 'Array', {
	  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
	  map: function map(callbackfn /* , thisArg */){
	    return $map(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(9)
	  , $filter = __webpack_require__(173)(2);
	
	$export($export.P + $export.F * !__webpack_require__(169)([].filter, true), 'Array', {
	  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
	  filter: function filter(callbackfn /* , thisArg */){
	    return $filter(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(9)
	  , $some   = __webpack_require__(173)(3);
	
	$export($export.P + $export.F * !__webpack_require__(169)([].some, true), 'Array', {
	  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
	  some: function some(callbackfn /* , thisArg */){
	    return $some(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(9)
	  , $every  = __webpack_require__(173)(4);
	
	$export($export.P + $export.F * !__webpack_require__(169)([].every, true), 'Array', {
	  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
	  every: function every(callbackfn /* , thisArg */){
	    return $every(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(9)
	  , $reduce = __webpack_require__(181);
	
	$export($export.P + $export.F * !__webpack_require__(169)([].reduce, true), 'Array', {
	  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
	  reduce: function reduce(callbackfn /* , initialValue */){
	    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
	  }
	});

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	var aFunction = __webpack_require__(22)
	  , toObject  = __webpack_require__(59)
	  , IObject   = __webpack_require__(34)
	  , toLength  = __webpack_require__(38);
	
	module.exports = function(that, callbackfn, aLen, memo, isRight){
	  aFunction(callbackfn);
	  var O      = toObject(that)
	    , self   = IObject(O)
	    , length = toLength(O.length)
	    , index  = isRight ? length - 1 : 0
	    , i      = isRight ? -1 : 1;
	  if(aLen < 2)for(;;){
	    if(index in self){
	      memo = self[index];
	      index += i;
	      break;
	    }
	    index += i;
	    if(isRight ? index < 0 : length <= index){
	      throw TypeError('Reduce of empty array with no initial value');
	    }
	  }
	  for(;isRight ? index >= 0 : length > index; index += i)if(index in self){
	    memo = callbackfn(memo, self[index], index, O);
	  }
	  return memo;
	};

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(9)
	  , $reduce = __webpack_require__(181);
	
	$export($export.P + $export.F * !__webpack_require__(169)([].reduceRight, true), 'Array', {
	  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
	  reduceRight: function reduceRight(callbackfn /* , initialValue */){
	    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
	  }
	});

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export       = __webpack_require__(9)
	  , $indexOf      = __webpack_require__(37)(false)
	  , $native       = [].indexOf
	  , NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;
	
	$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(169)($native)), 'Array', {
	  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
	  indexOf: function indexOf(searchElement /*, fromIndex = 0 */){
	    return NEGATIVE_ZERO
	      // convert -0 to +0
	      ? $native.apply(this, arguments) || 0
	      : $indexOf(this, searchElement, arguments[1]);
	  }
	});

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export       = __webpack_require__(9)
	  , toIObject     = __webpack_require__(33)
	  , toInteger     = __webpack_require__(39)
	  , toLength      = __webpack_require__(38)
	  , $native       = [].lastIndexOf
	  , NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;
	
	$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(169)($native)), 'Array', {
	  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
	  lastIndexOf: function lastIndexOf(searchElement /*, fromIndex = @[*-1] */){
	    // convert -0 to +0
	    if(NEGATIVE_ZERO)return $native.apply(this, arguments) || 0;
	    var O      = toIObject(this)
	      , length = toLength(O.length)
	      , index  = length - 1;
	    if(arguments.length > 1)index = Math.min(index, toInteger(arguments[1]));
	    if(index < 0)index = length + index;
	    for(;index >= 0; index--)if(index in O)if(O[index] === searchElement)return index || 0;
	    return -1;
	  }
	});

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	var $export = __webpack_require__(9);
	
	$export($export.P, 'Array', {copyWithin: __webpack_require__(186)});
	
	__webpack_require__(187)('copyWithin');

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	'use strict';
	var toObject = __webpack_require__(59)
	  , toIndex  = __webpack_require__(40)
	  , toLength = __webpack_require__(38);
	
	module.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/){
	  var O     = toObject(this)
	    , len   = toLength(O.length)
	    , to    = toIndex(target, len)
	    , from  = toIndex(start, len)
	    , end   = arguments.length > 2 ? arguments[2] : undefined
	    , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)
	    , inc   = 1;
	  if(from < to && to < from + count){
	    inc  = -1;
	    from += count - 1;
	    to   += count - 1;
	  }
	  while(count-- > 0){
	    if(from in O)O[to] = O[from];
	    else delete O[to];
	    to   += inc;
	    from += inc;
	  } return O;
	};

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.31 Array.prototype[@@unscopables]
	var UNSCOPABLES = __webpack_require__(26)('unscopables')
	  , ArrayProto  = Array.prototype;
	if(ArrayProto[UNSCOPABLES] == undefined)__webpack_require__(11)(ArrayProto, UNSCOPABLES, {});
	module.exports = function(key){
	  ArrayProto[UNSCOPABLES][key] = true;
	};

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	var $export = __webpack_require__(9);
	
	$export($export.P, 'Array', {fill: __webpack_require__(189)});
	
	__webpack_require__(187)('fill');

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	'use strict';
	var toObject = __webpack_require__(59)
	  , toIndex  = __webpack_require__(40)
	  , toLength = __webpack_require__(38);
	module.exports = function fill(value /*, start = 0, end = @length */){
	  var O      = toObject(this)
	    , length = toLength(O.length)
	    , aLen   = arguments.length
	    , index  = toIndex(aLen > 1 ? arguments[1] : undefined, length)
	    , end    = aLen > 2 ? arguments[2] : undefined
	    , endPos = end === undefined ? length : toIndex(end, length);
	  while(endPos > index)O[index++] = value;
	  return O;
	};

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
	var $export = __webpack_require__(9)
	  , $find   = __webpack_require__(173)(5)
	  , KEY     = 'find'
	  , forced  = true;
	// Shouldn't skip holes
	if(KEY in [])Array(1)[KEY](function(){ forced = false; });
	$export($export.P + $export.F * forced, 'Array', {
	  find: function find(callbackfn/*, that = undefined */){
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	__webpack_require__(187)(KEY);

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
	var $export = __webpack_require__(9)
	  , $find   = __webpack_require__(173)(6)
	  , KEY     = 'findIndex'
	  , forced  = true;
	// Shouldn't skip holes
	if(KEY in [])Array(1)[KEY](function(){ forced = false; });
	$export($export.P + $export.F * forced, 'Array', {
	  findIndex: function findIndex(callbackfn/*, that = undefined */){
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	__webpack_require__(187)(KEY);

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(193)('Array');

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global      = __webpack_require__(5)
	  , dP          = __webpack_require__(12)
	  , DESCRIPTORS = __webpack_require__(7)
	  , SPECIES     = __webpack_require__(26)('species');
	
	module.exports = function(KEY){
	  var C = global[KEY];
	  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
	    configurable: true,
	    get: function(){ return this; }
	  });
	};

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(187)
	  , step             = __webpack_require__(195)
	  , Iterators        = __webpack_require__(130)
	  , toIObject        = __webpack_require__(33);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(129)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 195 */
/***/ function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	var global            = __webpack_require__(5)
	  , inheritIfRequired = __webpack_require__(89)
	  , dP                = __webpack_require__(12).f
	  , gOPN              = __webpack_require__(51).f
	  , isRegExp          = __webpack_require__(135)
	  , $flags            = __webpack_require__(197)
	  , $RegExp           = global.RegExp
	  , Base              = $RegExp
	  , proto             = $RegExp.prototype
	  , re1               = /a/g
	  , re2               = /a/g
	  // "new" creates a new object, old webkit buggy here
	  , CORRECT_NEW       = new $RegExp(re1) !== re1;
	
	if(__webpack_require__(7) && (!CORRECT_NEW || __webpack_require__(8)(function(){
	  re2[__webpack_require__(26)('match')] = false;
	  // RegExp constructor can alter flags and IsRegExp works correct with @@match
	  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
	}))){
	  $RegExp = function RegExp(p, f){
	    var tiRE = this instanceof $RegExp
	      , piRE = isRegExp(p)
	      , fiU  = f === undefined;
	    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
	      : inheritIfRequired(CORRECT_NEW
	        ? new Base(piRE && !fiU ? p.source : p, f)
	        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
	      , tiRE ? this : proto, $RegExp);
	  };
	  var proxy = function(key){
	    key in $RegExp || dP($RegExp, key, {
	      configurable: true,
	      get: function(){ return Base[key]; },
	      set: function(it){ Base[key] = it; }
	    });
	  };
	  for(var keys = gOPN(Base), i = 0; keys.length > i; )proxy(keys[i++]);
	  proto.constructor = $RegExp;
	  $RegExp.prototype = proto;
	  __webpack_require__(19)(global, 'RegExp', $RegExp);
	}
	
	__webpack_require__(193)('RegExp');

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 21.2.5.3 get RegExp.prototype.flags
	var anObject = __webpack_require__(13);
	module.exports = function(){
	  var that   = anObject(this)
	    , result = '';
	  if(that.global)     result += 'g';
	  if(that.ignoreCase) result += 'i';
	  if(that.multiline)  result += 'm';
	  if(that.unicode)    result += 'u';
	  if(that.sticky)     result += 'y';
	  return result;
	};

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	__webpack_require__(199);
	var anObject    = __webpack_require__(13)
	  , $flags      = __webpack_require__(197)
	  , DESCRIPTORS = __webpack_require__(7)
	  , TO_STRING   = 'toString'
	  , $toString   = /./[TO_STRING];
	
	var define = function(fn){
	  __webpack_require__(19)(RegExp.prototype, TO_STRING, fn, true);
	};
	
	// 21.2.5.14 RegExp.prototype.toString()
	if(__webpack_require__(8)(function(){ return $toString.call({source: 'a', flags: 'b'}) != '/a/b'; })){
	  define(function toString(){
	    var R = anObject(this);
	    return '/'.concat(R.source, '/',
	      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
	  });
	// FF44- RegExp#toString has a wrong name
	} else if($toString.name != TO_STRING){
	  define(function toString(){
	    return $toString.call(this);
	  });
	}

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	// 21.2.5.3 get RegExp.prototype.flags()
	if(__webpack_require__(7) && /./g.flags != 'g')__webpack_require__(12).f(RegExp.prototype, 'flags', {
	  configurable: true,
	  get: __webpack_require__(197)
	});

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	// @@match logic
	__webpack_require__(201)('match', 1, function(defined, MATCH, $match){
	  // 21.1.3.11 String.prototype.match(regexp)
	  return [function match(regexp){
	    'use strict';
	    var O  = defined(this)
	      , fn = regexp == undefined ? undefined : regexp[MATCH];
	    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
	  }, $match];
	});

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var hide     = __webpack_require__(11)
	  , redefine = __webpack_require__(19)
	  , fails    = __webpack_require__(8)
	  , defined  = __webpack_require__(36)
	  , wks      = __webpack_require__(26);
	
	module.exports = function(KEY, length, exec){
	  var SYMBOL   = wks(KEY)
	    , fns      = exec(defined, SYMBOL, ''[KEY])
	    , strfn    = fns[0]
	    , rxfn     = fns[1];
	  if(fails(function(){
	    var O = {};
	    O[SYMBOL] = function(){ return 7; };
	    return ''[KEY](O) != 7;
	  })){
	    redefine(String.prototype, KEY, strfn);
	    hide(RegExp.prototype, SYMBOL, length == 2
	      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
	      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
	      ? function(string, arg){ return rxfn.call(string, this, arg); }
	      // 21.2.5.6 RegExp.prototype[@@match](string)
	      // 21.2.5.9 RegExp.prototype[@@search](string)
	      : function(string){ return rxfn.call(string, this); }
	    );
	  }
	};

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	// @@replace logic
	__webpack_require__(201)('replace', 2, function(defined, REPLACE, $replace){
	  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
	  return [function replace(searchValue, replaceValue){
	    'use strict';
	    var O  = defined(this)
	      , fn = searchValue == undefined ? undefined : searchValue[REPLACE];
	    return fn !== undefined
	      ? fn.call(searchValue, O, replaceValue)
	      : $replace.call(String(O), searchValue, replaceValue);
	  }, $replace];
	});

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	// @@search logic
	__webpack_require__(201)('search', 1, function(defined, SEARCH, $search){
	  // 21.1.3.15 String.prototype.search(regexp)
	  return [function search(regexp){
	    'use strict';
	    var O  = defined(this)
	      , fn = regexp == undefined ? undefined : regexp[SEARCH];
	    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
	  }, $search];
	});

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	// @@split logic
	__webpack_require__(201)('split', 2, function(defined, SPLIT, $split){
	  'use strict';
	  var isRegExp   = __webpack_require__(135)
	    , _split     = $split
	    , $push      = [].push
	    , $SPLIT     = 'split'
	    , LENGTH     = 'length'
	    , LAST_INDEX = 'lastIndex';
	  if(
	    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
	    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
	    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
	    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
	    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
	    ''[$SPLIT](/.?/)[LENGTH]
	  ){
	    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
	    // based on es5-shim implementation, need to rework it
	    $split = function(separator, limit){
	      var string = String(this);
	      if(separator === undefined && limit === 0)return [];
	      // If `separator` is not a regex, use native split
	      if(!isRegExp(separator))return _split.call(string, separator, limit);
	      var output = [];
	      var flags = (separator.ignoreCase ? 'i' : '') +
	                  (separator.multiline ? 'm' : '') +
	                  (separator.unicode ? 'u' : '') +
	                  (separator.sticky ? 'y' : '');
	      var lastLastIndex = 0;
	      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
	      // Make `global` and avoid `lastIndex` issues by working with a copy
	      var separatorCopy = new RegExp(separator.source, flags + 'g');
	      var separator2, match, lastIndex, lastLength, i;
	      // Doesn't need flags gy, but they don't hurt
	      if(!NPCG)separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
	      while(match = separatorCopy.exec(string)){
	        // `separatorCopy.lastIndex` is not reliable cross-browser
	        lastIndex = match.index + match[0][LENGTH];
	        if(lastIndex > lastLastIndex){
	          output.push(string.slice(lastLastIndex, match.index));
	          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
	          if(!NPCG && match[LENGTH] > 1)match[0].replace(separator2, function(){
	            for(i = 1; i < arguments[LENGTH] - 2; i++)if(arguments[i] === undefined)match[i] = undefined;
	          });
	          if(match[LENGTH] > 1 && match.index < string[LENGTH])$push.apply(output, match.slice(1));
	          lastLength = match[0][LENGTH];
	          lastLastIndex = lastIndex;
	          if(output[LENGTH] >= splitLimit)break;
	        }
	        if(separatorCopy[LAST_INDEX] === match.index)separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
	      }
	      if(lastLastIndex === string[LENGTH]){
	        if(lastLength || !separatorCopy.test(''))output.push('');
	      } else output.push(string.slice(lastLastIndex));
	      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
	    };
	  // Chakra, V8
	  } else if('0'[$SPLIT](undefined, 0)[LENGTH]){
	    $split = function(separator, limit){
	      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
	    };
	  }
	  // 21.1.3.17 String.prototype.split(separator, limit)
	  return [function split(separator, limit){
	    var O  = defined(this)
	      , fn = separator == undefined ? undefined : separator[SPLIT];
	    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
	  }, $split];
	});

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY            = __webpack_require__(29)
	  , global             = __webpack_require__(5)
	  , ctx                = __webpack_require__(21)
	  , classof            = __webpack_require__(76)
	  , $export            = __webpack_require__(9)
	  , isObject           = __webpack_require__(14)
	  , aFunction          = __webpack_require__(22)
	  , anInstance         = __webpack_require__(206)
	  , forOf              = __webpack_require__(207)
	  , speciesConstructor = __webpack_require__(208)
	  , task               = __webpack_require__(209).set
	  , microtask          = __webpack_require__(210)()
	  , PROMISE            = 'Promise'
	  , TypeError          = global.TypeError
	  , process            = global.process
	  , $Promise           = global[PROMISE]
	  , process            = global.process
	  , isNode             = classof(process) == 'process'
	  , empty              = function(){ /* empty */ }
	  , Internal, GenericPromiseCapability, Wrapper;
	
	var USE_NATIVE = !!function(){
	  try {
	    // correct subclassing with @@species support
	    var promise     = $Promise.resolve(1)
	      , FakePromise = (promise.constructor = {})[__webpack_require__(26)('species')] = function(exec){ exec(empty, empty); };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
	  } catch(e){ /* empty */ }
	}();
	
	// helpers
	var sameConstructor = function(a, b){
	  // with library wrapper special case
	  return a === b || a === $Promise && b === Wrapper;
	};
	var isThenable = function(it){
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var newPromiseCapability = function(C){
	  return sameConstructor($Promise, C)
	    ? new PromiseCapability(C)
	    : new GenericPromiseCapability(C);
	};
	var PromiseCapability = GenericPromiseCapability = function(C){
	  var resolve, reject;
	  this.promise = new C(function($$resolve, $$reject){
	    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject  = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject  = aFunction(reject);
	};
	var perform = function(exec){
	  try {
	    exec();
	  } catch(e){
	    return {error: e};
	  }
	};
	var notify = function(promise, isReject){
	  if(promise._n)return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function(){
	    var value = promise._v
	      , ok    = promise._s == 1
	      , i     = 0;
	    var run = function(reaction){
	      var handler = ok ? reaction.ok : reaction.fail
	        , resolve = reaction.resolve
	        , reject  = reaction.reject
	        , domain  = reaction.domain
	        , result, then;
	      try {
	        if(handler){
	          if(!ok){
	            if(promise._h == 2)onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if(handler === true)result = value;
	          else {
	            if(domain)domain.enter();
	            result = handler(value);
	            if(domain)domain.exit();
	          }
	          if(result === reaction.promise){
	            reject(TypeError('Promise-chain cycle'));
	          } else if(then = isThenable(result)){
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch(e){
	        reject(e);
	      }
	    };
	    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if(isReject && !promise._h)onUnhandled(promise);
	  });
	};
	var onUnhandled = function(promise){
	  task.call(global, function(){
	    var value = promise._v
	      , abrupt, handler, console;
	    if(isUnhandled(promise)){
	      abrupt = perform(function(){
	        if(isNode){
	          process.emit('unhandledRejection', value, promise);
	        } else if(handler = global.onunhandledrejection){
	          handler({promise: promise, reason: value});
	        } else if((console = global.console) && console.error){
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if(abrupt)throw abrupt.error;
	  });
	};
	var isUnhandled = function(promise){
	  if(promise._h == 1)return false;
	  var chain = promise._a || promise._c
	    , i     = 0
	    , reaction;
	  while(chain.length > i){
	    reaction = chain[i++];
	    if(reaction.fail || !isUnhandled(reaction.promise))return false;
	  } return true;
	};
	var onHandleUnhandled = function(promise){
	  task.call(global, function(){
	    var handler;
	    if(isNode){
	      process.emit('rejectionHandled', promise);
	    } else if(handler = global.onrejectionhandled){
	      handler({promise: promise, reason: promise._v});
	    }
	  });
	};
	var $reject = function(value){
	  var promise = this;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if(!promise._a)promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function(value){
	  var promise = this
	    , then;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if(promise === value)throw TypeError("Promise can't be resolved itself");
	    if(then = isThenable(value)){
	      microtask(function(){
	        var wrapper = {_w: promise, _d: false}; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch(e){
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch(e){
	    $reject.call({_w: promise, _d: false}, e); // wrap
	  }
	};
	
	// constructor polyfill
	if(!USE_NATIVE){
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor){
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch(err){
	      $reject.call(this, err);
	    }
	  };
	  Internal = function Promise(executor){
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = __webpack_require__(211)($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected){
	      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
	      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail   = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode ? process.domain : undefined;
	      this._c.push(reaction);
	      if(this._a)this._a.push(reaction);
	      if(this._s)notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function(onRejected){
	      return this.then(undefined, onRejected);
	    }
	  });
	  PromiseCapability = function(){
	    var promise  = new Internal;
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject  = ctx($reject, promise, 1);
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
	__webpack_require__(25)($Promise, PROMISE);
	__webpack_require__(193)(PROMISE);
	Wrapper = __webpack_require__(10)[PROMISE];
	
	// statics
	$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r){
	    var capability = newPromiseCapability(this)
	      , $$reject   = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x){
	    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
	    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
	    var capability = newPromiseCapability(this)
	      , $$resolve  = capability.resolve;
	    $$resolve(x);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(166)(function(iter){
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , resolve    = capability.resolve
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      var values    = []
	        , index     = 0
	        , remaining = 1;
	      forOf(iterable, false, function(promise){
	        var $index        = index++
	          , alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function(value){
	          if(alreadyCalled)return;
	          alreadyCalled  = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      forOf(iterable, false, function(promise){
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  }
	});

/***/ },
/* 206 */
/***/ function(module, exports) {

	module.exports = function(it, Constructor, name, forbiddenField){
	  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	var ctx         = __webpack_require__(21)
	  , call        = __webpack_require__(162)
	  , isArrayIter = __webpack_require__(163)
	  , anObject    = __webpack_require__(13)
	  , toLength    = __webpack_require__(38)
	  , getIterFn   = __webpack_require__(165)
	  , BREAK       = {}
	  , RETURN      = {};
	var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
	  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
	    , f      = ctx(fn, that, entries ? 2 : 1)
	    , index  = 0
	    , length, step, iterator, result;
	  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if(result === BREAK || result === RETURN)return result;
	  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
	    result = call(iterator, f, step.value, entries);
	    if(result === BREAK || result === RETURN)return result;
	  }
	};
	exports.BREAK  = BREAK;
	exports.RETURN = RETURN;

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)
	var anObject  = __webpack_require__(13)
	  , aFunction = __webpack_require__(22)
	  , SPECIES   = __webpack_require__(26)('species');
	module.exports = function(O, D){
	  var C = anObject(O).constructor, S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	var ctx                = __webpack_require__(21)
	  , invoke             = __webpack_require__(79)
	  , html               = __webpack_require__(49)
	  , cel                = __webpack_require__(16)
	  , global             = __webpack_require__(5)
	  , process            = global.process
	  , setTask            = global.setImmediate
	  , clearTask          = global.clearImmediate
	  , MessageChannel     = global.MessageChannel
	  , counter            = 0
	  , queue              = {}
	  , ONREADYSTATECHANGE = 'onreadystatechange'
	  , defer, channel, port;
	var run = function(){
	  var id = +this;
	  if(queue.hasOwnProperty(id)){
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function(event){
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if(!setTask || !clearTask){
	  setTask = function setImmediate(fn){
	    var args = [], i = 1;
	    while(arguments.length > i)args.push(arguments[i++]);
	    queue[++counter] = function(){
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id){
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if(__webpack_require__(35)(process) == 'process'){
	    defer = function(id){
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if(MessageChannel){
	    channel = new MessageChannel;
	    port    = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
	    defer = function(id){
	      global.postMessage(id + '', '*');
	    };
	    global.addEventListener('message', listener, false);
	  // IE8-
	  } else if(ONREADYSTATECHANGE in cel('script')){
	    defer = function(id){
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function(id){
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set:   setTask,
	  clear: clearTask
	};

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(5)
	  , macrotask = __webpack_require__(209).set
	  , Observer  = global.MutationObserver || global.WebKitMutationObserver
	  , process   = global.process
	  , Promise   = global.Promise
	  , isNode    = __webpack_require__(35)(process) == 'process';
	
	module.exports = function(){
	  var head, last, notify;
	
	  var flush = function(){
	    var parent, fn;
	    if(isNode && (parent = process.domain))parent.exit();
	    while(head){
	      fn   = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch(e){
	        if(head)notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if(parent)parent.enter();
	  };
	
	  // Node.js
	  if(isNode){
	    notify = function(){
	      process.nextTick(flush);
	    };
	  // browsers with MutationObserver
	  } else if(Observer){
	    var toggle = true
	      , node   = document.createTextNode('');
	    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
	    notify = function(){
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if(Promise && Promise.resolve){
	    var promise = Promise.resolve();
	    notify = function(){
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function(){
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global, flush);
	    };
	  }
	
	  return function(fn){
	    var task = {fn: fn, next: undefined};
	    if(last)last.next = task;
	    if(!head){
	      head = task;
	      notify();
	    } last = task;
	  };
	};

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	var redefine = __webpack_require__(19);
	module.exports = function(target, src, safe){
	  for(var key in src)redefine(target, key, src[key], safe);
	  return target;
	};

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(213);
	
	// 23.1 Map Objects
	module.exports = __webpack_require__(214)('Map', function(get){
	  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key){
	    var entry = strong.getEntry(this, key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value){
	    return strong.def(this, key === 0 ? 0 : key, value);
	  }
	}, strong, true);

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var dP          = __webpack_require__(12).f
	  , create      = __webpack_require__(47)
	  , redefineAll = __webpack_require__(211)
	  , ctx         = __webpack_require__(21)
	  , anInstance  = __webpack_require__(206)
	  , defined     = __webpack_require__(36)
	  , forOf       = __webpack_require__(207)
	  , $iterDefine = __webpack_require__(129)
	  , step        = __webpack_require__(195)
	  , setSpecies  = __webpack_require__(193)
	  , DESCRIPTORS = __webpack_require__(7)
	  , fastKey     = __webpack_require__(23).fastKey
	  , SIZE        = DESCRIPTORS ? '_s' : 'size';
	
	var getEntry = function(that, key){
	  // fast case
	  var index = fastKey(key), entry;
	  if(index !== 'F')return that._i[index];
	  // frozen object case
	  for(entry = that._f; entry; entry = entry.n){
	    if(entry.k == key)return entry;
	  }
	};
	
	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      anInstance(that, C, NAME, '_i');
	      that._i = create(null); // index
	      that._f = undefined;    // first entry
	      that._l = undefined;    // last entry
	      that[SIZE] = 0;         // size
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear(){
	        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
	          entry.r = true;
	          if(entry.p)entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function(key){
	        var that  = this
	          , entry = getEntry(that, key);
	        if(entry){
	          var next = entry.n
	            , prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if(prev)prev.n = next;
	          if(next)next.p = prev;
	          if(that._f == entry)that._f = next;
	          if(that._l == entry)that._l = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /*, that = undefined */){
	        anInstance(this, C, 'forEach');
	        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
	          , entry;
	        while(entry = entry ? entry.n : this._f){
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while(entry && entry.r)entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key){
	        return !!getEntry(this, key);
	      }
	    });
	    if(DESCRIPTORS)dP(C.prototype, 'size', {
	      get: function(){
	        return defined(this[SIZE]);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    var entry = getEntry(that, key)
	      , prev, index;
	    // change existing entry
	    if(entry){
	      entry.v = value;
	    // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that._l,             // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if(!that._f)that._f = entry;
	      if(prev)prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if(index !== 'F')that._i[index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  setStrong: function(C, NAME, IS_MAP){
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    $iterDefine(C, NAME, function(iterated, kind){
	      this._t = iterated;  // target
	      this._k = kind;      // kind
	      this._l = undefined; // previous
	    }, function(){
	      var that  = this
	        , kind  = that._k
	        , entry = that._l;
	      // revert to the last existing entry
	      while(entry && entry.r)entry = entry.p;
	      // get next entry
	      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
	        // or finish the iteration
	        that._t = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if(kind == 'keys'  )return step(0, entry.k);
	      if(kind == 'values')return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);
	
	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(NAME);
	  }
	};

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global            = __webpack_require__(5)
	  , $export           = __webpack_require__(9)
	  , redefine          = __webpack_require__(19)
	  , redefineAll       = __webpack_require__(211)
	  , meta              = __webpack_require__(23)
	  , forOf             = __webpack_require__(207)
	  , anInstance        = __webpack_require__(206)
	  , isObject          = __webpack_require__(14)
	  , fails             = __webpack_require__(8)
	  , $iterDetect       = __webpack_require__(166)
	  , setToStringTag    = __webpack_require__(25)
	  , inheritIfRequired = __webpack_require__(89);
	
	module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
	  var Base  = global[NAME]
	    , C     = Base
	    , ADDER = IS_MAP ? 'set' : 'add'
	    , proto = C && C.prototype
	    , O     = {};
	  var fixMethod = function(KEY){
	    var fn = proto[KEY];
	    redefine(proto, KEY,
	      KEY == 'delete' ? function(a){
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'has' ? function has(a){
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'get' ? function get(a){
	        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }
	        : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }
	    );
	  };
	  if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
	    new C().entries().next();
	  }))){
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    redefineAll(C.prototype, methods);
	    meta.NEED = true;
	  } else {
	    var instance             = new C
	      // early implementations not supports chaining
	      , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance
	      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
	      , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })
	      // most early implementations doesn't supports iterables, most modern - not close it correctly
	      , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new
	      // for early implementations -0 and +0 not the same
	      , BUGGY_ZERO = !IS_WEAK && fails(function(){
	        // V8 ~ Chromium 42- fails only with 5+ elements
	        var $instance = new C()
	          , index     = 5;
	        while(index--)$instance[ADDER](index, index);
	        return !$instance.has(-0);
	      });
	    if(!ACCEPT_ITERABLES){ 
	      C = wrapper(function(target, iterable){
	        anInstance(target, C, NAME);
	        var that = inheritIfRequired(new Base, target, C);
	        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	        return that;
	      });
	      C.prototype = proto;
	      proto.constructor = C;
	    }
	    if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }
	    if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);
	    // weak collections should not contains .clear method
	    if(IS_WEAK && proto.clear)delete proto.clear;
	  }
	
	  setToStringTag(C, NAME);
	
	  O[NAME] = C;
	  $export($export.G + $export.W + $export.F * (C != Base), O);
	
	  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);
	
	  return C;
	};

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(213);
	
	// 23.2 Set Objects
	module.exports = __webpack_require__(214)('Set', function(get){
	  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.2.3.1 Set.prototype.add(value)
	  add: function add(value){
	    return strong.def(this, value = value === 0 ? 0 : value, value);
	  }
	}, strong);

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var each         = __webpack_require__(173)(0)
	  , redefine     = __webpack_require__(19)
	  , meta         = __webpack_require__(23)
	  , assign       = __webpack_require__(70)
	  , weak         = __webpack_require__(217)
	  , isObject     = __webpack_require__(14)
	  , getWeak      = meta.getWeak
	  , isExtensible = Object.isExtensible
	  , uncaughtFrozenStore = weak.ufstore
	  , tmp          = {}
	  , InternalMap;
	
	var wrapper = function(get){
	  return function WeakMap(){
	    return get(this, arguments.length > 0 ? arguments[0] : undefined);
	  };
	};
	
	var methods = {
	  // 23.3.3.3 WeakMap.prototype.get(key)
	  get: function get(key){
	    if(isObject(key)){
	      var data = getWeak(key);
	      if(data === true)return uncaughtFrozenStore(this).get(key);
	      return data ? data[this._i] : undefined;
	    }
	  },
	  // 23.3.3.5 WeakMap.prototype.set(key, value)
	  set: function set(key, value){
	    return weak.def(this, key, value);
	  }
	};
	
	// 23.3 WeakMap Objects
	var $WeakMap = module.exports = __webpack_require__(214)('WeakMap', wrapper, methods, weak, true, true);
	
	// IE11 WeakMap frozen keys fix
	if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
	  InternalMap = weak.getConstructor(wrapper);
	  assign(InternalMap.prototype, methods);
	  meta.NEED = true;
	  each(['delete', 'has', 'get', 'set'], function(key){
	    var proto  = $WeakMap.prototype
	      , method = proto[key];
	    redefine(proto, key, function(a, b){
	      // store frozen objects on internal weakmap shim
	      if(isObject(a) && !isExtensible(a)){
	        if(!this._f)this._f = new InternalMap;
	        var result = this._f[key](a, b);
	        return key == 'set' ? this : result;
	      // store all the rest on native weakmap
	      } return method.call(this, a, b);
	    });
	  });
	}

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var redefineAll       = __webpack_require__(211)
	  , getWeak           = __webpack_require__(23).getWeak
	  , anObject          = __webpack_require__(13)
	  , isObject          = __webpack_require__(14)
	  , anInstance        = __webpack_require__(206)
	  , forOf             = __webpack_require__(207)
	  , createArrayMethod = __webpack_require__(173)
	  , $has              = __webpack_require__(6)
	  , arrayFind         = createArrayMethod(5)
	  , arrayFindIndex    = createArrayMethod(6)
	  , id                = 0;
	
	// fallback for uncaught frozen keys
	var uncaughtFrozenStore = function(that){
	  return that._l || (that._l = new UncaughtFrozenStore);
	};
	var UncaughtFrozenStore = function(){
	  this.a = [];
	};
	var findUncaughtFrozen = function(store, key){
	  return arrayFind(store.a, function(it){
	    return it[0] === key;
	  });
	};
	UncaughtFrozenStore.prototype = {
	  get: function(key){
	    var entry = findUncaughtFrozen(this, key);
	    if(entry)return entry[1];
	  },
	  has: function(key){
	    return !!findUncaughtFrozen(this, key);
	  },
	  set: function(key, value){
	    var entry = findUncaughtFrozen(this, key);
	    if(entry)entry[1] = value;
	    else this.a.push([key, value]);
	  },
	  'delete': function(key){
	    var index = arrayFindIndex(this.a, function(it){
	      return it[0] === key;
	    });
	    if(~index)this.a.splice(index, 1);
	    return !!~index;
	  }
	};
	
	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      anInstance(that, C, NAME, '_i');
	      that._i = id++;      // collection id
	      that._l = undefined; // leak store for uncaught frozen objects
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.3.3.2 WeakMap.prototype.delete(key)
	      // 23.4.3.3 WeakSet.prototype.delete(value)
	      'delete': function(key){
	        if(!isObject(key))return false;
	        var data = getWeak(key);
	        if(data === true)return uncaughtFrozenStore(this)['delete'](key);
	        return data && $has(data, this._i) && delete data[this._i];
	      },
	      // 23.3.3.4 WeakMap.prototype.has(key)
	      // 23.4.3.4 WeakSet.prototype.has(value)
	      has: function has(key){
	        if(!isObject(key))return false;
	        var data = getWeak(key);
	        if(data === true)return uncaughtFrozenStore(this).has(key);
	        return data && $has(data, this._i);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    var data = getWeak(anObject(key), true);
	    if(data === true)uncaughtFrozenStore(that).set(key, value);
	    else data[that._i] = value;
	    return that;
	  },
	  ufstore: uncaughtFrozenStore
	};

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var weak = __webpack_require__(217);
	
	// 23.4 WeakSet Objects
	__webpack_require__(214)('WeakSet', function(get){
	  return function WeakSet(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.4.3.1 WeakSet.prototype.add(value)
	  add: function add(value){
	    return weak.def(this, value, true);
	  }
	}, weak, false, true);

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export      = __webpack_require__(9)
	  , $typed       = __webpack_require__(220)
	  , buffer       = __webpack_require__(221)
	  , anObject     = __webpack_require__(13)
	  , toIndex      = __webpack_require__(40)
	  , toLength     = __webpack_require__(38)
	  , isObject     = __webpack_require__(14)
	  , ArrayBuffer  = __webpack_require__(5).ArrayBuffer
	  , speciesConstructor = __webpack_require__(208)
	  , $ArrayBuffer = buffer.ArrayBuffer
	  , $DataView    = buffer.DataView
	  , $isView      = $typed.ABV && ArrayBuffer.isView
	  , $slice       = $ArrayBuffer.prototype.slice
	  , VIEW         = $typed.VIEW
	  , ARRAY_BUFFER = 'ArrayBuffer';
	
	$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {ArrayBuffer: $ArrayBuffer});
	
	$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
	  // 24.1.3.1 ArrayBuffer.isView(arg)
	  isView: function isView(it){
	    return $isView && $isView(it) || isObject(it) && VIEW in it;
	  }
	});
	
	$export($export.P + $export.U + $export.F * __webpack_require__(8)(function(){
	  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
	}), ARRAY_BUFFER, {
	  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
	  slice: function slice(start, end){
	    if($slice !== undefined && end === undefined)return $slice.call(anObject(this), start); // FF fix
	    var len    = anObject(this).byteLength
	      , first  = toIndex(start, len)
	      , final  = toIndex(end === undefined ? len : end, len)
	      , result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first))
	      , viewS  = new $DataView(this)
	      , viewT  = new $DataView(result)
	      , index  = 0;
	    while(first < final){
	      viewT.setUint8(index++, viewS.getUint8(first++));
	    } return result;
	  }
	});
	
	__webpack_require__(193)(ARRAY_BUFFER);

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(5)
	  , hide   = __webpack_require__(11)
	  , uid    = __webpack_require__(20)
	  , TYPED  = uid('typed_array')
	  , VIEW   = uid('view')
	  , ABV    = !!(global.ArrayBuffer && global.DataView)
	  , CONSTR = ABV
	  , i = 0, l = 9, Typed;
	
	var TypedArrayConstructors = (
	  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
	).split(',');
	
	while(i < l){
	  if(Typed = global[TypedArrayConstructors[i++]]){
	    hide(Typed.prototype, TYPED, true);
	    hide(Typed.prototype, VIEW, true);
	  } else CONSTR = false;
	}
	
	module.exports = {
	  ABV:    ABV,
	  CONSTR: CONSTR,
	  TYPED:  TYPED,
	  VIEW:   VIEW
	};

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global         = __webpack_require__(5)
	  , DESCRIPTORS    = __webpack_require__(7)
	  , LIBRARY        = __webpack_require__(29)
	  , $typed         = __webpack_require__(220)
	  , hide           = __webpack_require__(11)
	  , redefineAll    = __webpack_require__(211)
	  , fails          = __webpack_require__(8)
	  , anInstance     = __webpack_require__(206)
	  , toInteger      = __webpack_require__(39)
	  , toLength       = __webpack_require__(38)
	  , gOPN           = __webpack_require__(51).f
	  , dP             = __webpack_require__(12).f
	  , arrayFill      = __webpack_require__(189)
	  , setToStringTag = __webpack_require__(25)
	  , ARRAY_BUFFER   = 'ArrayBuffer'
	  , DATA_VIEW      = 'DataView'
	  , PROTOTYPE      = 'prototype'
	  , WRONG_LENGTH   = 'Wrong length!'
	  , WRONG_INDEX    = 'Wrong index!'
	  , $ArrayBuffer   = global[ARRAY_BUFFER]
	  , $DataView      = global[DATA_VIEW]
	  , Math           = global.Math
	  , RangeError     = global.RangeError
	  , Infinity       = global.Infinity
	  , BaseBuffer     = $ArrayBuffer
	  , abs            = Math.abs
	  , pow            = Math.pow
	  , floor          = Math.floor
	  , log            = Math.log
	  , LN2            = Math.LN2
	  , BUFFER         = 'buffer'
	  , BYTE_LENGTH    = 'byteLength'
	  , BYTE_OFFSET    = 'byteOffset'
	  , $BUFFER        = DESCRIPTORS ? '_b' : BUFFER
	  , $LENGTH        = DESCRIPTORS ? '_l' : BYTE_LENGTH
	  , $OFFSET        = DESCRIPTORS ? '_o' : BYTE_OFFSET;
	
	// IEEE754 conversions based on https://github.com/feross/ieee754
	var packIEEE754 = function(value, mLen, nBytes){
	  var buffer = Array(nBytes)
	    , eLen   = nBytes * 8 - mLen - 1
	    , eMax   = (1 << eLen) - 1
	    , eBias  = eMax >> 1
	    , rt     = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0
	    , i      = 0
	    , s      = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0
	    , e, m, c;
	  value = abs(value)
	  if(value != value || value === Infinity){
	    m = value != value ? 1 : 0;
	    e = eMax;
	  } else {
	    e = floor(log(value) / LN2);
	    if(value * (c = pow(2, -e)) < 1){
	      e--;
	      c *= 2;
	    }
	    if(e + eBias >= 1){
	      value += rt / c;
	    } else {
	      value += rt * pow(2, 1 - eBias);
	    }
	    if(value * c >= 2){
	      e++;
	      c /= 2;
	    }
	    if(e + eBias >= eMax){
	      m = 0;
	      e = eMax;
	    } else if(e + eBias >= 1){
	      m = (value * c - 1) * pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * pow(2, eBias - 1) * pow(2, mLen);
	      e = 0;
	    }
	  }
	  for(; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
	  e = e << mLen | m;
	  eLen += mLen;
	  for(; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
	  buffer[--i] |= s * 128;
	  return buffer;
	};
	var unpackIEEE754 = function(buffer, mLen, nBytes){
	  var eLen  = nBytes * 8 - mLen - 1
	    , eMax  = (1 << eLen) - 1
	    , eBias = eMax >> 1
	    , nBits = eLen - 7
	    , i     = nBytes - 1
	    , s     = buffer[i--]
	    , e     = s & 127
	    , m;
	  s >>= 7;
	  for(; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
	  m = e & (1 << -nBits) - 1;
	  e >>= -nBits;
	  nBits += mLen;
	  for(; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
	  if(e === 0){
	    e = 1 - eBias;
	  } else if(e === eMax){
	    return m ? NaN : s ? -Infinity : Infinity;
	  } else {
	    m = m + pow(2, mLen);
	    e = e - eBias;
	  } return (s ? -1 : 1) * m * pow(2, e - mLen);
	};
	
	var unpackI32 = function(bytes){
	  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
	};
	var packI8 = function(it){
	  return [it & 0xff];
	};
	var packI16 = function(it){
	  return [it & 0xff, it >> 8 & 0xff];
	};
	var packI32 = function(it){
	  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
	};
	var packF64 = function(it){
	  return packIEEE754(it, 52, 8);
	};
	var packF32 = function(it){
	  return packIEEE754(it, 23, 4);
	};
	
	var addGetter = function(C, key, internal){
	  dP(C[PROTOTYPE], key, {get: function(){ return this[internal]; }});
	};
	
	var get = function(view, bytes, index, isLittleEndian){
	  var numIndex = +index
	    , intIndex = toInteger(numIndex);
	  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b
	    , start = intIndex + view[$OFFSET]
	    , pack  = store.slice(start, start + bytes);
	  return isLittleEndian ? pack : pack.reverse();
	};
	var set = function(view, bytes, index, conversion, value, isLittleEndian){
	  var numIndex = +index
	    , intIndex = toInteger(numIndex);
	  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b
	    , start = intIndex + view[$OFFSET]
	    , pack  = conversion(+value);
	  for(var i = 0; i < bytes; i++)store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
	};
	
	var validateArrayBufferArguments = function(that, length){
	  anInstance(that, $ArrayBuffer, ARRAY_BUFFER);
	  var numberLength = +length
	    , byteLength   = toLength(numberLength);
	  if(numberLength != byteLength)throw RangeError(WRONG_LENGTH);
	  return byteLength;
	};
	
	if(!$typed.ABV){
	  $ArrayBuffer = function ArrayBuffer(length){
	    var byteLength = validateArrayBufferArguments(this, length);
	    this._b       = arrayFill.call(Array(byteLength), 0);
	    this[$LENGTH] = byteLength;
	  };
	
	  $DataView = function DataView(buffer, byteOffset, byteLength){
	    anInstance(this, $DataView, DATA_VIEW);
	    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
	    var bufferLength = buffer[$LENGTH]
	      , offset       = toInteger(byteOffset);
	    if(offset < 0 || offset > bufferLength)throw RangeError('Wrong offset!');
	    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
	    if(offset + byteLength > bufferLength)throw RangeError(WRONG_LENGTH);
	    this[$BUFFER] = buffer;
	    this[$OFFSET] = offset;
	    this[$LENGTH] = byteLength;
	  };
	
	  if(DESCRIPTORS){
	    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
	    addGetter($DataView, BUFFER, '_b');
	    addGetter($DataView, BYTE_LENGTH, '_l');
	    addGetter($DataView, BYTE_OFFSET, '_o');
	  }
	
	  redefineAll($DataView[PROTOTYPE], {
	    getInt8: function getInt8(byteOffset){
	      return get(this, 1, byteOffset)[0] << 24 >> 24;
	    },
	    getUint8: function getUint8(byteOffset){
	      return get(this, 1, byteOffset)[0];
	    },
	    getInt16: function getInt16(byteOffset /*, littleEndian */){
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
	    },
	    getUint16: function getUint16(byteOffset /*, littleEndian */){
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return bytes[1] << 8 | bytes[0];
	    },
	    getInt32: function getInt32(byteOffset /*, littleEndian */){
	      return unpackI32(get(this, 4, byteOffset, arguments[1]));
	    },
	    getUint32: function getUint32(byteOffset /*, littleEndian */){
	      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
	    },
	    getFloat32: function getFloat32(byteOffset /*, littleEndian */){
	      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
	    },
	    getFloat64: function getFloat64(byteOffset /*, littleEndian */){
	      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
	    },
	    setInt8: function setInt8(byteOffset, value){
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setUint8: function setUint8(byteOffset, value){
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setInt16: function setInt16(byteOffset, value /*, littleEndian */){
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setUint16: function setUint16(byteOffset, value /*, littleEndian */){
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setInt32: function setInt32(byteOffset, value /*, littleEndian */){
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setUint32: function setUint32(byteOffset, value /*, littleEndian */){
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setFloat32: function setFloat32(byteOffset, value /*, littleEndian */){
	      set(this, 4, byteOffset, packF32, value, arguments[2]);
	    },
	    setFloat64: function setFloat64(byteOffset, value /*, littleEndian */){
	      set(this, 8, byteOffset, packF64, value, arguments[2]);
	    }
	  });
	} else {
	  if(!fails(function(){
	    new $ArrayBuffer;     // eslint-disable-line no-new
	  }) || !fails(function(){
	    new $ArrayBuffer(.5); // eslint-disable-line no-new
	  })){
	    $ArrayBuffer = function ArrayBuffer(length){
	      return new BaseBuffer(validateArrayBufferArguments(this, length));
	    };
	    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
	    for(var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j; ){
	      if(!((key = keys[j++]) in $ArrayBuffer))hide($ArrayBuffer, key, BaseBuffer[key]);
	    };
	    if(!LIBRARY)ArrayBufferProto.constructor = $ArrayBuffer;
	  }
	  // iOS Safari 7.x bug
	  var view = new $DataView(new $ArrayBuffer(2))
	    , $setInt8 = $DataView[PROTOTYPE].setInt8;
	  view.setInt8(0, 2147483648);
	  view.setInt8(1, 2147483649);
	  if(view.getInt8(0) || !view.getInt8(1))redefineAll($DataView[PROTOTYPE], {
	    setInt8: function setInt8(byteOffset, value){
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    },
	    setUint8: function setUint8(byteOffset, value){
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    }
	  }, true);
	}
	setToStringTag($ArrayBuffer, ARRAY_BUFFER);
	setToStringTag($DataView, DATA_VIEW);
	hide($DataView[PROTOTYPE], $typed.VIEW, true);
	exports[ARRAY_BUFFER] = $ArrayBuffer;
	exports[DATA_VIEW] = $DataView;

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(9);
	$export($export.G + $export.W + $export.F * !__webpack_require__(220).ABV, {
	  DataView: __webpack_require__(221).DataView
	});

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(224)('Int8', 1, function(init){
	  return function Int8Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	if(__webpack_require__(7)){
	  var LIBRARY             = __webpack_require__(29)
	    , global              = __webpack_require__(5)
	    , fails               = __webpack_require__(8)
	    , $export             = __webpack_require__(9)
	    , $typed              = __webpack_require__(220)
	    , $buffer             = __webpack_require__(221)
	    , ctx                 = __webpack_require__(21)
	    , anInstance          = __webpack_require__(206)
	    , propertyDesc        = __webpack_require__(18)
	    , hide                = __webpack_require__(11)
	    , redefineAll         = __webpack_require__(211)
	    , toInteger           = __webpack_require__(39)
	    , toLength            = __webpack_require__(38)
	    , toIndex             = __webpack_require__(40)
	    , toPrimitive         = __webpack_require__(17)
	    , has                 = __webpack_require__(6)
	    , same                = __webpack_require__(72)
	    , classof             = __webpack_require__(76)
	    , isObject            = __webpack_require__(14)
	    , toObject            = __webpack_require__(59)
	    , isArrayIter         = __webpack_require__(163)
	    , create              = __webpack_require__(47)
	    , getPrototypeOf      = __webpack_require__(60)
	    , gOPN                = __webpack_require__(51).f
	    , getIterFn           = __webpack_require__(165)
	    , uid                 = __webpack_require__(20)
	    , wks                 = __webpack_require__(26)
	    , createArrayMethod   = __webpack_require__(173)
	    , createArrayIncludes = __webpack_require__(37)
	    , speciesConstructor  = __webpack_require__(208)
	    , ArrayIterators      = __webpack_require__(194)
	    , Iterators           = __webpack_require__(130)
	    , $iterDetect         = __webpack_require__(166)
	    , setSpecies          = __webpack_require__(193)
	    , arrayFill           = __webpack_require__(189)
	    , arrayCopyWithin     = __webpack_require__(186)
	    , $DP                 = __webpack_require__(12)
	    , $GOPD               = __webpack_require__(52)
	    , dP                  = $DP.f
	    , gOPD                = $GOPD.f
	    , RangeError          = global.RangeError
	    , TypeError           = global.TypeError
	    , Uint8Array          = global.Uint8Array
	    , ARRAY_BUFFER        = 'ArrayBuffer'
	    , SHARED_BUFFER       = 'Shared' + ARRAY_BUFFER
	    , BYTES_PER_ELEMENT   = 'BYTES_PER_ELEMENT'
	    , PROTOTYPE           = 'prototype'
	    , ArrayProto          = Array[PROTOTYPE]
	    , $ArrayBuffer        = $buffer.ArrayBuffer
	    , $DataView           = $buffer.DataView
	    , arrayForEach        = createArrayMethod(0)
	    , arrayFilter         = createArrayMethod(2)
	    , arraySome           = createArrayMethod(3)
	    , arrayEvery          = createArrayMethod(4)
	    , arrayFind           = createArrayMethod(5)
	    , arrayFindIndex      = createArrayMethod(6)
	    , arrayIncludes       = createArrayIncludes(true)
	    , arrayIndexOf        = createArrayIncludes(false)
	    , arrayValues         = ArrayIterators.values
	    , arrayKeys           = ArrayIterators.keys
	    , arrayEntries        = ArrayIterators.entries
	    , arrayLastIndexOf    = ArrayProto.lastIndexOf
	    , arrayReduce         = ArrayProto.reduce
	    , arrayReduceRight    = ArrayProto.reduceRight
	    , arrayJoin           = ArrayProto.join
	    , arraySort           = ArrayProto.sort
	    , arraySlice          = ArrayProto.slice
	    , arrayToString       = ArrayProto.toString
	    , arrayToLocaleString = ArrayProto.toLocaleString
	    , ITERATOR            = wks('iterator')
	    , TAG                 = wks('toStringTag')
	    , TYPED_CONSTRUCTOR   = uid('typed_constructor')
	    , DEF_CONSTRUCTOR     = uid('def_constructor')
	    , ALL_CONSTRUCTORS    = $typed.CONSTR
	    , TYPED_ARRAY         = $typed.TYPED
	    , VIEW                = $typed.VIEW
	    , WRONG_LENGTH        = 'Wrong length!';
	
	  var $map = createArrayMethod(1, function(O, length){
	    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
	  });
	
	  var LITTLE_ENDIAN = fails(function(){
	    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
	  });
	
	  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function(){
	    new Uint8Array(1).set({});
	  });
	
	  var strictToLength = function(it, SAME){
	    if(it === undefined)throw TypeError(WRONG_LENGTH);
	    var number = +it
	      , length = toLength(it);
	    if(SAME && !same(number, length))throw RangeError(WRONG_LENGTH);
	    return length;
	  };
	
	  var toOffset = function(it, BYTES){
	    var offset = toInteger(it);
	    if(offset < 0 || offset % BYTES)throw RangeError('Wrong offset!');
	    return offset;
	  };
	
	  var validate = function(it){
	    if(isObject(it) && TYPED_ARRAY in it)return it;
	    throw TypeError(it + ' is not a typed array!');
	  };
	
	  var allocate = function(C, length){
	    if(!(isObject(C) && TYPED_CONSTRUCTOR in C)){
	      throw TypeError('It is not a typed array constructor!');
	    } return new C(length);
	  };
	
	  var speciesFromList = function(O, list){
	    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
	  };
	
	  var fromList = function(C, list){
	    var index  = 0
	      , length = list.length
	      , result = allocate(C, length);
	    while(length > index)result[index] = list[index++];
	    return result;
	  };
	
	  var addGetter = function(it, key, internal){
	    dP(it, key, {get: function(){ return this._d[internal]; }});
	  };
	
	  var $from = function from(source /*, mapfn, thisArg */){
	    var O       = toObject(source)
	      , aLen    = arguments.length
	      , mapfn   = aLen > 1 ? arguments[1] : undefined
	      , mapping = mapfn !== undefined
	      , iterFn  = getIterFn(O)
	      , i, length, values, result, step, iterator;
	    if(iterFn != undefined && !isArrayIter(iterFn)){
	      for(iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++){
	        values.push(step.value);
	      } O = values;
	    }
	    if(mapping && aLen > 2)mapfn = ctx(mapfn, arguments[2], 2);
	    for(i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++){
	      result[i] = mapping ? mapfn(O[i], i) : O[i];
	    }
	    return result;
	  };
	
	  var $of = function of(/*...items*/){
	    var index  = 0
	      , length = arguments.length
	      , result = allocate(this, length);
	    while(length > index)result[index] = arguments[index++];
	    return result;
	  };
	
	  // iOS Safari 6.x fails here
	  var TO_LOCALE_BUG = !!Uint8Array && fails(function(){ arrayToLocaleString.call(new Uint8Array(1)); });
	
	  var $toLocaleString = function toLocaleString(){
	    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
	  };
	
	  var proto = {
	    copyWithin: function copyWithin(target, start /*, end */){
	      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    every: function every(callbackfn /*, thisArg */){
	      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    fill: function fill(value /*, start, end */){ // eslint-disable-line no-unused-vars
	      return arrayFill.apply(validate(this), arguments);
	    },
	    filter: function filter(callbackfn /*, thisArg */){
	      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
	        arguments.length > 1 ? arguments[1] : undefined));
	    },
	    find: function find(predicate /*, thisArg */){
	      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    findIndex: function findIndex(predicate /*, thisArg */){
	      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    forEach: function forEach(callbackfn /*, thisArg */){
	      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    indexOf: function indexOf(searchElement /*, fromIndex */){
	      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    includes: function includes(searchElement /*, fromIndex */){
	      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    join: function join(separator){ // eslint-disable-line no-unused-vars
	      return arrayJoin.apply(validate(this), arguments);
	    },
	    lastIndexOf: function lastIndexOf(searchElement /*, fromIndex */){ // eslint-disable-line no-unused-vars
	      return arrayLastIndexOf.apply(validate(this), arguments);
	    },
	    map: function map(mapfn /*, thisArg */){
	      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    reduce: function reduce(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
	      return arrayReduce.apply(validate(this), arguments);
	    },
	    reduceRight: function reduceRight(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
	      return arrayReduceRight.apply(validate(this), arguments);
	    },
	    reverse: function reverse(){
	      var that   = this
	        , length = validate(that).length
	        , middle = Math.floor(length / 2)
	        , index  = 0
	        , value;
	      while(index < middle){
	        value         = that[index];
	        that[index++] = that[--length];
	        that[length]  = value;
	      } return that;
	    },
	    some: function some(callbackfn /*, thisArg */){
	      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    sort: function sort(comparefn){
	      return arraySort.call(validate(this), comparefn);
	    },
	    subarray: function subarray(begin, end){
	      var O      = validate(this)
	        , length = O.length
	        , $begin = toIndex(begin, length);
	      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
	        O.buffer,
	        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
	        toLength((end === undefined ? length : toIndex(end, length)) - $begin)
	      );
	    }
	  };
	
	  var $slice = function slice(start, end){
	    return speciesFromList(this, arraySlice.call(validate(this), start, end));
	  };
	
	  var $set = function set(arrayLike /*, offset */){
	    validate(this);
	    var offset = toOffset(arguments[1], 1)
	      , length = this.length
	      , src    = toObject(arrayLike)
	      , len    = toLength(src.length)
	      , index  = 0;
	    if(len + offset > length)throw RangeError(WRONG_LENGTH);
	    while(index < len)this[offset + index] = src[index++];
	  };
	
	  var $iterators = {
	    entries: function entries(){
	      return arrayEntries.call(validate(this));
	    },
	    keys: function keys(){
	      return arrayKeys.call(validate(this));
	    },
	    values: function values(){
	      return arrayValues.call(validate(this));
	    }
	  };
	
	  var isTAIndex = function(target, key){
	    return isObject(target)
	      && target[TYPED_ARRAY]
	      && typeof key != 'symbol'
	      && key in target
	      && String(+key) == String(key);
	  };
	  var $getDesc = function getOwnPropertyDescriptor(target, key){
	    return isTAIndex(target, key = toPrimitive(key, true))
	      ? propertyDesc(2, target[key])
	      : gOPD(target, key);
	  };
	  var $setDesc = function defineProperty(target, key, desc){
	    if(isTAIndex(target, key = toPrimitive(key, true))
	      && isObject(desc)
	      && has(desc, 'value')
	      && !has(desc, 'get')
	      && !has(desc, 'set')
	      // TODO: add validation descriptor w/o calling accessors
	      && !desc.configurable
	      && (!has(desc, 'writable') || desc.writable)
	      && (!has(desc, 'enumerable') || desc.enumerable)
	    ){
	      target[key] = desc.value;
	      return target;
	    } else return dP(target, key, desc);
	  };
	
	  if(!ALL_CONSTRUCTORS){
	    $GOPD.f = $getDesc;
	    $DP.f   = $setDesc;
	  }
	
	  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
	    getOwnPropertyDescriptor: $getDesc,
	    defineProperty:           $setDesc
	  });
	
	  if(fails(function(){ arrayToString.call({}); })){
	    arrayToString = arrayToLocaleString = function toString(){
	      return arrayJoin.call(this);
	    }
	  }
	
	  var $TypedArrayPrototype$ = redefineAll({}, proto);
	  redefineAll($TypedArrayPrototype$, $iterators);
	  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
	  redefineAll($TypedArrayPrototype$, {
	    slice:          $slice,
	    set:            $set,
	    constructor:    function(){ /* noop */ },
	    toString:       arrayToString,
	    toLocaleString: $toLocaleString
	  });
	  addGetter($TypedArrayPrototype$, 'buffer', 'b');
	  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
	  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
	  addGetter($TypedArrayPrototype$, 'length', 'e');
	  dP($TypedArrayPrototype$, TAG, {
	    get: function(){ return this[TYPED_ARRAY]; }
	  });
	
	  module.exports = function(KEY, BYTES, wrapper, CLAMPED){
	    CLAMPED = !!CLAMPED;
	    var NAME       = KEY + (CLAMPED ? 'Clamped' : '') + 'Array'
	      , ISNT_UINT8 = NAME != 'Uint8Array'
	      , GETTER     = 'get' + KEY
	      , SETTER     = 'set' + KEY
	      , TypedArray = global[NAME]
	      , Base       = TypedArray || {}
	      , TAC        = TypedArray && getPrototypeOf(TypedArray)
	      , FORCED     = !TypedArray || !$typed.ABV
	      , O          = {}
	      , TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
	    var getter = function(that, index){
	      var data = that._d;
	      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
	    };
	    var setter = function(that, index, value){
	      var data = that._d;
	      if(CLAMPED)value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
	      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
	    };
	    var addElement = function(that, index){
	      dP(that, index, {
	        get: function(){
	          return getter(this, index);
	        },
	        set: function(value){
	          return setter(this, index, value);
	        },
	        enumerable: true
	      });
	    };
	    if(FORCED){
	      TypedArray = wrapper(function(that, data, $offset, $length){
	        anInstance(that, TypedArray, NAME, '_d');
	        var index  = 0
	          , offset = 0
	          , buffer, byteLength, length, klass;
	        if(!isObject(data)){
	          length     = strictToLength(data, true)
	          byteLength = length * BYTES;
	          buffer     = new $ArrayBuffer(byteLength);
	        } else if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
	          buffer = data;
	          offset = toOffset($offset, BYTES);
	          var $len = data.byteLength;
	          if($length === undefined){
	            if($len % BYTES)throw RangeError(WRONG_LENGTH);
	            byteLength = $len - offset;
	            if(byteLength < 0)throw RangeError(WRONG_LENGTH);
	          } else {
	            byteLength = toLength($length) * BYTES;
	            if(byteLength + offset > $len)throw RangeError(WRONG_LENGTH);
	          }
	          length = byteLength / BYTES;
	        } else if(TYPED_ARRAY in data){
	          return fromList(TypedArray, data);
	        } else {
	          return $from.call(TypedArray, data);
	        }
	        hide(that, '_d', {
	          b: buffer,
	          o: offset,
	          l: byteLength,
	          e: length,
	          v: new $DataView(buffer)
	        });
	        while(index < length)addElement(that, index++);
	      });
	      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
	      hide(TypedArrayPrototype, 'constructor', TypedArray);
	    } else if(!$iterDetect(function(iter){
	      // V8 works with iterators, but fails in many other cases
	      // https://code.google.com/p/v8/issues/detail?id=4552
	      new TypedArray(null); // eslint-disable-line no-new
	      new TypedArray(iter); // eslint-disable-line no-new
	    }, true)){
	      TypedArray = wrapper(function(that, data, $offset, $length){
	        anInstance(that, TypedArray, NAME);
	        var klass;
	        // `ws` module bug, temporarily remove validation length for Uint8Array
	        // https://github.com/websockets/ws/pull/645
	        if(!isObject(data))return new Base(strictToLength(data, ISNT_UINT8));
	        if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
	          return $length !== undefined
	            ? new Base(data, toOffset($offset, BYTES), $length)
	            : $offset !== undefined
	              ? new Base(data, toOffset($offset, BYTES))
	              : new Base(data);
	        }
	        if(TYPED_ARRAY in data)return fromList(TypedArray, data);
	        return $from.call(TypedArray, data);
	      });
	      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function(key){
	        if(!(key in TypedArray))hide(TypedArray, key, Base[key]);
	      });
	      TypedArray[PROTOTYPE] = TypedArrayPrototype;
	      if(!LIBRARY)TypedArrayPrototype.constructor = TypedArray;
	    }
	    var $nativeIterator   = TypedArrayPrototype[ITERATOR]
	      , CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined)
	      , $iterator         = $iterators.values;
	    hide(TypedArray, TYPED_CONSTRUCTOR, true);
	    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
	    hide(TypedArrayPrototype, VIEW, true);
	    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);
	
	    if(CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)){
	      dP(TypedArrayPrototype, TAG, {
	        get: function(){ return NAME; }
	      });
	    }
	
	    O[NAME] = TypedArray;
	
	    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);
	
	    $export($export.S, NAME, {
	      BYTES_PER_ELEMENT: BYTES,
	      from: $from,
	      of: $of
	    });
	
	    if(!(BYTES_PER_ELEMENT in TypedArrayPrototype))hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);
	
	    $export($export.P, NAME, proto);
	
	    setSpecies(NAME);
	
	    $export($export.P + $export.F * FORCED_SET, NAME, {set: $set});
	
	    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);
	
	    $export($export.P + $export.F * (TypedArrayPrototype.toString != arrayToString), NAME, {toString: arrayToString});
	
	    $export($export.P + $export.F * fails(function(){
	      new TypedArray(1).slice();
	    }), NAME, {slice: $slice});
	
	    $export($export.P + $export.F * (fails(function(){
	      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString()
	    }) || !fails(function(){
	      TypedArrayPrototype.toLocaleString.call([1, 2]);
	    })), NAME, {toLocaleString: $toLocaleString});
	
	    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
	    if(!LIBRARY && !CORRECT_ITER_NAME)hide(TypedArrayPrototype, ITERATOR, $iterator);
	  };
	} else module.exports = function(){ /* empty */ };

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(224)('Uint8', 1, function(init){
	  return function Uint8Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(224)('Uint8', 1, function(init){
	  return function Uint8ClampedArray(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	}, true);

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(224)('Int16', 2, function(init){
	  return function Int16Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(224)('Uint16', 2, function(init){
	  return function Uint16Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(224)('Int32', 4, function(init){
	  return function Int32Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(224)('Uint32', 4, function(init){
	  return function Uint32Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(224)('Float32', 4, function(init){
	  return function Float32Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(224)('Float64', 8, function(init){
	  return function Float64Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
	var $export   = __webpack_require__(9)
	  , aFunction = __webpack_require__(22)
	  , anObject  = __webpack_require__(13)
	  , rApply    = (__webpack_require__(5).Reflect || {}).apply
	  , fApply    = Function.apply;
	// MS Edge argumentsList argument is optional
	$export($export.S + $export.F * !__webpack_require__(8)(function(){
	  rApply(function(){});
	}), 'Reflect', {
	  apply: function apply(target, thisArgument, argumentsList){
	    var T = aFunction(target)
	      , L = anObject(argumentsList);
	    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
	  }
	});

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
	var $export    = __webpack_require__(9)
	  , create     = __webpack_require__(47)
	  , aFunction  = __webpack_require__(22)
	  , anObject   = __webpack_require__(13)
	  , isObject   = __webpack_require__(14)
	  , fails      = __webpack_require__(8)
	  , bind       = __webpack_require__(78)
	  , rConstruct = (__webpack_require__(5).Reflect || {}).construct;
	
	// MS Edge supports only 2 arguments and argumentsList argument is optional
	// FF Nightly sets third argument as `new.target`, but does not create `this` from it
	var NEW_TARGET_BUG = fails(function(){
	  function F(){}
	  return !(rConstruct(function(){}, [], F) instanceof F);
	});
	var ARGS_BUG = !fails(function(){
	  rConstruct(function(){});
	});
	
	$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
	  construct: function construct(Target, args /*, newTarget*/){
	    aFunction(Target);
	    anObject(args);
	    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
	    if(ARGS_BUG && !NEW_TARGET_BUG)return rConstruct(Target, args, newTarget);
	    if(Target == newTarget){
	      // w/o altered newTarget, optimization for 0-4 arguments
	      switch(args.length){
	        case 0: return new Target;
	        case 1: return new Target(args[0]);
	        case 2: return new Target(args[0], args[1]);
	        case 3: return new Target(args[0], args[1], args[2]);
	        case 4: return new Target(args[0], args[1], args[2], args[3]);
	      }
	      // w/o altered newTarget, lot of arguments case
	      var $args = [null];
	      $args.push.apply($args, args);
	      return new (bind.apply(Target, $args));
	    }
	    // with altered newTarget, not support built-in constructors
	    var proto    = newTarget.prototype
	      , instance = create(isObject(proto) ? proto : Object.prototype)
	      , result   = Function.apply.call(Target, instance, args);
	    return isObject(result) ? result : instance;
	  }
	});

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
	var dP          = __webpack_require__(12)
	  , $export     = __webpack_require__(9)
	  , anObject    = __webpack_require__(13)
	  , toPrimitive = __webpack_require__(17);
	
	// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
	$export($export.S + $export.F * __webpack_require__(8)(function(){
	  Reflect.defineProperty(dP.f({}, 1, {value: 1}), 1, {value: 2});
	}), 'Reflect', {
	  defineProperty: function defineProperty(target, propertyKey, attributes){
	    anObject(target);
	    propertyKey = toPrimitive(propertyKey, true);
	    anObject(attributes);
	    try {
	      dP.f(target, propertyKey, attributes);
	      return true;
	    } catch(e){
	      return false;
	    }
	  }
	});

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.4 Reflect.deleteProperty(target, propertyKey)
	var $export  = __webpack_require__(9)
	  , gOPD     = __webpack_require__(52).f
	  , anObject = __webpack_require__(13);
	
	$export($export.S, 'Reflect', {
	  deleteProperty: function deleteProperty(target, propertyKey){
	    var desc = gOPD(anObject(target), propertyKey);
	    return desc && !desc.configurable ? false : delete target[propertyKey];
	  }
	});

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 26.1.5 Reflect.enumerate(target)
	var $export  = __webpack_require__(9)
	  , anObject = __webpack_require__(13);
	var Enumerate = function(iterated){
	  this._t = anObject(iterated); // target
	  this._i = 0;                  // next index
	  var keys = this._k = []       // keys
	    , key;
	  for(key in iterated)keys.push(key);
	};
	__webpack_require__(131)(Enumerate, 'Object', function(){
	  var that = this
	    , keys = that._k
	    , key;
	  do {
	    if(that._i >= keys.length)return {value: undefined, done: true};
	  } while(!((key = keys[that._i++]) in that._t));
	  return {value: key, done: false};
	});
	
	$export($export.S, 'Reflect', {
	  enumerate: function enumerate(target){
	    return new Enumerate(target);
	  }
	});

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.6 Reflect.get(target, propertyKey [, receiver])
	var gOPD           = __webpack_require__(52)
	  , getPrototypeOf = __webpack_require__(60)
	  , has            = __webpack_require__(6)
	  , $export        = __webpack_require__(9)
	  , isObject       = __webpack_require__(14)
	  , anObject       = __webpack_require__(13);
	
	function get(target, propertyKey/*, receiver*/){
	  var receiver = arguments.length < 3 ? target : arguments[2]
	    , desc, proto;
	  if(anObject(target) === receiver)return target[propertyKey];
	  if(desc = gOPD.f(target, propertyKey))return has(desc, 'value')
	    ? desc.value
	    : desc.get !== undefined
	      ? desc.get.call(receiver)
	      : undefined;
	  if(isObject(proto = getPrototypeOf(target)))return get(proto, propertyKey, receiver);
	}
	
	$export($export.S, 'Reflect', {get: get});

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
	var gOPD     = __webpack_require__(52)
	  , $export  = __webpack_require__(9)
	  , anObject = __webpack_require__(13);
	
	$export($export.S, 'Reflect', {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){
	    return gOPD.f(anObject(target), propertyKey);
	  }
	});

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.8 Reflect.getPrototypeOf(target)
	var $export  = __webpack_require__(9)
	  , getProto = __webpack_require__(60)
	  , anObject = __webpack_require__(13);
	
	$export($export.S, 'Reflect', {
	  getPrototypeOf: function getPrototypeOf(target){
	    return getProto(anObject(target));
	  }
	});

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.9 Reflect.has(target, propertyKey)
	var $export = __webpack_require__(9);
	
	$export($export.S, 'Reflect', {
	  has: function has(target, propertyKey){
	    return propertyKey in target;
	  }
	});

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.10 Reflect.isExtensible(target)
	var $export       = __webpack_require__(9)
	  , anObject      = __webpack_require__(13)
	  , $isExtensible = Object.isExtensible;
	
	$export($export.S, 'Reflect', {
	  isExtensible: function isExtensible(target){
	    anObject(target);
	    return $isExtensible ? $isExtensible(target) : true;
	  }
	});

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.11 Reflect.ownKeys(target)
	var $export = __webpack_require__(9);
	
	$export($export.S, 'Reflect', {ownKeys: __webpack_require__(244)});

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	// all object keys, includes non-enumerable and symbols
	var gOPN     = __webpack_require__(51)
	  , gOPS     = __webpack_require__(44)
	  , anObject = __webpack_require__(13)
	  , Reflect  = __webpack_require__(5).Reflect;
	module.exports = Reflect && Reflect.ownKeys || function ownKeys(it){
	  var keys       = gOPN.f(anObject(it))
	    , getSymbols = gOPS.f;
	  return getSymbols ? keys.concat(getSymbols(it)) : keys;
	};

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.12 Reflect.preventExtensions(target)
	var $export            = __webpack_require__(9)
	  , anObject           = __webpack_require__(13)
	  , $preventExtensions = Object.preventExtensions;
	
	$export($export.S, 'Reflect', {
	  preventExtensions: function preventExtensions(target){
	    anObject(target);
	    try {
	      if($preventExtensions)$preventExtensions(target);
	      return true;
	    } catch(e){
	      return false;
	    }
	  }
	});

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
	var dP             = __webpack_require__(12)
	  , gOPD           = __webpack_require__(52)
	  , getPrototypeOf = __webpack_require__(60)
	  , has            = __webpack_require__(6)
	  , $export        = __webpack_require__(9)
	  , createDesc     = __webpack_require__(18)
	  , anObject       = __webpack_require__(13)
	  , isObject       = __webpack_require__(14);
	
	function set(target, propertyKey, V/*, receiver*/){
	  var receiver = arguments.length < 4 ? target : arguments[3]
	    , ownDesc  = gOPD.f(anObject(target), propertyKey)
	    , existingDescriptor, proto;
	  if(!ownDesc){
	    if(isObject(proto = getPrototypeOf(target))){
	      return set(proto, propertyKey, V, receiver);
	    }
	    ownDesc = createDesc(0);
	  }
	  if(has(ownDesc, 'value')){
	    if(ownDesc.writable === false || !isObject(receiver))return false;
	    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
	    existingDescriptor.value = V;
	    dP.f(receiver, propertyKey, existingDescriptor);
	    return true;
	  }
	  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
	}
	
	$export($export.S, 'Reflect', {set: set});

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.14 Reflect.setPrototypeOf(target, proto)
	var $export  = __webpack_require__(9)
	  , setProto = __webpack_require__(74);
	
	if(setProto)$export($export.S, 'Reflect', {
	  setPrototypeOf: function setPrototypeOf(target, proto){
	    setProto.check(target, proto);
	    try {
	      setProto.set(target, proto);
	      return true;
	    } catch(e){
	      return false;
	    }
	  }
	});

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/Array.prototype.includes
	var $export   = __webpack_require__(9)
	  , $includes = __webpack_require__(37)(true);
	
	$export($export.P, 'Array', {
	  includes: function includes(el /*, fromIndex = 0 */){
	    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	
	__webpack_require__(187)('includes');

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/mathiasbynens/String.prototype.at
	var $export = __webpack_require__(9)
	  , $at     = __webpack_require__(128)(true);
	
	$export($export.P, 'String', {
	  at: function at(pos){
	    return $at(this, pos);
	  }
	});

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/proposal-string-pad-start-end
	var $export = __webpack_require__(9)
	  , $pad    = __webpack_require__(251);
	
	$export($export.P, 'String', {
	  padStart: function padStart(maxLength /*, fillString = ' ' */){
	    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
	  }
	});

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-string-pad-start-end
	var toLength = __webpack_require__(38)
	  , repeat   = __webpack_require__(92)
	  , defined  = __webpack_require__(36);
	
	module.exports = function(that, maxLength, fillString, left){
	  var S            = String(defined(that))
	    , stringLength = S.length
	    , fillStr      = fillString === undefined ? ' ' : String(fillString)
	    , intMaxLength = toLength(maxLength);
	  if(intMaxLength <= stringLength || fillStr == '')return S;
	  var fillLen = intMaxLength - stringLength
	    , stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
	  if(stringFiller.length > fillLen)stringFiller = stringFiller.slice(0, fillLen);
	  return left ? stringFiller + S : S + stringFiller;
	};


/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/proposal-string-pad-start-end
	var $export = __webpack_require__(9)
	  , $pad    = __webpack_require__(251);
	
	$export($export.P, 'String', {
	  padEnd: function padEnd(maxLength /*, fillString = ' ' */){
	    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
	  }
	});

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
	__webpack_require__(84)('trimLeft', function($trim){
	  return function trimLeft(){
	    return $trim(this, 1);
	  };
	}, 'trimStart');

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
	__webpack_require__(84)('trimRight', function($trim){
	  return function trimRight(){
	    return $trim(this, 2);
	  };
	}, 'trimEnd');

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/String.prototype.matchAll/
	var $export     = __webpack_require__(9)
	  , defined     = __webpack_require__(36)
	  , toLength    = __webpack_require__(38)
	  , isRegExp    = __webpack_require__(135)
	  , getFlags    = __webpack_require__(197)
	  , RegExpProto = RegExp.prototype;
	
	var $RegExpStringIterator = function(regexp, string){
	  this._r = regexp;
	  this._s = string;
	};
	
	__webpack_require__(131)($RegExpStringIterator, 'RegExp String', function next(){
	  var match = this._r.exec(this._s);
	  return {value: match, done: match === null};
	});
	
	$export($export.P, 'String', {
	  matchAll: function matchAll(regexp){
	    defined(this);
	    if(!isRegExp(regexp))throw TypeError(regexp + ' is not a regexp!');
	    var S     = String(this)
	      , flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp)
	      , rx    = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
	    rx.lastIndex = toLength(regexp.lastIndex);
	    return new $RegExpStringIterator(rx, S);
	  }
	});

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(28)('asyncIterator');

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(28)('observable');

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-object-getownpropertydescriptors
	var $export        = __webpack_require__(9)
	  , ownKeys        = __webpack_require__(244)
	  , toIObject      = __webpack_require__(33)
	  , gOPD           = __webpack_require__(52)
	  , createProperty = __webpack_require__(164);
	
	$export($export.S, 'Object', {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){
	    var O       = toIObject(object)
	      , getDesc = gOPD.f
	      , keys    = ownKeys(O)
	      , result  = {}
	      , i       = 0
	      , key;
	    while(keys.length > i)createProperty(result, key = keys[i++], getDesc(O, key));
	    return result;
	  }
	});

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-object-values-entries
	var $export = __webpack_require__(9)
	  , $values = __webpack_require__(260)(false);
	
	$export($export.S, 'Object', {
	  values: function values(it){
	    return $values(it);
	  }
	});

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(31)
	  , toIObject = __webpack_require__(33)
	  , isEnum    = __webpack_require__(45).f;
	module.exports = function(isEntries){
	  return function(it){
	    var O      = toIObject(it)
	      , keys   = getKeys(O)
	      , length = keys.length
	      , i      = 0
	      , result = []
	      , key;
	    while(length > i)if(isEnum.call(O, key = keys[i++])){
	      result.push(isEntries ? [key, O[key]] : O[key]);
	    } return result;
	  };
	};

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-object-values-entries
	var $export  = __webpack_require__(9)
	  , $entries = __webpack_require__(260)(true);
	
	$export($export.S, 'Object', {
	  entries: function entries(it){
	    return $entries(it);
	  }
	});

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export         = __webpack_require__(9)
	  , toObject        = __webpack_require__(59)
	  , aFunction       = __webpack_require__(22)
	  , $defineProperty = __webpack_require__(12);
	
	// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
	__webpack_require__(7) && $export($export.P + __webpack_require__(263), 'Object', {
	  __defineGetter__: function __defineGetter__(P, getter){
	    $defineProperty.f(toObject(this), P, {get: aFunction(getter), enumerable: true, configurable: true});
	  }
	});

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	// Forced replacement prototype accessors methods
	module.exports = __webpack_require__(29)|| !__webpack_require__(8)(function(){
	  var K = Math.random();
	  // In FF throws only define methods
	  __defineSetter__.call(null, K, function(){ /* empty */});
	  delete __webpack_require__(5)[K];
	});

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export         = __webpack_require__(9)
	  , toObject        = __webpack_require__(59)
	  , aFunction       = __webpack_require__(22)
	  , $defineProperty = __webpack_require__(12);
	
	// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
	__webpack_require__(7) && $export($export.P + __webpack_require__(263), 'Object', {
	  __defineSetter__: function __defineSetter__(P, setter){
	    $defineProperty.f(toObject(this), P, {set: aFunction(setter), enumerable: true, configurable: true});
	  }
	});

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export                  = __webpack_require__(9)
	  , toObject                 = __webpack_require__(59)
	  , toPrimitive              = __webpack_require__(17)
	  , getPrototypeOf           = __webpack_require__(60)
	  , getOwnPropertyDescriptor = __webpack_require__(52).f;
	
	// B.2.2.4 Object.prototype.__lookupGetter__(P)
	__webpack_require__(7) && $export($export.P + __webpack_require__(263), 'Object', {
	  __lookupGetter__: function __lookupGetter__(P){
	    var O = toObject(this)
	      , K = toPrimitive(P, true)
	      , D;
	    do {
	      if(D = getOwnPropertyDescriptor(O, K))return D.get;
	    } while(O = getPrototypeOf(O));
	  }
	});

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export                  = __webpack_require__(9)
	  , toObject                 = __webpack_require__(59)
	  , toPrimitive              = __webpack_require__(17)
	  , getPrototypeOf           = __webpack_require__(60)
	  , getOwnPropertyDescriptor = __webpack_require__(52).f;
	
	// B.2.2.5 Object.prototype.__lookupSetter__(P)
	__webpack_require__(7) && $export($export.P + __webpack_require__(263), 'Object', {
	  __lookupSetter__: function __lookupSetter__(P){
	    var O = toObject(this)
	      , K = toPrimitive(P, true)
	      , D;
	    do {
	      if(D = getOwnPropertyDescriptor(O, K))return D.set;
	    } while(O = getPrototypeOf(O));
	  }
	});

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export  = __webpack_require__(9);
	
	$export($export.P + $export.R, 'Map', {toJSON: __webpack_require__(268)('Map')});

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var classof = __webpack_require__(76)
	  , from    = __webpack_require__(269);
	module.exports = function(NAME){
	  return function toJSON(){
	    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
	    return from(this);
	  };
	};

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	var forOf = __webpack_require__(207);
	
	module.exports = function(iter, ITERATOR){
	  var result = [];
	  forOf(iter, false, result.push, result, ITERATOR);
	  return result;
	};


/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export  = __webpack_require__(9);
	
	$export($export.P + $export.R, 'Set', {toJSON: __webpack_require__(268)('Set')});

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/ljharb/proposal-global
	var $export = __webpack_require__(9);
	
	$export($export.S, 'System', {global: __webpack_require__(5)});

/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/ljharb/proposal-is-error
	var $export = __webpack_require__(9)
	  , cof     = __webpack_require__(35);
	
	$export($export.S, 'Error', {
	  isError: function isError(it){
	    return cof(it) === 'Error';
	  }
	});

/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(9);
	
	$export($export.S, 'Math', {
	  iaddh: function iaddh(x0, x1, y0, y1){
	    var $x0 = x0 >>> 0
	      , $x1 = x1 >>> 0
	      , $y0 = y0 >>> 0;
	    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
	  }
	});

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(9);
	
	$export($export.S, 'Math', {
	  isubh: function isubh(x0, x1, y0, y1){
	    var $x0 = x0 >>> 0
	      , $x1 = x1 >>> 0
	      , $y0 = y0 >>> 0;
	    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
	  }
	});

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(9);
	
	$export($export.S, 'Math', {
	  imulh: function imulh(u, v){
	    var UINT16 = 0xffff
	      , $u = +u
	      , $v = +v
	      , u0 = $u & UINT16
	      , v0 = $v & UINT16
	      , u1 = $u >> 16
	      , v1 = $v >> 16
	      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
	    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
	  }
	});

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(9);
	
	$export($export.S, 'Math', {
	  umulh: function umulh(u, v){
	    var UINT16 = 0xffff
	      , $u = +u
	      , $v = +v
	      , u0 = $u & UINT16
	      , v0 = $v & UINT16
	      , u1 = $u >>> 16
	      , v1 = $v >>> 16
	      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
	    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
	  }
	});

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	var metadata                  = __webpack_require__(278)
	  , anObject                  = __webpack_require__(13)
	  , toMetaKey                 = metadata.key
	  , ordinaryDefineOwnMetadata = metadata.set;
	
	metadata.exp({defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey){
	  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
	}});

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	var Map     = __webpack_require__(212)
	  , $export = __webpack_require__(9)
	  , shared  = __webpack_require__(24)('metadata')
	  , store   = shared.store || (shared.store = new (__webpack_require__(216)));
	
	var getOrCreateMetadataMap = function(target, targetKey, create){
	  var targetMetadata = store.get(target);
	  if(!targetMetadata){
	    if(!create)return undefined;
	    store.set(target, targetMetadata = new Map);
	  }
	  var keyMetadata = targetMetadata.get(targetKey);
	  if(!keyMetadata){
	    if(!create)return undefined;
	    targetMetadata.set(targetKey, keyMetadata = new Map);
	  } return keyMetadata;
	};
	var ordinaryHasOwnMetadata = function(MetadataKey, O, P){
	  var metadataMap = getOrCreateMetadataMap(O, P, false);
	  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
	};
	var ordinaryGetOwnMetadata = function(MetadataKey, O, P){
	  var metadataMap = getOrCreateMetadataMap(O, P, false);
	  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
	};
	var ordinaryDefineOwnMetadata = function(MetadataKey, MetadataValue, O, P){
	  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
	};
	var ordinaryOwnMetadataKeys = function(target, targetKey){
	  var metadataMap = getOrCreateMetadataMap(target, targetKey, false)
	    , keys        = [];
	  if(metadataMap)metadataMap.forEach(function(_, key){ keys.push(key); });
	  return keys;
	};
	var toMetaKey = function(it){
	  return it === undefined || typeof it == 'symbol' ? it : String(it);
	};
	var exp = function(O){
	  $export($export.S, 'Reflect', O);
	};
	
	module.exports = {
	  store: store,
	  map: getOrCreateMetadataMap,
	  has: ordinaryHasOwnMetadata,
	  get: ordinaryGetOwnMetadata,
	  set: ordinaryDefineOwnMetadata,
	  keys: ordinaryOwnMetadataKeys,
	  key: toMetaKey,
	  exp: exp
	};

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(278)
	  , anObject               = __webpack_require__(13)
	  , toMetaKey              = metadata.key
	  , getOrCreateMetadataMap = metadata.map
	  , store                  = metadata.store;
	
	metadata.exp({deleteMetadata: function deleteMetadata(metadataKey, target /*, targetKey */){
	  var targetKey   = arguments.length < 3 ? undefined : toMetaKey(arguments[2])
	    , metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
	  if(metadataMap === undefined || !metadataMap['delete'](metadataKey))return false;
	  if(metadataMap.size)return true;
	  var targetMetadata = store.get(target);
	  targetMetadata['delete'](targetKey);
	  return !!targetMetadata.size || store['delete'](target);
	}});

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(278)
	  , anObject               = __webpack_require__(13)
	  , getPrototypeOf         = __webpack_require__(60)
	  , ordinaryHasOwnMetadata = metadata.has
	  , ordinaryGetOwnMetadata = metadata.get
	  , toMetaKey              = metadata.key;
	
	var ordinaryGetMetadata = function(MetadataKey, O, P){
	  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
	  if(hasOwn)return ordinaryGetOwnMetadata(MetadataKey, O, P);
	  var parent = getPrototypeOf(O);
	  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
	};
	
	metadata.exp({getMetadata: function getMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	var Set                     = __webpack_require__(215)
	  , from                    = __webpack_require__(269)
	  , metadata                = __webpack_require__(278)
	  , anObject                = __webpack_require__(13)
	  , getPrototypeOf          = __webpack_require__(60)
	  , ordinaryOwnMetadataKeys = metadata.keys
	  , toMetaKey               = metadata.key;
	
	var ordinaryMetadataKeys = function(O, P){
	  var oKeys  = ordinaryOwnMetadataKeys(O, P)
	    , parent = getPrototypeOf(O);
	  if(parent === null)return oKeys;
	  var pKeys  = ordinaryMetadataKeys(parent, P);
	  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
	};
	
	metadata.exp({getMetadataKeys: function getMetadataKeys(target /*, targetKey */){
	  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
	}});

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(278)
	  , anObject               = __webpack_require__(13)
	  , ordinaryGetOwnMetadata = metadata.get
	  , toMetaKey              = metadata.key;
	
	metadata.exp({getOwnMetadata: function getOwnMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
	    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	var metadata                = __webpack_require__(278)
	  , anObject                = __webpack_require__(13)
	  , ordinaryOwnMetadataKeys = metadata.keys
	  , toMetaKey               = metadata.key;
	
	metadata.exp({getOwnMetadataKeys: function getOwnMetadataKeys(target /*, targetKey */){
	  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
	}});

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(278)
	  , anObject               = __webpack_require__(13)
	  , getPrototypeOf         = __webpack_require__(60)
	  , ordinaryHasOwnMetadata = metadata.has
	  , toMetaKey              = metadata.key;
	
	var ordinaryHasMetadata = function(MetadataKey, O, P){
	  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
	  if(hasOwn)return true;
	  var parent = getPrototypeOf(O);
	  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
	};
	
	metadata.exp({hasMetadata: function hasMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(278)
	  , anObject               = __webpack_require__(13)
	  , ordinaryHasOwnMetadata = metadata.has
	  , toMetaKey              = metadata.key;
	
	metadata.exp({hasOwnMetadata: function hasOwnMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
	    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	var metadata                  = __webpack_require__(278)
	  , anObject                  = __webpack_require__(13)
	  , aFunction                 = __webpack_require__(22)
	  , toMetaKey                 = metadata.key
	  , ordinaryDefineOwnMetadata = metadata.set;
	
	metadata.exp({metadata: function metadata(metadataKey, metadataValue){
	  return function decorator(target, targetKey){
	    ordinaryDefineOwnMetadata(
	      metadataKey, metadataValue,
	      (targetKey !== undefined ? anObject : aFunction)(target),
	      toMetaKey(targetKey)
	    );
	  };
	}});

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
	var $export   = __webpack_require__(9)
	  , microtask = __webpack_require__(210)()
	  , process   = __webpack_require__(5).process
	  , isNode    = __webpack_require__(35)(process) == 'process';
	
	$export($export.G, {
	  asap: function asap(fn){
	    var domain = isNode && process.domain;
	    microtask(domain ? domain.bind(fn) : fn);
	  }
	});

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/zenparsing/es-observable
	var $export     = __webpack_require__(9)
	  , global      = __webpack_require__(5)
	  , core        = __webpack_require__(10)
	  , microtask   = __webpack_require__(210)()
	  , OBSERVABLE  = __webpack_require__(26)('observable')
	  , aFunction   = __webpack_require__(22)
	  , anObject    = __webpack_require__(13)
	  , anInstance  = __webpack_require__(206)
	  , redefineAll = __webpack_require__(211)
	  , hide        = __webpack_require__(11)
	  , forOf       = __webpack_require__(207)
	  , RETURN      = forOf.RETURN;
	
	var getMethod = function(fn){
	  return fn == null ? undefined : aFunction(fn);
	};
	
	var cleanupSubscription = function(subscription){
	  var cleanup = subscription._c;
	  if(cleanup){
	    subscription._c = undefined;
	    cleanup();
	  }
	};
	
	var subscriptionClosed = function(subscription){
	  return subscription._o === undefined;
	};
	
	var closeSubscription = function(subscription){
	  if(!subscriptionClosed(subscription)){
	    subscription._o = undefined;
	    cleanupSubscription(subscription);
	  }
	};
	
	var Subscription = function(observer, subscriber){
	  anObject(observer);
	  this._c = undefined;
	  this._o = observer;
	  observer = new SubscriptionObserver(this);
	  try {
	    var cleanup      = subscriber(observer)
	      , subscription = cleanup;
	    if(cleanup != null){
	      if(typeof cleanup.unsubscribe === 'function')cleanup = function(){ subscription.unsubscribe(); };
	      else aFunction(cleanup);
	      this._c = cleanup;
	    }
	  } catch(e){
	    observer.error(e);
	    return;
	  } if(subscriptionClosed(this))cleanupSubscription(this);
	};
	
	Subscription.prototype = redefineAll({}, {
	  unsubscribe: function unsubscribe(){ closeSubscription(this); }
	});
	
	var SubscriptionObserver = function(subscription){
	  this._s = subscription;
	};
	
	SubscriptionObserver.prototype = redefineAll({}, {
	  next: function next(value){
	    var subscription = this._s;
	    if(!subscriptionClosed(subscription)){
	      var observer = subscription._o;
	      try {
	        var m = getMethod(observer.next);
	        if(m)return m.call(observer, value);
	      } catch(e){
	        try {
	          closeSubscription(subscription);
	        } finally {
	          throw e;
	        }
	      }
	    }
	  },
	  error: function error(value){
	    var subscription = this._s;
	    if(subscriptionClosed(subscription))throw value;
	    var observer = subscription._o;
	    subscription._o = undefined;
	    try {
	      var m = getMethod(observer.error);
	      if(!m)throw value;
	      value = m.call(observer, value);
	    } catch(e){
	      try {
	        cleanupSubscription(subscription);
	      } finally {
	        throw e;
	      }
	    } cleanupSubscription(subscription);
	    return value;
	  },
	  complete: function complete(value){
	    var subscription = this._s;
	    if(!subscriptionClosed(subscription)){
	      var observer = subscription._o;
	      subscription._o = undefined;
	      try {
	        var m = getMethod(observer.complete);
	        value = m ? m.call(observer, value) : undefined;
	      } catch(e){
	        try {
	          cleanupSubscription(subscription);
	        } finally {
	          throw e;
	        }
	      } cleanupSubscription(subscription);
	      return value;
	    }
	  }
	});
	
	var $Observable = function Observable(subscriber){
	  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
	};
	
	redefineAll($Observable.prototype, {
	  subscribe: function subscribe(observer){
	    return new Subscription(observer, this._f);
	  },
	  forEach: function forEach(fn){
	    var that = this;
	    return new (core.Promise || global.Promise)(function(resolve, reject){
	      aFunction(fn);
	      var subscription = that.subscribe({
	        next : function(value){
	          try {
	            return fn(value);
	          } catch(e){
	            reject(e);
	            subscription.unsubscribe();
	          }
	        },
	        error: reject,
	        complete: resolve
	      });
	    });
	  }
	});
	
	redefineAll($Observable, {
	  from: function from(x){
	    var C = typeof this === 'function' ? this : $Observable;
	    var method = getMethod(anObject(x)[OBSERVABLE]);
	    if(method){
	      var observable = anObject(method.call(x));
	      return observable.constructor === C ? observable : new C(function(observer){
	        return observable.subscribe(observer);
	      });
	    }
	    return new C(function(observer){
	      var done = false;
	      microtask(function(){
	        if(!done){
	          try {
	            if(forOf(x, false, function(it){
	              observer.next(it);
	              if(done)return RETURN;
	            }) === RETURN)return;
	          } catch(e){
	            if(done)throw e;
	            observer.error(e);
	            return;
	          } observer.complete();
	        }
	      });
	      return function(){ done = true; };
	    });
	  },
	  of: function of(){
	    for(var i = 0, l = arguments.length, items = Array(l); i < l;)items[i] = arguments[i++];
	    return new (typeof this === 'function' ? this : $Observable)(function(observer){
	      var done = false;
	      microtask(function(){
	        if(!done){
	          for(var i = 0; i < items.length; ++i){
	            observer.next(items[i]);
	            if(done)return;
	          } observer.complete();
	        }
	      });
	      return function(){ done = true; };
	    });
	  }
	});
	
	hide($Observable.prototype, OBSERVABLE, function(){ return this; });
	
	$export($export.G, {Observable: $Observable});
	
	__webpack_require__(193)('Observable');

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	// ie9- setTimeout & setInterval additional parameters fix
	var global     = __webpack_require__(5)
	  , $export    = __webpack_require__(9)
	  , invoke     = __webpack_require__(79)
	  , partial    = __webpack_require__(290)
	  , navigator  = global.navigator
	  , MSIE       = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
	var wrap = function(set){
	  return MSIE ? function(fn, time /*, ...args */){
	    return set(invoke(
	      partial,
	      [].slice.call(arguments, 2),
	      typeof fn == 'function' ? fn : Function(fn)
	    ), time);
	  } : set;
	};
	$export($export.G + $export.B + $export.F * MSIE, {
	  setTimeout:  wrap(global.setTimeout),
	  setInterval: wrap(global.setInterval)
	});

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var path      = __webpack_require__(291)
	  , invoke    = __webpack_require__(79)
	  , aFunction = __webpack_require__(22);
	module.exports = function(/* ...pargs */){
	  var fn     = aFunction(this)
	    , length = arguments.length
	    , pargs  = Array(length)
	    , i      = 0
	    , _      = path._
	    , holder = false;
	  while(length > i)if((pargs[i] = arguments[i++]) === _)holder = true;
	  return function(/* ...args */){
	    var that = this
	      , aLen = arguments.length
	      , j = 0, k = 0, args;
	    if(!holder && !aLen)return invoke(fn, pargs, that);
	    args = pargs.slice();
	    if(holder)for(;length > j; j++)if(args[j] === _)args[j] = arguments[k++];
	    while(aLen > k)args.push(arguments[k++]);
	    return invoke(fn, args, that);
	  };
	};

/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(5);

/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(9)
	  , $task   = __webpack_require__(209);
	$export($export.G + $export.B, {
	  setImmediate:   $task.set,
	  clearImmediate: $task.clear
	});

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	var $iterators    = __webpack_require__(194)
	  , redefine      = __webpack_require__(19)
	  , global        = __webpack_require__(5)
	  , hide          = __webpack_require__(11)
	  , Iterators     = __webpack_require__(130)
	  , wks           = __webpack_require__(26)
	  , ITERATOR      = wks('iterator')
	  , TO_STRING_TAG = wks('toStringTag')
	  , ArrayValues   = Iterators.Array;
	
	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
	  var NAME       = collections[i]
	    , Collection = global[NAME]
	    , proto      = Collection && Collection.prototype
	    , key;
	  if(proto){
	    if(!proto[ITERATOR])hide(proto, ITERATOR, ArrayValues);
	    if(!proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
	    Iterators[NAME] = ArrayValues;
	    for(key in $iterators)if(!proto[key])redefine(proto, key, $iterators[key], true);
	  }
	}

/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */
	
	!(function(global) {
	  "use strict";
	
	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
	
	  var inModule = typeof module === "object";
	  var runtime = global.regeneratorRuntime;
	  if (runtime) {
	    if (inModule) {
	      // If regeneratorRuntime is defined globally and we're in a module,
	      // make the exports object identical to regeneratorRuntime.
	      module.exports = runtime;
	    }
	    // Don't bother evaluating the rest of this file if the runtime was
	    // already defined globally.
	    return;
	  }
	
	  // Define the runtime globally (as expected by generated code) as either
	  // module.exports (if we're in a module) or a new, empty object.
	  runtime = global.regeneratorRuntime = inModule ? module.exports : {};
	
	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);
	
	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);
	
	    return generator;
	  }
	  runtime.wrap = wrap;
	
	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }
	
	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";
	
	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};
	
	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}
	
	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };
	
	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }
	
	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunctionPrototype[toStringTagSymbol] =
	    GeneratorFunction.displayName = "GeneratorFunction";
	
	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      prototype[method] = function(arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }
	
	  runtime.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };
	
	  runtime.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      if (!(toStringTagSymbol in genFun)) {
	        genFun[toStringTagSymbol] = "GeneratorFunction";
	      }
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };
	
	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  runtime.awrap = function(arg) {
	    return { __await: arg };
	  };
	
	  function AsyncIterator(generator) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return Promise.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }
	
	        return Promise.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration. If the Promise is rejected, however, the
	          // result for this iteration will be rejected with the same
	          // reason. Note that rejections of yielded Promises are not
	          // thrown back into the generator function, as is the case
	          // when an awaited Promise is rejected. This difference in
	          // behavior between yield and await is important, because it
	          // allows the consumer to decide what to do with the yielded
	          // rejection (swallow it and continue, manually .throw it back
	          // into the generator, abandon iteration, whatever). With
	          // await, by contrast, there is no opportunity to examine the
	          // rejection reason outside the generator function, so the
	          // only option is to throw it from the await expression, and
	          // let the generator function handle the exception.
	          result.value = unwrapped;
	          resolve(result);
	        }, reject);
	      }
	    }
	
	    if (typeof process === "object" && process.domain) {
	      invoke = process.domain.bind(invoke);
	    }
	
	    var previousPromise;
	
	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new Promise(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }
	
	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }
	
	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }
	
	  defineIteratorMethods(AsyncIterator.prototype);
	  runtime.AsyncIterator = AsyncIterator;
	
	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList)
	    );
	
	    return runtime.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };
	
	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;
	
	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }
	
	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }
	
	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }
	
	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          if (method === "return" ||
	              (method === "throw" && delegate.iterator[method] === undefined)) {
	            // A return or throw (when the delegate iterator has no throw
	            // method) always terminates the yield* loop.
	            context.delegate = null;
	
	            // If the delegate iterator has a return method, give it a
	            // chance to clean up.
	            var returnMethod = delegate.iterator["return"];
	            if (returnMethod) {
	              var record = tryCatch(returnMethod, delegate.iterator, arg);
	              if (record.type === "throw") {
	                // If the return method threw an exception, let that
	                // exception prevail over the original return or throw.
	                method = "throw";
	                arg = record.arg;
	                continue;
	              }
	            }
	
	            if (method === "return") {
	              // Continue with the outer return, now that the delegate
	              // iterator has been terminated.
	              continue;
	            }
	          }
	
	          var record = tryCatch(
	            delegate.iterator[method],
	            delegate.iterator,
	            arg
	          );
	
	          if (record.type === "throw") {
	            context.delegate = null;
	
	            // Like returning generator.throw(uncaught), but without the
	            // overhead of an extra function call.
	            method = "throw";
	            arg = record.arg;
	            continue;
	          }
	
	          // Delegate generator ran and handled its own exceptions so
	          // regardless of what the method was, we continue as if it is
	          // "next" with an undefined arg.
	          method = "next";
	          arg = undefined;
	
	          var info = record.arg;
	          if (info.done) {
	            context[delegate.resultName] = info.value;
	            context.next = delegate.nextLoc;
	          } else {
	            state = GenStateSuspendedYield;
	            return info;
	          }
	
	          context.delegate = null;
	        }
	
	        if (method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = arg;
	
	        } else if (method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw arg;
	          }
	
	          if (context.dispatchException(arg)) {
	            // If the dispatched exception was caught by a catch block,
	            // then let that catch block handle the exception normally.
	            method = "next";
	            arg = undefined;
	          }
	
	        } else if (method === "return") {
	          context.abrupt("return", arg);
	        }
	
	        state = GenStateExecuting;
	
	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;
	
	          var info = {
	            value: record.arg,
	            done: context.done
	          };
	
	          if (record.arg === ContinueSentinel) {
	            if (context.delegate && method === "next") {
	              // Deliberately forget the last sent value so that we don't
	              // accidentally pass it on to the delegate.
	              arg = undefined;
	            }
	          } else {
	            return info;
	          }
	
	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(arg) call above.
	          method = "throw";
	          arg = record.arg;
	        }
	      }
	    };
	  }
	
	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);
	
	  Gp[toStringTagSymbol] = "Generator";
	
	  Gp.toString = function() {
	    return "[object Generator]";
	  };
	
	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };
	
	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }
	
	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }
	
	    this.tryEntries.push(entry);
	  }
	
	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }
	
	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }
	
	  runtime.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();
	
	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }
	
	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };
	
	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }
	
	      if (typeof iterable.next === "function") {
	        return iterable;
	      }
	
	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }
	
	          next.value = undefined;
	          next.done = true;
	
	          return next;
	        };
	
	        return next.next = next;
	      }
	    }
	
	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  runtime.values = values;
	
	  function doneResult() {
	    return { value: undefined, done: true };
	  }
	
	  Context.prototype = {
	    constructor: Context,
	
	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined;
	      this.done = false;
	      this.delegate = null;
	
	      this.tryEntries.forEach(resetTryEntry);
	
	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined;
	          }
	        }
	      }
	    },
	
	    stop: function() {
	      this.done = true;
	
	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }
	
	      return this.rval;
	    },
	
	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }
	
	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;
	        return !!caught;
	      }
	
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;
	
	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }
	
	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");
	
	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	
	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }
	
	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	
	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },
	
	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }
	
	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }
	
	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;
	
	      if (finallyEntry) {
	        this.next = finallyEntry.finallyLoc;
	      } else {
	        this.complete(record);
	      }
	
	      return ContinueSentinel;
	    },
	
	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }
	
	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = record.arg;
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }
	    },
	
	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },
	
	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }
	
	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },
	
	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };
	
	      return ContinueSentinel;
	    }
	  };
	})(
	  // Among the various tricks for obtaining a reference to the global
	  // object, this seems to be the most reliable technique that does not
	  // use indirect eval (which violates Content Security Policy).
	  typeof global === "object" ? global :
	  typeof window === "object" ? window :
	  typeof self === "object" ? self : this
	);
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(295)))

/***/ },
/* 295 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(297);
	module.exports = __webpack_require__(10).RegExp.escape;

/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/benjamingr/RexExp.escape
	var $export = __webpack_require__(9)
	  , $re     = __webpack_require__(298)(/[\\^$*+?.()|[\]{}]/g, '\\$&');
	
	$export($export.S, 'RegExp', {escape: function escape(it){ return $re(it); }});


/***/ },
/* 298 */
/***/ function(module, exports) {

	module.exports = function(regExp, replace){
	  var replacer = replace === Object(replace) ? function(part){
	    return replace[part];
	  } : replace;
	  return function(it){
	    return String(it).replace(regExp, replacer);
	  };
	};

/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof2 = __webpack_require__(300);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	(function () {
	
	    var laroute = function () {
	
	        var routes = {
	
	            absolute: false,
	            rootUrl: 'http://laravel.dev',
	            routes: [{ "host": null, "methods": ["GET", "HEAD"], "uri": "_debugbar\/open", "name": "debugbar.openhandler", "action": "Barryvdh\Debugbar\Controllers\OpenHandlerController@handle" }, { "host": null, "methods": ["GET", "HEAD"], "uri": "_debugbar\/clockwork\/{id}", "name": "debugbar.clockwork", "action": "Barryvdh\Debugbar\Controllers\OpenHandlerController@clockwork" }, { "host": null, "methods": ["GET", "HEAD"], "uri": "_debugbar\/assets\/stylesheets", "name": "debugbar.assets.css", "action": "Barryvdh\Debugbar\Controllers\AssetController@css" }, { "host": null, "methods": ["GET", "HEAD"], "uri": "_debugbar\/assets\/javascript", "name": "debugbar.assets.js", "action": "Barryvdh\Debugbar\Controllers\AssetController@js" }, { "host": null, "methods": ["GET", "HEAD"], "uri": "user", "name": null, "action": "Closure" }, { "host": null, "methods": ["GET", "HEAD"], "uri": "\/", "name": "home", "action": "App\Http\Controllers\HomeController@index" }, { "host": null, "methods": ["GET", "HEAD"], "uri": "login", "name": "login", "action": "App\Http\Controllers\AuthController@index" }, { "host": null, "methods": ["POST"], "uri": "login", "name": "login.action", "action": "App\Http\Controllers\AuthController@login" }, { "host": null, "methods": ["GET", "HEAD"], "uri": "register", "name": "registration", "action": "App\Http\Controllers\RegistrationController@index" }, { "host": null, "methods": ["POST"], "uri": "register", "name": "registration.action", "action": "App\Http\Controllers\RegistrationController@register" }, { "host": null, "methods": ["GET", "HEAD"], "uri": "logout", "name": "logout", "action": "App\Http\Controllers\AuthController@logout" }],
	            prefix: '',
	
	            route: function route(name, parameters, _route) {
	                _route = _route || this.getByName(name);
	
	                if (!_route) {
	                    return undefined;
	                }
	
	                return this.toRoute(_route, parameters);
	            },
	
	            url: function url(_url, parameters) {
	                parameters = parameters || [];
	
	                var uri = _url + '/' + parameters.join('/');
	
	                return this.getCorrectUrl(uri);
	            },
	
	            toRoute: function toRoute(route, parameters) {
	                var uri = this.replaceNamedParameters(route.uri, parameters);
	                var qs = this.getRouteQueryString(parameters);
	
	                return this.getCorrectUrl(uri + qs);
	            },
	
	            replaceNamedParameters: function replaceNamedParameters(uri, parameters) {
	                uri = uri.replace(/\{(.*?)\??\}/g, function (match, key) {
	                    if (parameters.hasOwnProperty(key)) {
	                        var value = parameters[key];
	                        delete parameters[key];
	                        return value;
	                    } else {
	                        return match;
	                    }
	                });
	
	                // Strip out any optional parameters that were not given
	                uri = uri.replace(/\/\{.*?\?\}/g, '');
	
	                return uri;
	            },
	
	            getRouteQueryString: function getRouteQueryString(parameters) {
	                var qs = [];
	                for (var key in parameters) {
	                    if (parameters.hasOwnProperty(key)) {
	                        qs.push(key + '=' + parameters[key]);
	                    }
	                }
	
	                if (qs.length < 1) {
	                    return '';
	                }
	
	                return '?' + qs.join('&');
	            },
	
	            getByName: function getByName(name) {
	                for (var key in this.routes) {
	                    if (this.routes.hasOwnProperty(key) && this.routes[key].name === name) {
	                        return this.routes[key];
	                    }
	                }
	            },
	
	            getByAction: function getByAction(action) {
	                for (var key in this.routes) {
	                    if (this.routes.hasOwnProperty(key) && this.routes[key].action === action) {
	                        return this.routes[key];
	                    }
	                }
	            },
	
	            getCorrectUrl: function getCorrectUrl(uri) {
	                var url = this.prefix + '/' + uri.replace(/^\/?/, '');
	
	                if (!this.absolute) return url;
	
	                return this.rootUrl.replace('/\/?$/', '') + url;
	            }
	        };
	
	        var getLinkAttributes = function getLinkAttributes(attributes) {
	            if (!attributes) {
	                return '';
	            }
	
	            var attrs = [];
	            for (var key in attributes) {
	                if (attributes.hasOwnProperty(key)) {
	                    attrs.push(key + '="' + attributes[key] + '"');
	                }
	            }
	
	            return attrs.join(' ');
	        };
	
	        var getHtmlLink = function getHtmlLink(url, title, attributes) {
	            title = title || url;
	            attributes = getLinkAttributes(attributes);
	
	            return '<a href="' + url + '" ' + attributes + '>' + title + '</a>';
	        };
	
	        return {
	            // Generate a url for a given controller action.
	            // router.action('HomeController@getIndex', [params = {}])
	            action: function action(name, parameters) {
	                parameters = parameters || {};
	
	                return routes.route(name, parameters, routes.getByAction(name));
	            },
	
	            // Generate a url for a given named route.
	            // router.route('routeName', [params = {}])
	            route: function route(_route2, parameters) {
	                parameters = parameters || {};
	
	                return routes.route(_route2, parameters);
	            },
	
	            // Generate a fully qualified URL to the given path.
	            // router.route('url', [params = {}])
	            url: function url(route, parameters) {
	                parameters = parameters || {};
	
	                return routes.url(route, parameters);
	            },
	
	            // Generate a html link to the given url.
	            // router.link_to('foo/bar', [title = url], [attributes = {}])
	            link_to: function link_to(url, title, attributes) {
	                url = this.url(url);
	
	                return getHtmlLink(url, title, attributes);
	            },
	
	            // Generate a html link to the given route.
	            // router.link_to_route('route.name', [title=url], [parameters = {}], [attributes = {}])
	            link_to_route: function link_to_route(route, title, parameters, attributes) {
	                var url = this.route(route, parameters);
	
	                return getHtmlLink(url, title, attributes);
	            },
	
	            // Generate a html link to the given controller action.
	            // router.link_to_action('HomeController@getIndex', [title=url], [parameters = {}], [attributes = {}])
	            link_to_action: function link_to_action(action, title, parameters, attributes) {
	                var url = this.action(action, parameters);
	
	                return getHtmlLink(url, title, attributes);
	            }
	
	        };
	    }.call(this);
	
	    /**
	     * Expose the class either via AMD, CommonJS or the global object
	     */
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	            return laroute;
	        }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if ((typeof module === "undefined" ? "undefined" : (0, _typeof3.default)(module)) === 'object' && module.exports) {
	        module.exports = laroute;
	    } else {
	        window.router = laroute;
	    }
	}).call(undefined);

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _iterator = __webpack_require__(301);
	
	var _iterator2 = _interopRequireDefault(_iterator);
	
	var _symbol = __webpack_require__(352);
	
	var _symbol2 = _interopRequireDefault(_symbol);
	
	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};

/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(302), __esModule: true };

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(303);
	__webpack_require__(347);
	module.exports = __webpack_require__(351).f('iterator');

/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $at  = __webpack_require__(304)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(307)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(305)
	  , defined   = __webpack_require__(306);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 305 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 306 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(308)
	  , $export        = __webpack_require__(309)
	  , redefine       = __webpack_require__(324)
	  , hide           = __webpack_require__(314)
	  , has            = __webpack_require__(325)
	  , Iterators      = __webpack_require__(326)
	  , $iterCreate    = __webpack_require__(327)
	  , setToStringTag = __webpack_require__(343)
	  , getPrototypeOf = __webpack_require__(345)
	  , ITERATOR       = __webpack_require__(344)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';
	
	var returnThis = function(){ return this; };
	
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 308 */
/***/ function(module, exports) {

	module.exports = true;

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(310)
	  , core      = __webpack_require__(311)
	  , ctx       = __webpack_require__(312)
	  , hide      = __webpack_require__(314)
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE]
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(a, b, c){
	        if(this instanceof C){
	          switch(arguments.length){
	            case 0: return new C;
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if(IS_PROTO){
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ },
/* 310 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 311 */
/***/ function(module, exports) {

	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(313);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 313 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(315)
	  , createDesc = __webpack_require__(323);
	module.exports = __webpack_require__(319) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	var anObject       = __webpack_require__(316)
	  , IE8_DOM_DEFINE = __webpack_require__(318)
	  , toPrimitive    = __webpack_require__(322)
	  , dP             = Object.defineProperty;
	
	exports.f = __webpack_require__(319) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(317);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 317 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(319) && !__webpack_require__(320)(function(){
	  return Object.defineProperty(__webpack_require__(321)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(320)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 320 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(317)
	  , document = __webpack_require__(310).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(317);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 323 */
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(314);

/***/ },
/* 325 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 326 */
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var create         = __webpack_require__(328)
	  , descriptor     = __webpack_require__(323)
	  , setToStringTag = __webpack_require__(343)
	  , IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(314)(IteratorPrototype, __webpack_require__(344)('iterator'), function(){ return this; });
	
	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(316)
	  , dPs         = __webpack_require__(329)
	  , enumBugKeys = __webpack_require__(341)
	  , IE_PROTO    = __webpack_require__(338)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(321)('iframe')
	    , i      = enumBugKeys.length
	    , lt     = '<'
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(342).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	var dP       = __webpack_require__(315)
	  , anObject = __webpack_require__(316)
	  , getKeys  = __webpack_require__(330);
	
	module.exports = __webpack_require__(319) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(331)
	  , enumBugKeys = __webpack_require__(341);
	
	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	var has          = __webpack_require__(325)
	  , toIObject    = __webpack_require__(332)
	  , arrayIndexOf = __webpack_require__(335)(false)
	  , IE_PROTO     = __webpack_require__(338)('IE_PROTO');
	
	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(333)
	  , defined = __webpack_require__(306);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(334);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 334 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(332)
	  , toLength  = __webpack_require__(336)
	  , toIndex   = __webpack_require__(337);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(305)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(305)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(339)('keys')
	  , uid    = __webpack_require__(340);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(310)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 340 */
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 341 */
/***/ function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(310).document && document.documentElement;

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(315).f
	  , has = __webpack_require__(325)
	  , TAG = __webpack_require__(344)('toStringTag');
	
	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	var store      = __webpack_require__(339)('wks')
	  , uid        = __webpack_require__(340)
	  , Symbol     = __webpack_require__(310).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;

/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(325)
	  , toObject    = __webpack_require__(346)
	  , IE_PROTO    = __webpack_require__(338)('IE_PROTO')
	  , ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(306);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(348);
	var global        = __webpack_require__(310)
	  , hide          = __webpack_require__(314)
	  , Iterators     = __webpack_require__(326)
	  , TO_STRING_TAG = __webpack_require__(344)('toStringTag');
	
	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
	  var NAME       = collections[i]
	    , Collection = global[NAME]
	    , proto      = Collection && Collection.prototype;
	  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}

/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(349)
	  , step             = __webpack_require__(350)
	  , Iterators        = __webpack_require__(326)
	  , toIObject        = __webpack_require__(332);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(307)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 349 */
/***/ function(module, exports) {

	module.exports = function(){ /* empty */ };

/***/ },
/* 350 */
/***/ function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(344);

/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(353), __esModule: true };

/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(354);
	__webpack_require__(365);
	__webpack_require__(366);
	__webpack_require__(367);
	module.exports = __webpack_require__(311).Symbol;

/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global         = __webpack_require__(310)
	  , has            = __webpack_require__(325)
	  , DESCRIPTORS    = __webpack_require__(319)
	  , $export        = __webpack_require__(309)
	  , redefine       = __webpack_require__(324)
	  , META           = __webpack_require__(355).KEY
	  , $fails         = __webpack_require__(320)
	  , shared         = __webpack_require__(339)
	  , setToStringTag = __webpack_require__(343)
	  , uid            = __webpack_require__(340)
	  , wks            = __webpack_require__(344)
	  , wksExt         = __webpack_require__(351)
	  , wksDefine      = __webpack_require__(356)
	  , keyOf          = __webpack_require__(357)
	  , enumKeys       = __webpack_require__(358)
	  , isArray        = __webpack_require__(361)
	  , anObject       = __webpack_require__(316)
	  , toIObject      = __webpack_require__(332)
	  , toPrimitive    = __webpack_require__(322)
	  , createDesc     = __webpack_require__(323)
	  , _create        = __webpack_require__(328)
	  , gOPNExt        = __webpack_require__(362)
	  , $GOPD          = __webpack_require__(364)
	  , $DP            = __webpack_require__(315)
	  , $keys          = __webpack_require__(330)
	  , gOPD           = $GOPD.f
	  , dP             = $DP.f
	  , gOPN           = gOPNExt.f
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , PROTOTYPE      = 'prototype'
	  , HIDDEN         = wks('_hidden')
	  , TO_PRIMITIVE   = wks('toPrimitive')
	  , isEnum         = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , OPSymbols      = shared('op-symbols')
	  , ObjectProto    = Object[PROTOTYPE]
	  , USE_NATIVE     = typeof $Symbol == 'function'
	  , QObject        = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(dP({}, 'a', {
	    get: function(){ return dP(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = gOPD(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  dP(it, key, D);
	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
	  return typeof it == 'symbol';
	} : function(it){
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D){
	  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if(has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  it  = toIObject(it);
	  key = toPrimitive(key, true);
	  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
	  var D = gOPD(it, key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var IS_OP  = it === ObjectProto
	    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if(!USE_NATIVE){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function(value){
	      if(this === ObjectProto)$set.call(OPSymbols, value);
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f   = $defineProperty;
	  __webpack_require__(363).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(360).f  = $propertyIsEnumerable;
	  __webpack_require__(359).f = $getOwnPropertySymbols;
	
	  if(DESCRIPTORS && !__webpack_require__(308)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function(name){
	    return wrap(wks(name));
	  }
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});
	
	for(var symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);
	
	for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    if(isSymbol(key))return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it){
	    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	    var args = [it]
	      , i    = 1
	      , replacer, $replacer;
	    while(arguments.length > i)args.push(arguments[i++]);
	    replacer = args[1];
	    if(typeof replacer == 'function')$replacer = replacer;
	    if($replacer || !isArray(replacer))replacer = function(key, value){
	      if($replacer)value = $replacer.call(this, key, value);
	      if(!isSymbol(value))return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(314)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	var META     = __webpack_require__(340)('meta')
	  , isObject = __webpack_require__(317)
	  , has      = __webpack_require__(325)
	  , setDesc  = __webpack_require__(315).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(320)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	var global         = __webpack_require__(310)
	  , core           = __webpack_require__(311)
	  , LIBRARY        = __webpack_require__(308)
	  , wksExt         = __webpack_require__(351)
	  , defineProperty = __webpack_require__(315).f;
	module.exports = function(name){
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
	};

/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(330)
	  , toIObject = __webpack_require__(332);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(330)
	  , gOPS    = __webpack_require__(359)
	  , pIE     = __webpack_require__(360);
	module.exports = function(it){
	  var result     = getKeys(it)
	    , getSymbols = gOPS.f;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = pIE.f
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
	  } return result;
	};

/***/ },
/* 359 */
/***/ function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 360 */
/***/ function(module, exports) {

	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(334);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};

/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(332)
	  , gOPN      = __webpack_require__(363).f
	  , toString  = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function(it){
	  try {
	    return gOPN(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it){
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys      = __webpack_require__(331)
	  , hiddenKeys = __webpack_require__(341).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
	  return $keys(O, hiddenKeys);
	};

/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	var pIE            = __webpack_require__(360)
	  , createDesc     = __webpack_require__(323)
	  , toIObject      = __webpack_require__(332)
	  , toPrimitive    = __webpack_require__(322)
	  , has            = __webpack_require__(325)
	  , IE8_DOM_DEFINE = __webpack_require__(318)
	  , gOPD           = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(319) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 365 */
/***/ function(module, exports) {



/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(356)('asyncIterator');

/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(356)('observable');

/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	(function (global, factory) {
	   true ? module.exports = factory() :
	  typeof define === 'function' && define.amd ? define(factory) :
	  (global.tko = factory());
	}(this, (function () { 'use strict';
	
	//
	// Array utilities
	//
	/* eslint no-cond-assign: 0 */
	
	function arrayForEach(array, action) {
	    for (var i = 0, j = array.length; i < j; i++)
	        action(array[i], i);
	}
	
	function arrayIndexOf(array, item) {
	    // IE9
	    if (typeof Array.prototype.indexOf == "function")
	        return Array.prototype.indexOf.call(array, item);
	    for (var i = 0, j = array.length; i < j; i++)
	        if (array[i] === item)
	            return i;
	    return -1;
	}
	
	function arrayFirst(array, predicate, predicateOwner) {
	    for (var i = 0, j = array.length; i < j; i++)
	        if (predicate.call(predicateOwner, array[i], i))
	            return array[i];
	    return null;
	}
	
	function arrayRemoveItem(array, itemToRemove) {
	    var index = arrayIndexOf(array, itemToRemove);
	    if (index > 0) {
	        array.splice(index, 1);
	    }
	    else if (index === 0) {
	        array.shift();
	    }
	}
	
	function arrayGetDistinctValues(array) {
	    array = array || [];
	    var result = [];
	    for (var i = 0, j = array.length; i < j; i++) {
	        if (arrayIndexOf(result, array[i]) < 0)
	            result.push(array[i]);
	    }
	    return result;
	}
	
	function arrayMap(array, mapping) {
	    array = array || [];
	    var result = [];
	    for (var i = 0, j = array.length; i < j; i++)
	        result.push(mapping(array[i], i));
	    return result;
	}
	
	function arrayFilter(array, predicate) {
	    array = array || [];
	    var result = [];
	    for (var i = 0, j = array.length; i < j; i++)
	        if (predicate(array[i], i))
	            result.push(array[i]);
	    return result;
	}
	
	function arrayPushAll(array, valuesToPush) {
	    if (valuesToPush instanceof Array)
	        array.push.apply(array, valuesToPush);
	    else
	        for (var i = 0, j = valuesToPush.length; i < j; i++)
	            array.push(valuesToPush[i]);
	    return array;
	}
	
	function addOrRemoveItem(array, value, included) {
	    var existingEntryIndex = arrayIndexOf(typeof array.peek === 'function' ? array.peek() : array, value);
	    if (existingEntryIndex < 0) {
	        if (included)
	            array.push(value);
	    } else {
	        if (!included)
	            array.splice(existingEntryIndex, 1);
	    }
	}
	
	
	function makeArray(arrayLikeObject) {
	    var result = [];
	    for (var i = 0, j = arrayLikeObject.length; i < j; i++) {
	        result.push(arrayLikeObject[i]);
	    }
	    return result;
	}
	
	
	function range(min, max) {
	    min = typeof min === 'function' ? min() : min;
	    max = typeof max === 'function' ? max() : max;
	    var result = [];
	    for (var i = min; i <= max; i++)
	        result.push(i);
	    return result;
	}
	
	// Go through the items that have been added and deleted and try to find matches between them.
	function findMovesInArrayComparison(left, right, limitFailedCompares) {
	    if (left.length && right.length) {
	        var failedCompares, l, r, leftItem, rightItem;
	        for (failedCompares = l = 0; (!limitFailedCompares || failedCompares < limitFailedCompares) && (leftItem = left[l]); ++l) {
	            for (r = 0; rightItem = right[r]; ++r) {
	                if (leftItem['value'] === rightItem['value']) {
	                    leftItem['moved'] = rightItem['index'];
	                    rightItem['moved'] = leftItem['index'];
	                    right.splice(r, 1);         // This item is marked as moved; so remove it from right list
	                    failedCompares = r = 0;     // Reset failed compares count because we're checking for consecutive failures
	                    break;
	                }
	            }
	            failedCompares += r;
	        }
	    }
	}
	
	
	
	var statusNotInOld = 'added';
	var statusNotInNew = 'deleted';
	
	    // Simple calculation based on Levenshtein distance.
	function compareArrays(oldArray, newArray, options) {
	    // For backward compatibility, if the third arg is actually a bool, interpret
	    // it as the old parameter 'dontLimitMoves'. Newer code should use { dontLimitMoves: true }.
	    options = (typeof options === 'boolean') ? { 'dontLimitMoves': options } : (options || {});
	    oldArray = oldArray || [];
	    newArray = newArray || [];
	
	    if (oldArray.length < newArray.length)
	        return compareSmallArrayToBigArray(oldArray, newArray, statusNotInOld, statusNotInNew, options);
	    else
	        return compareSmallArrayToBigArray(newArray, oldArray, statusNotInNew, statusNotInOld, options);
	}
	
	
	function compareSmallArrayToBigArray(smlArray, bigArray, statusNotInSml, statusNotInBig, options) {
	    var myMin = Math.min,
	        myMax = Math.max,
	        editDistanceMatrix = [],
	        smlIndex, smlIndexMax = smlArray.length,
	        bigIndex, bigIndexMax = bigArray.length,
	        compareRange = (bigIndexMax - smlIndexMax) || 1,
	        maxDistance = smlIndexMax + bigIndexMax + 1,
	        thisRow, lastRow,
	        bigIndexMaxForRow, bigIndexMinForRow;
	
	    for (smlIndex = 0; smlIndex <= smlIndexMax; smlIndex++) {
	        lastRow = thisRow;
	        editDistanceMatrix.push(thisRow = []);
	        bigIndexMaxForRow = myMin(bigIndexMax, smlIndex + compareRange);
	        bigIndexMinForRow = myMax(0, smlIndex - 1);
	        for (bigIndex = bigIndexMinForRow; bigIndex <= bigIndexMaxForRow; bigIndex++) {
	            if (!bigIndex)
	                thisRow[bigIndex] = smlIndex + 1;
	            else if (!smlIndex)  // Top row - transform empty array into new array via additions
	                thisRow[bigIndex] = bigIndex + 1;
	            else if (smlArray[smlIndex - 1] === bigArray[bigIndex - 1])
	                thisRow[bigIndex] = lastRow[bigIndex - 1];                  // copy value (no edit)
	            else {
	                var northDistance = lastRow[bigIndex] || maxDistance;       // not in big (deletion)
	                var westDistance = thisRow[bigIndex - 1] || maxDistance;    // not in small (addition)
	                thisRow[bigIndex] = myMin(northDistance, westDistance) + 1;
	            }
	        }
	    }
	
	    var editScript = [], meMinusOne, notInSml = [], notInBig = [];
	    for (smlIndex = smlIndexMax, bigIndex = bigIndexMax; smlIndex || bigIndex;) {
	        meMinusOne = editDistanceMatrix[smlIndex][bigIndex] - 1;
	        if (bigIndex && meMinusOne === editDistanceMatrix[smlIndex][bigIndex-1]) {
	            notInSml.push(editScript[editScript.length] = {     // added
	                'status': statusNotInSml,
	                'value': bigArray[--bigIndex],
	                'index': bigIndex });
	        } else if (smlIndex && meMinusOne === editDistanceMatrix[smlIndex - 1][bigIndex]) {
	            notInBig.push(editScript[editScript.length] = {     // deleted
	                'status': statusNotInBig,
	                'value': smlArray[--smlIndex],
	                'index': smlIndex });
	        } else {
	            --bigIndex;
	            --smlIndex;
	            if (!options['sparse']) {
	                editScript.push({
	                    'status': "retained",
	                    'value': bigArray[bigIndex] });
	            }
	        }
	    }
	
	    // Set a limit on the number of consecutive non-matching comparisons; having it a multiple of
	    // smlIndexMax keeps the time complexity of this algorithm linear.
	    findMovesInArrayComparison(notInBig, notInSml, !options['dontLimitMoves'] && smlIndexMax * 10);
	
	    return editScript.reverse();
	}
	
	//
	// This becomes ko.options
	// --
	//
	// This is the root 'options', which must be extended by others.
	
	var options = {
	    deferUpdates: false,
	
	    useOnlyNativeEvents: false,
	
	    protoProperty: '__ko_proto__',
	
	    // Modify the default attribute from `data-bind`.
	    defaultBindingAttribute: 'data-bind',
	
	    // Enable/disable <!-- ko binding: ... -> style bindings
	    allowVirtualElements: true,
	
	    // Global variables that can be accessed from bindings.
	    bindingGlobals: window,
	
	    // An instance of the binding provider.
	    bindingProviderInstance: null,
	
	    // jQuery will be automatically set to window.jQuery in applyBindings
	    // if it is (strictly equal to) undefined.  Set it to false or null to
	    // disable automatically setting jQuery.
	    jQuery: window && window.jQuery,
	
	    taskScheduler: null,
	
	    debug: false,
	
	    // Filters for bindings
	    //   data-bind="expression | filter_1 | filter_2"
	    filters: {},
	
	    onError: function (e) { throw e; },
	
	    set: function (name, value) {
	        options[name] = value;
	    }
	};
	
	Object.defineProperty(options, '$', {
	    get: function () { return options.jQuery; }
	});
	
	//
	// Error handling
	// ---
	//
	// The default onError handler is to re-throw.
	function catchFunctionErrors(delegate) {
	    return options.onError ? function () {
	        try {
	            return delegate.apply(this, arguments);
	        } catch (e) {
	            options.onError(e);
	        }
	    } : delegate;
	}
	
	function deferError(error) {
	    safeSetTimeout(function () { options.onError(error); }, 0);
	}
	
	
	function safeSetTimeout(handler, timeout) {
	    return setTimeout(catchFunctionErrors(handler), timeout);
	}
	
	//
	// Asynchronous functionality
	// ---
	function throttle(callback, timeout) {
	    var timeoutInstance;
	    return function () {
	        if (!timeoutInstance) {
	            timeoutInstance = safeSetTimeout(function () {
	                timeoutInstance = undefined;
	                callback();
	            }, timeout);
	        }
	    };
	}
	
	function debounce(callback, timeout) {
	    var timeoutInstance;
	    return function () {
	        clearTimeout(timeoutInstance);
	        timeoutInstance = safeSetTimeout(callback, timeout);
	    };
	}
	
	//
	// Detection and Workarounds for Internet Explorer
	//
	/* eslint no-empty: 0 */
	
	// Detect IE versions for bug workarounds (uses IE conditionals, not UA string, for robustness)
	// Note that, since IE 10 does not support conditional comments, the following logic only detects IE < 10.
	// Currently this is by design, since IE 10+ behaves correctly when treated as a standard browser.
	// If there is a future need to detect specific versions of IE10+, we will amend this.
	var ieVersion = document && (function() {
	    var version = 3, div = document.createElement('div'), iElems = div.getElementsByTagName('i');
	
	    // Keep constructing conditional HTML blocks until we hit one that resolves to an empty fragment
	    while (
	        div.innerHTML = '<!--[if gt IE ' + (++version) + ']><i></i><![endif]-->',
	        iElems[0]
	    ) {}
	    return version > 4 ? version : undefined;
	}());
	
	var isIe6 = ieVersion === 6;
	var isIe7 = ieVersion === 7;
	
	//
	// Object functions
	//
	
	function extend(target, source) {
	    if (source) {
	        for(var prop in source) {
	            if(source.hasOwnProperty(prop)) {
	                target[prop] = source[prop];
	            }
	        }
	    }
	    return target;
	}
	
	function objectForEach(obj, action) {
	    for (var prop in obj) {
	        if (obj.hasOwnProperty(prop)) {
	            action(prop, obj[prop]);
	        }
	    }
	}
	
	
	function objectMap(source, mapping) {
	    if (!source)
	        return source;
	    var target = {};
	    for (var prop in source) {
	        if (source.hasOwnProperty(prop)) {
	            target[prop] = mapping(source[prop], prop, source);
	        }
	    }
	    return target;
	}
	
	
	function getObjectOwnProperty(obj, propName) {
	    return obj.hasOwnProperty(propName) ? obj[propName] : undefined;
	}
	
	
	function clonePlainObjectDeep(obj, seen) {
	    if (!seen) { seen = []; }
	
	    if (!obj || typeof obj !== 'object'
	        || obj.constructor !== Object
	        || seen.indexOf(obj) !== -1) {
	        return obj;
	    }
	
	    // Anything that makes it below is a plain object that has not yet
	    // been seen/cloned.
	    seen.push(obj);
	
	    var result = {};
	    for (var prop in obj) {
	        if (obj.hasOwnProperty(prop)) {
	            result[prop] = clonePlainObjectDeep(obj[prop], seen);
	        }
	    }
	    return result;
	}
	
	//
	// Prototype Functions
	//
	var protoProperty = options.protoProperty;
	
	var canSetPrototype = ({ __proto__: [] } instanceof Array);
	
	function setPrototypeOf(obj, proto) {
	    obj.__proto__ = proto;
	    return obj;
	}
	
	var setPrototypeOfOrExtend = canSetPrototype ? setPrototypeOf : extend;
	
	function hasPrototype(instance, prototype) {
	    if ((instance === null) || (instance === undefined) || (instance[protoProperty] === undefined)) return false;
	    if (instance[protoProperty] === prototype) return true;
	    return hasPrototype(instance[protoProperty], prototype); // Walk the prototype chain
	}
	
	//
	// String (and JSON)
	//
	
	
	function stringTrim (string) {
	    return string === null || string === undefined ? '' :
	        string.trim ?
	            string.trim() :
	            string.toString().replace(/^[\s\xa0]+|[\s\xa0]+$/g, '');
	}
	
	
	function stringStartsWith (string, startsWith) {
	    string = string || "";
	    if (startsWith.length > string.length)
	        return false;
	    return string.substring(0, startsWith.length) === startsWith;
	}
	
	
	function parseJson (jsonString) {
	    if (typeof jsonString == "string") {
	        jsonString = stringTrim(jsonString);
	        if (jsonString) {
	            if (JSON && JSON.parse) // Use native parsing where available
	                return JSON.parse(jsonString);
	            return (new Function("return " + jsonString))(); // Fallback on less safe parsing for older browsers
	        }
	    }
	    return null;
	}
	
	
	function stringifyJson (data, replacer, space) {   // replacer and space are optional
	    if (!JSON || !JSON.stringify)
	        throw new Error("Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js");
	    return JSON.stringify(typeof data === 'function' ? data() : data, replacer, space);
	}
	
	//
	// ES6 Symbols
	//
	
	var useSymbols = typeof Symbol === 'function';
	
	function createSymbolOrString(identifier) {
	    return useSymbols ? Symbol(identifier) : identifier;
	}
	
	//
	// DOM - CSS
	//
	
	// For details on the pattern for changing node classes
	// see: https://github.com/knockout/knockout/issues/1597
	var cssClassNameRegex = /\S+/g;
	
	
	function toggleDomNodeCssClass(node, classNames, shouldHaveClass) {
	    var addOrRemoveFn;
	    if (!classNames) { return; }
	    if (typeof node.classList === 'object') {
	        addOrRemoveFn = node.classList[shouldHaveClass ? 'add' : 'remove'];
	        arrayForEach(classNames.match(cssClassNameRegex), function(className) {
	            addOrRemoveFn.call(node.classList, className);
	        });
	    } else if (typeof node.className['baseVal'] === 'string') {
	        // SVG tag .classNames is an SVGAnimatedString instance
	        toggleObjectClassPropertyString(node.className, 'baseVal', classNames, shouldHaveClass);
	    } else {
	        // node.className ought to be a string.
	        toggleObjectClassPropertyString(node, 'className', classNames, shouldHaveClass);
	    }
	}
	
	
	function toggleObjectClassPropertyString(obj, prop, classNames, shouldHaveClass) {
	    // obj/prop is either a node/'className' or a SVGAnimatedString/'baseVal'.
	    var currentClassNames = obj[prop].match(cssClassNameRegex) || [];
	    arrayForEach(classNames.match(cssClassNameRegex), function(className) {
	        addOrRemoveItem(currentClassNames, className, shouldHaveClass);
	    });
	    obj[prop] = currentClassNames.join(" ");
	}
	
	//
	// jQuery
	//
	// TODO: deprecate in favour of options.$
	
	var jQueryInstance = window && window.jQuery;
	
	function jQuerySetInstance(jquery) {
	    jQueryInstance = jquery;
	}
	
	//
	// Information about the DOM
	//
	function domNodeIsContainedBy (node, containedByNode) {
	    if (node === containedByNode)
	        return true;
	    if (node.nodeType === 11)
	        return false; // Fixes issue #1162 - can't use node.contains for document fragments on IE8
	    if (containedByNode.contains)
	        return containedByNode.contains(node.nodeType !== 1 ? node.parentNode : node);
	    if (containedByNode.compareDocumentPosition)
	        return (containedByNode.compareDocumentPosition(node) & 16) == 16;
	    while (node && node != containedByNode) {
	        node = node.parentNode;
	    }
	    return !!node;
	}
	
	function domNodeIsAttachedToDocument (node) {
	    return domNodeIsContainedBy(node, node.ownerDocument.documentElement);
	}
	
	function anyDomNodeIsAttachedToDocument(nodes) {
	    return !!arrayFirst(nodes, domNodeIsAttachedToDocument);
	}
	
	function tagNameLower(element) {
	    // For HTML elements, tagName will always be upper case; for XHTML elements, it'll be lower case.
	    // Possible future optimization: If we know it's an element from an XHTML document (not HTML),
	    // we don't need to do the .toLowerCase() as it will always be lower case anyway.
	    return element && element.tagName && element.tagName.toLowerCase();
	}
	
	function isDomElement(obj) {
	    if (window.HTMLElement) {
	        return obj instanceof HTMLElement;
	    } else {
	        return obj && obj.tagName && obj.nodeType === 1;
	    }
	}
	
	function isDocumentFragment(obj) {
	    if (window.DocumentFragment) {
	        return obj instanceof DocumentFragment;
	    } else {
	        return obj && obj.nodeType === 11;
	    }
	}
	
	//
	// DOM node data
	//
	//
	var dataStoreKeyExpandoPropertyName = "__ko__data" + new Date();
	var dataStore;
	var uniqueId = 0;
	var get;
	var set;
	var clear;
	
	/**
	 * --- Legacy getter/setter (may cause memory leaks) ---
	 */
	function getAll(node, createIfNotFound) {
	    var dataStoreKey = node[dataStoreKeyExpandoPropertyName];
	    var hasExistingDataStore = dataStoreKey && (dataStoreKey !== "null") && dataStore[dataStoreKey];
	    if (!hasExistingDataStore) {
	        if (!createIfNotFound)
	            return undefined;
	        dataStoreKey = node[dataStoreKeyExpandoPropertyName] = "ko" + uniqueId++;
	        dataStore[dataStoreKey] = {};
	    }
	    return dataStore[dataStoreKey];
	}
	
	function legacyGet(node, key) {
	    var allDataForNode = getAll(node, false);
	    return allDataForNode === undefined ? undefined : allDataForNode[key];
	}
	
	function legacySet(node, key, value) {
	    if (value === undefined) {
	        // Make sure we don't actually create a new domData key if we are actually deleting a value
	        if (getAll(node, false) === undefined)
	            return;
	    }
	    var allDataForNode = getAll(node, true);
	    allDataForNode[key] = value;
	}
	
	function legacyClear(node) {
	    var dataStoreKey = node[dataStoreKeyExpandoPropertyName];
	    if (dataStoreKey) {
	        delete dataStore[dataStoreKey];
	        node[dataStoreKeyExpandoPropertyName] = null;
	        return true; // Exposing "did clean" flag purely so specs can infer whether things have been cleaned up as intended
	    }
	    return false;
	}
	
	/**
	 * WeakMap get/set/clear
	 */
	
	function wmGet(node, key) {
	    return (dataStore.get(node) || {})[key];
	}
	
	function wmSet(node, key, value) {
	    var dataForNode;
	    if (dataStore.has(node)) {
	        dataForNode = dataStore.get(node);
	    } else {
	        dataForNode = {};
	        dataStore.set(node, dataForNode);
	    }
	    dataForNode[key] = value;
	}
	
	function wmClear(node) {
	    dataStore.set(node, {});
	}
	
	
	if ('WeakMap' in window) {
	    dataStore = new WeakMap();
	    get = wmGet;
	    set = wmSet;
	    clear = wmClear;
	} else {
	    dataStore = {};
	    get = legacyGet;
	    set = legacySet;
	    clear = legacyClear;
	}
	
	
	
	/**
	 * Create a unique key-string identifier.
	 * FIXME: This should be deprecated.
	 */
	function nextKey() {
	    return (uniqueId++) + dataStoreKeyExpandoPropertyName;
	}
	
	
	
	
	var data = Object.freeze({
		nextKey: nextKey,
		get get () { return get; },
		get set () { return set; },
		get clear () { return clear; }
	});
	
	//
	// DOM node disposal
	//
	/* eslint no-cond-assign: 0 */
	var domDataKey = nextKey();
	// Node types:
	// 1: Element
	// 8: Comment
	// 9: Document
	var cleanableNodeTypes = { 1: true, 8: true, 9: true };
	var cleanableNodeTypesWithDescendants = { 1: true, 9: true };
	
	function getDisposeCallbacksCollection(node, createIfNotFound) {
	    var allDisposeCallbacks = get(node, domDataKey);
	    if ((allDisposeCallbacks === undefined) && createIfNotFound) {
	        allDisposeCallbacks = [];
	        set(node, domDataKey, allDisposeCallbacks);
	    }
	    return allDisposeCallbacks;
	}
	function destroyCallbacksCollection(node) {
	    set(node, domDataKey, undefined);
	}
	
	function cleanSingleNode(node) {
	    // Run all the dispose callbacks
	    var callbacks = getDisposeCallbacksCollection(node, false);
	    if (callbacks) {
	        callbacks = callbacks.slice(0); // Clone, as the array may be modified during iteration (typically, callbacks will remove themselves)
	        for (var i = 0; i < callbacks.length; i++)
	            callbacks[i](node);
	    }
	
	    // Erase the DOM data
	    clear(node);
	
	    // Perform cleanup needed by external libraries (currently only jQuery, but can be extended)
	    for (var i = 0, j = otherNodeCleanerFunctions.length; i < j; ++i) {
	        otherNodeCleanerFunctions[i](node);
	    }
	
	    // Clear any immediate-child comment nodes, as these wouldn't have been found by
	    // node.getElementsByTagName("*") in cleanNode() (comment nodes aren't elements)
	    if (cleanableNodeTypesWithDescendants[node.nodeType])
	        cleanImmediateCommentTypeChildren(node);
	}
	
	function cleanImmediateCommentTypeChildren(nodeWithChildren) {
	    var child, nextChild = nodeWithChildren.firstChild;
	    while (child = nextChild) {
	        nextChild = child.nextSibling;
	        if (child.nodeType === 8)
	            cleanSingleNode(child);
	    }
	}
	
	// Exports
	function addDisposeCallback(node, callback) {
	    if (typeof callback != "function")
	        throw new Error("Callback must be a function");
	    getDisposeCallbacksCollection(node, true).push(callback);
	}
	
	function removeDisposeCallback(node, callback) {
	    var callbacksCollection = getDisposeCallbacksCollection(node, false);
	    if (callbacksCollection) {
	        arrayRemoveItem(callbacksCollection, callback);
	        if (callbacksCollection.length == 0)
	            destroyCallbacksCollection(node);
	    }
	}
	
	function cleanNode(node) {
	    // First clean this node, where applicable
	    if (cleanableNodeTypes[node.nodeType]) {
	        cleanSingleNode(node);
	
	        // ... then its descendants, where applicable
	        if (cleanableNodeTypesWithDescendants[node.nodeType]) {
	            // Clone the descendants list in case it changes during iteration
	            var descendants = [];
	            arrayPushAll(descendants, node.getElementsByTagName("*"));
	            for (var i = 0, j = descendants.length; i < j; i++)
	                cleanSingleNode(descendants[i]);
	        }
	    }
	    return node;
	}
	
	function removeNode(node) {
	    cleanNode(node);
	    if (node.parentNode)
	        node.parentNode.removeChild(node);
	}
	
	
	// Expose supplemental node cleaning functions.
	var otherNodeCleanerFunctions = [];
	
	
	// Special support for jQuery here because it's so commonly used.
	// Many jQuery plugins (including jquery.tmpl) store data using jQuery's equivalent of domData
	// so notify it to tear down any resources associated with the node & descendants here.
	function cleanjQueryData(node) {
	    var jQueryCleanNodeFn = jQueryInstance
	        ? jQueryInstance.cleanData : null;
	
	    if (jQueryCleanNodeFn) {
	        jQueryCleanNodeFn([node]);
	    }
	}
	
	
	otherNodeCleanerFunctions.push(cleanjQueryData);
	
	//
	// DOM Events
	//
	
	// Represent the known event types in a compact way, then at runtime transform it into a hash with event name as key (for fast lookup)
	var knownEvents = {};
	var knownEventTypesByEventName = {};
	
	var keyEventTypeName = (navigator && /Firefox\/2/i.test(navigator.userAgent)) ? 'KeyboardEvent' : 'UIEvents';
	
	knownEvents[keyEventTypeName] = ['keyup', 'keydown', 'keypress'];
	
	knownEvents['MouseEvents'] = [
	    'click', 'dblclick', 'mousedown', 'mouseup', 'mousemove', 'mouseover',
	    'mouseout', 'mouseenter', 'mouseleave'];
	
	
	objectForEach(knownEvents, function(eventType, knownEventsForType) {
	    if (knownEventsForType.length) {
	        for (var i = 0, j = knownEventsForType.length; i < j; i++)
	            knownEventTypesByEventName[knownEventsForType[i]] = eventType;
	    }
	});
	
	
	function isClickOnCheckableElement(element, eventType) {
	    if ((tagNameLower(element) !== "input") || !element.type) return false;
	    if (eventType.toLowerCase() != "click") return false;
	    var inputType = element.type;
	    return (inputType == "checkbox") || (inputType == "radio");
	}
	
	
	// Workaround for an IE9 issue - https://github.com/SteveSanderson/knockout/issues/406
	var eventsThatMustBeRegisteredUsingAttachEvent = { 'propertychange': true };
	
	function registerEventHandler(element, eventType, handler) {
	    var wrappedHandler = catchFunctionErrors(handler);
	
	    var mustUseAttachEvent = ieVersion && eventsThatMustBeRegisteredUsingAttachEvent[eventType];
	    if (!options.useOnlyNativeEvents && !mustUseAttachEvent && jQueryInstance) {
	        jQueryInstance(element).bind(eventType, wrappedHandler);
	    } else if (!mustUseAttachEvent && typeof element.addEventListener == "function")
	        element.addEventListener(eventType, wrappedHandler, false);
	    else if (typeof element.attachEvent !== "undefined") {
	        var attachEventHandler = function (event) { wrappedHandler.call(element, event); },
	            attachEventName = "on" + eventType;
	        element.attachEvent(attachEventName, attachEventHandler);
	
	        // IE does not dispose attachEvent handlers automatically (unlike with addEventListener)
	        // so to avoid leaks, we have to remove them manually. See bug #856
	        addDisposeCallback(element, function() {
	            element.detachEvent(attachEventName, attachEventHandler);
	        });
	    } else
	        throw new Error("Browser doesn't support addEventListener or attachEvent");
	}
	
	function triggerEvent(element, eventType) {
	    if (!(element && element.nodeType))
	        throw new Error("element must be a DOM node when calling triggerEvent");
	
	    // For click events on checkboxes and radio buttons, jQuery toggles the element checked state *after* the
	    // event handler runs instead of *before*. (This was fixed in 1.9 for checkboxes but not for radio buttons.)
	    // IE doesn't change the checked state when you trigger the click event using "fireEvent".
	    // In both cases, we'll use the click method instead.
	    var useClickWorkaround = isClickOnCheckableElement(element, eventType);
	
	    if (!options.useOnlyNativeEvents && jQueryInstance && !useClickWorkaround) {
	        jQueryInstance(element).trigger(eventType);
	    } else if (typeof document.createEvent == "function") {
	        if (typeof element.dispatchEvent == "function") {
	            var eventCategory = knownEventTypesByEventName[eventType] || "HTMLEvents";
	            var event = document.createEvent(eventCategory);
	            event.initEvent(eventType, true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, element);
	            element.dispatchEvent(event);
	        }
	        else
	            throw new Error("The supplied element doesn't support dispatchEvent");
	    } else if (useClickWorkaround && element.click) {
	        element.click();
	    } else if (typeof element.fireEvent != "undefined") {
	        element.fireEvent("on" + eventType);
	    } else {
	        throw new Error("Browser doesn't support triggering events");
	    }
	}
	
	//
	//  DOM node manipulation
	//
	function fixUpContinuousNodeArray(continuousNodeArray, parentNode) {
	    // Before acting on a set of nodes that were previously outputted by a template function, we have to reconcile
	    // them against what is in the DOM right now. It may be that some of the nodes have already been removed, or that
	    // new nodes might have been inserted in the middle, for example by a binding. Also, there may previously have been
	    // leading comment nodes (created by rewritten string-based templates) that have since been removed during binding.
	    // So, this function translates the old "map" output array into its best guess of the set of current DOM nodes.
	    //
	    // Rules:
	    //   [A] Any leading nodes that have been removed should be ignored
	    //       These most likely correspond to memoization nodes that were already removed during binding
	    //       See https://github.com/knockout/knockout/pull/440
	    //   [B] Any trailing nodes that have been remove should be ignored
	    //       This prevents the code here from adding unrelated nodes to the array while processing rule [C]
	    //       See https://github.com/knockout/knockout/pull/1903
	    //   [C] We want to output a continuous series of nodes. So, ignore any nodes that have already been removed,
	    //       and include any nodes that have been inserted among the previous collection
	
	    if (continuousNodeArray.length) {
	        // The parent node can be a virtual element; so get the real parent node
	        parentNode = (parentNode.nodeType === 8 && parentNode.parentNode) || parentNode;
	
	        // Rule [A]
	        while (continuousNodeArray.length && continuousNodeArray[0].parentNode !== parentNode)
	            continuousNodeArray.splice(0, 1);
	
	        // Rule [B]
	        while (continuousNodeArray.length > 1 && continuousNodeArray[continuousNodeArray.length - 1].parentNode !== parentNode)
	            continuousNodeArray.length--;
	
	        // Rule [C]
	        if (continuousNodeArray.length > 1) {
	            var current = continuousNodeArray[0], last = continuousNodeArray[continuousNodeArray.length - 1];
	            // Replace with the actual new continuous node set
	            continuousNodeArray.length = 0;
	            while (current !== last) {
	                continuousNodeArray.push(current);
	                current = current.nextSibling;
	            }
	            continuousNodeArray.push(last);
	        }
	    }
	    return continuousNodeArray;
	}
	
	function setOptionNodeSelectionState (optionNode, isSelected) {
	    // IE6 sometimes throws "unknown error" if you try to write to .selected directly, whereas Firefox struggles with setAttribute. Pick one based on browser.
	    if (ieVersion < 7)
	        optionNode.setAttribute("selected", isSelected);
	    else
	        optionNode.selected = isSelected;
	}
	
	
	function forceRefresh(node) {
	    // Workaround for an IE9 rendering bug - https://github.com/SteveSanderson/knockout/issues/209
	    if (ieVersion >= 9) {
	        // For text nodes and comment nodes (most likely virtual elements), we will have to refresh the container
	        var elem = node.nodeType == 1 ? node : node.parentNode;
	        if (elem.style)
	            elem.style.zoom = elem.style.zoom;
	    }
	}
	
	function ensureSelectElementIsRenderedCorrectly(selectElement) {
	    // Workaround for IE9 rendering bug - it doesn't reliably display all the text in dynamically-added select boxes unless you force it to re-render by updating the width.
	    // (See https://github.com/SteveSanderson/knockout/issues/312, http://stackoverflow.com/questions/5908494/select-only-shows-first-char-of-selected-option)
	    // Also fixes IE7 and IE8 bug that causes selects to be zero width if enclosed by 'if' or 'with'. (See issue #839)
	    if (ieVersion) {
	        var originalWidth = selectElement.style.width;
	        selectElement.style.width = 0;
	        selectElement.style.width = originalWidth;
	    }
	}
	
	/* eslint no-cond-assign: 0 */
	//
	// Virtual Elements
	//
	//
	// "Virtual elements" is an abstraction on top of the usual DOM API which understands the notion that comment nodes
	// may be used to represent hierarchy (in addition to the DOM's natural hierarchy).
	// If you call the DOM-manipulating functions on ko.virtualElements, you will be able to read and write the state
	// of that virtual hierarchy
	//
	// The point of all this is to support containerless templates (e.g., <!-- ko foreach:someCollection -->blah<!-- /ko -->)
	// without having to scatter special cases all over the binding and templating code.
	
	// IE 9 cannot reliably read the "nodeValue" property of a comment node (see https://github.com/SteveSanderson/knockout/issues/186)
	// but it does give them a nonstandard alternative property called "text" that it can read reliably. Other browsers don't have that property.
	// So, use node.text where available, and node.nodeValue elsewhere
	var commentNodesHaveTextProperty = document && document.createComment("test").text === "<!--test-->";
	
	var startCommentRegex = commentNodesHaveTextProperty ? /^<!--\s*ko(?:\s+([\s\S]+))?\s*-->$/ : /^\s*ko(?:\s+([\s\S]+))?\s*$/;
	var endCommentRegex =   commentNodesHaveTextProperty ? /^<!--\s*\/ko\s*-->$/ : /^\s*\/ko\s*$/;
	var htmlTagsWithOptionallyClosingChildren = { 'ul': true, 'ol': true };
	
	function isStartComment(node) {
	    return (node.nodeType == 8) && startCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);
	}
	
	function isEndComment(node) {
	    return (node.nodeType == 8) && endCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);
	}
	
	function getVirtualChildren(startComment, allowUnbalanced) {
	    var currentNode = startComment;
	    var depth = 1;
	    var children = [];
	    while (currentNode = currentNode.nextSibling) {
	        if (isEndComment(currentNode)) {
	            depth--;
	            if (depth === 0)
	                return children;
	        }
	
	        children.push(currentNode);
	
	        if (isStartComment(currentNode))
	            depth++;
	    }
	    if (!allowUnbalanced)
	        throw new Error("Cannot find closing comment tag to match: " + startComment.nodeValue);
	    return null;
	}
	
	function getMatchingEndComment(startComment, allowUnbalanced) {
	    var allVirtualChildren = getVirtualChildren(startComment, allowUnbalanced);
	    if (allVirtualChildren) {
	        if (allVirtualChildren.length > 0)
	            return allVirtualChildren[allVirtualChildren.length - 1].nextSibling;
	        return startComment.nextSibling;
	    } else
	        return null; // Must have no matching end comment, and allowUnbalanced is true
	}
	
	function getUnbalancedChildTags(node) {
	    // e.g., from <div>OK</div><!-- ko blah --><span>Another</span>, returns: <!-- ko blah --><span>Another</span>
	    //       from <div>OK</div><!-- /ko --><!-- /ko -->,             returns: <!-- /ko --><!-- /ko -->
	    var childNode = node.firstChild, captureRemaining = null;
	    if (childNode) {
	        do {
	            if (captureRemaining)                   // We already hit an unbalanced node and are now just scooping up all subsequent nodes
	                captureRemaining.push(childNode);
	            else if (isStartComment(childNode)) {
	                var matchingEndComment = getMatchingEndComment(childNode, /* allowUnbalanced: */ true);
	                if (matchingEndComment)             // It's a balanced tag, so skip immediately to the end of this virtual set
	                    childNode = matchingEndComment;
	                else
	                    captureRemaining = [childNode]; // It's unbalanced, so start capturing from this point
	            } else if (isEndComment(childNode)) {
	                captureRemaining = [childNode];     // It's unbalanced (if it wasn't, we'd have skipped over it already), so start capturing
	            }
	        } while (childNode = childNode.nextSibling);
	    }
	    return captureRemaining;
	}
	
	var allowedBindings = {};
	var hasBindingValue = isStartComment;
	
	function childNodes(node) {
	    return isStartComment(node) ? getVirtualChildren(node) : node.childNodes;
	}
	
	function emptyNode(node) {
	    if (!isStartComment(node))
	        emptyDomNode(node);
	    else {
	        var virtualChildren = childNodes(node);
	        for (var i = 0, j = virtualChildren.length; i < j; i++)
	            removeNode(virtualChildren[i]);
	    }
	}
	
	function setDomNodeChildren$1(node, childNodes) {
	    if (!isStartComment(node))
	        setDomNodeChildren$$1(node, childNodes);
	    else {
	        emptyNode(node);
	        var endCommentNode = node.nextSibling; // Must be the next sibling, as we just emptied the children
	        for (var i = 0, j = childNodes.length; i < j; i++)
	            endCommentNode.parentNode.insertBefore(childNodes[i], endCommentNode);
	    }
	}
	
	function prepend(containerNode, nodeToPrepend) {
	    if (!isStartComment(containerNode)) {
	        if (containerNode.firstChild)
	            containerNode.insertBefore(nodeToPrepend, containerNode.firstChild);
	        else
	            containerNode.appendChild(nodeToPrepend);
	    } else {
	        // Start comments must always have a parent and at least one following sibling (the end comment)
	        containerNode.parentNode.insertBefore(nodeToPrepend, containerNode.nextSibling);
	    }
	}
	
	function insertAfter(containerNode, nodeToInsert, insertAfterNode) {
	    if (!insertAfterNode) {
	        prepend(containerNode, nodeToInsert);
	    } else if (!isStartComment(containerNode)) {
	        // Insert after insertion point
	        if (insertAfterNode.nextSibling)
	            containerNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);
	        else
	            containerNode.appendChild(nodeToInsert);
	    } else {
	        // Children of start comments must always have a parent and at least one following sibling (the end comment)
	        containerNode.parentNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);
	    }
	}
	
	function firstChild(node) {
	    if (!isStartComment(node)) {
	        return node.firstChild;
	    }
	    if (!node.nextSibling || isEndComment(node.nextSibling)) {
	        return null;
	    }
	    return node.nextSibling;
	}
	
	
	function lastChild(node) {
	    var nextChild = firstChild(node),
	        lastChildNode;
	
	    do {
	        lastChildNode = nextChild;
	    } while (nextChild = nextSibling(nextChild));
	
	    return lastChildNode;
	}
	
	function nextSibling(node) {
	    if (isStartComment(node))
	        node = getMatchingEndComment(node);
	    if (node.nextSibling && isEndComment(node.nextSibling))
	        return null;
	    return node.nextSibling;
	}
	
	function previousSibling(node) {
	    var depth = 0;
	    do {
	        if (node.nodeType === 8) {
	            if (isStartComment(node)) {
	                if (--depth === 0) {
	                    return node;
	                }
	            } else if (isEndComment(node)) {
	                depth++;
	            }
	        } else {
	            if (depth === 0) { return node; }
	        }
	    } while (node = node.previousSibling);
	    return;
	}
	
	function virtualNodeBindingValue(node) {
	    var regexMatch = (commentNodesHaveTextProperty ? node.text : node.nodeValue).match(startCommentRegex);
	    return regexMatch ? regexMatch[1] : null;
	}
	
	function normaliseVirtualElementDomStructure(elementVerified) {
	    // Workaround for https://github.com/SteveSanderson/knockout/issues/155
	    // (IE <= 8 or IE 9 quirks mode parses your HTML weirdly, treating closing </li> tags as if they don't exist, thereby moving comment nodes
	    // that are direct descendants of <ul> into the preceding <li>)
	    if (!htmlTagsWithOptionallyClosingChildren[tagNameLower(elementVerified)])
	        return;
	
	    // Scan immediate children to see if they contain unbalanced comment tags. If they do, those comment tags
	    // must be intended to appear *after* that child, so move them there.
	    var childNode = elementVerified.firstChild;
	    if (childNode) {
	        do {
	            if (childNode.nodeType === 1) {
	                var unbalancedTags = getUnbalancedChildTags(childNode);
	                if (unbalancedTags) {
	                    // Fix up the DOM by moving the unbalanced tags to where they most likely were intended to be placed - *after* the child
	                    var nodeToInsertBefore = childNode.nextSibling;
	                    for (var i = 0; i < unbalancedTags.length; i++) {
	                        if (nodeToInsertBefore)
	                            elementVerified.insertBefore(unbalancedTags[i], nodeToInsertBefore);
	                        else
	                            elementVerified.appendChild(unbalancedTags[i]);
	                    }
	                }
	            }
	        } while (childNode = childNode.nextSibling);
	    }
	}
	
	
	var virtualElements = Object.freeze({
		startCommentRegex: startCommentRegex,
		endCommentRegex: endCommentRegex,
		isStartComment: isStartComment,
		isEndComment: isEndComment,
		getVirtualChildren: getVirtualChildren,
		allowedBindings: allowedBindings,
		hasBindingValue: hasBindingValue,
		childNodes: childNodes,
		emptyNode: emptyNode,
		setDomNodeChildren: setDomNodeChildren$1,
		prepend: prepend,
		insertAfter: insertAfter,
		firstChild: firstChild,
		lastChild: lastChild,
		nextSibling: nextSibling,
		previousSibling: previousSibling,
		virtualNodeBindingValue: virtualNodeBindingValue,
		normaliseVirtualElementDomStructure: normaliseVirtualElementDomStructure
	});
	
	//
	// DOM manipulation
	//
	/* eslint no-empty: 0 */
	function moveCleanedNodesToContainerElement(nodes) {
	    // Ensure it's a real array, as we're about to reparent the nodes and
	    // we don't want the underlying collection to change while we're doing that.
	    var nodesArray = makeArray(nodes);
	    var templateDocument = (nodesArray[0] && nodesArray[0].ownerDocument) || document;
	
	    var container = templateDocument.createElement('div');
	    for (var i = 0, j = nodesArray.length; i < j; i++) {
	        container.appendChild(cleanNode(nodesArray[i]));
	    }
	    return container;
	}
	
	function cloneNodes (nodesArray, shouldCleanNodes) {
	    for (var i = 0, j = nodesArray.length, newNodesArray = []; i < j; i++) {
	        var clonedNode = nodesArray[i].cloneNode(true);
	        newNodesArray.push(shouldCleanNodes ? cleanNode(clonedNode) : clonedNode);
	    }
	    return newNodesArray;
	}
	
	function setDomNodeChildren$$1 (domNode, childNodes$$1) {
	    emptyDomNode(domNode);
	    if (childNodes$$1) {
	        for (var i = 0, j = childNodes$$1.length; i < j; i++)
	            domNode.appendChild(childNodes$$1[i]);
	    }
	}
	
	function replaceDomNodes (nodeToReplaceOrNodeArray, newNodesArray) {
	    var nodesToReplaceArray = nodeToReplaceOrNodeArray.nodeType ? [nodeToReplaceOrNodeArray] : nodeToReplaceOrNodeArray;
	    if (nodesToReplaceArray.length > 0) {
	        var insertionPoint = nodesToReplaceArray[0];
	        var parent = insertionPoint.parentNode;
	        for (var i = 0, j = newNodesArray.length; i < j; i++)
	            parent.insertBefore(newNodesArray[i], insertionPoint);
	        for (i = 0, j = nodesToReplaceArray.length; i < j; i++) {
	            removeNode(nodesToReplaceArray[i]);
	        }
	    }
	}
	
	function setElementName(element, name) {
	    element.name = name;
	
	    // Workaround IE 6/7 issue
	    // - https://github.com/SteveSanderson/knockout/issues/197
	    // - http://www.matts411.com/post/setting_the_name_attribute_in_ie_dom/
	    if (ieVersion <= 7) {
	        try {
	            element.mergeAttributes(document.createElement("<input name='" + element.name + "'/>"), false);
	        }
	        catch(e) {} // For IE9 with doc mode "IE9 Standards" and browser mode "IE9 Compatibility View"
	    }
	}
	
	function setTextContent(element, textContent) {
	    var value = typeof textContent === 'function' ? textContent() : textContent;
	    if ((value === null) || (value === undefined))
	        value = "";
	
	    // We need there to be exactly one child: a text node.
	    // If there are no children, more than one, or if it's not a text node,
	    // we'll clear everything and create a single text node.
	    var innerTextNode = firstChild(element);
	    if (!innerTextNode || innerTextNode.nodeType != 3 || nextSibling(innerTextNode)) {
	        setDomNodeChildren$1(element, [element.ownerDocument.createTextNode(value)]);
	    } else {
	        innerTextNode.data = value;
	    }
	
	    forceRefresh(element);
	}
	
	function emptyDomNode (domNode) {
	    while (domNode.firstChild) {
	        removeNode(domNode.firstChild);
	    }
	}
	
	//
	// HTML-based manipulation
	//
	var none = [0, "", ""];
	var table = [1, "<table>", "</table>"];
	var tbody = [2, "<table><tbody>", "</tbody></table>"];
	var colgroup = [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"];
	var tr = [3, "<table><tbody><tr>", "</tr></tbody></table>"];
	var select = [1, "<select multiple='multiple'>", "</select>"];
	var fieldset = [1, "<fieldset>", "</fieldset>"];
	var map = [1, "<map>", "</map>"];
	var object = [1, "<object>", "</object>"];
	var lookup = {
	        'area': map,
	        'col': colgroup,
	        'colgroup': table,
	        'caption': table,
	        'legend': fieldset,
	        'thead': table,
	        'tbody': table,
	        'tfoot': table,
	        'tr': tbody,
	        'td': tr,
	        'th': tr,
	        'option': select,
	        'optgroup': select,
	        'param': object
	    };
	var supportsTemplateTag = 'content' in document.createElement('template');
	
	
	function getWrap(tags) {
	    var m = tags.match(/^<([a-z]+)[ >]/);
	    return (m && lookup[m[1]]) || none;
	}
	
	
	function simpleHtmlParse(html, documentContext) {
	    documentContext || (documentContext = document);
	    var windowContext = documentContext['parentWindow'] || documentContext['defaultView'] || window;
	
	    // Based on jQuery's "clean" function, but only accounting for table-related elements.
	    // If you have referenced jQuery, this won't be used anyway - KO will use jQuery's "clean" function directly
	
	    // Note that there's still an issue in IE < 9 whereby it will discard comment nodes that are the first child of
	    // a descendant node. For example: "<div><!-- mycomment -->abc</div>" will get parsed as "<div>abc</div>"
	    // This won't affect anyone who has referenced jQuery, and there's always the workaround of inserting a dummy node
	    // (possibly a text node) in front of the comment. So, KO does not attempt to workaround this IE issue automatically at present.
	
	    // Trim whitespace, otherwise indexOf won't work as expected
	    var tags = stringTrim(html).toLowerCase(), div = documentContext.createElement("div"),
	        wrap = getWrap(tags),
	        depth = wrap[0];
	
	    // Go to html and back, then peel off extra wrappers
	    // Note that we always prefix with some dummy text, because otherwise, IE<9 will strip out leading comment nodes in descendants. Total madness.
	    var markup = "ignored<div>" + wrap[1] + html + wrap[2] + "</div>";
	    if (typeof windowContext['innerShiv'] == "function") {
	        // Note that innerShiv is deprecated in favour of html5shiv. We should consider adding
	        // support for html5shiv (except if no explicit support is needed, e.g., if html5shiv
	        // somehow shims the native APIs so it just works anyway)
	        div.appendChild(windowContext['innerShiv'](markup));
	    } else {
	        div.innerHTML = markup;
	    }
	
	    // Move to the right depth
	    while (depth--)
	        div = div.lastChild;
	
	    return makeArray(div.lastChild.childNodes);
	}
	
	
	function templateHtmlParse(html, documentContext) {
	    if (!documentContext) { documentContext = document; }
	    var template = documentContext.createElement('template');
	    template.innerHTML = html;
	    return makeArray(template.content.childNodes);
	}
	
	
	function jQueryHtmlParse(html, documentContext) {
	    // jQuery's "parseHTML" function was introduced in jQuery 1.8.0 and is a documented public API.
	    if (jQueryInstance.parseHTML) {
	        return jQueryInstance.parseHTML(html, documentContext) || []; // Ensure we always return an array and never null
	    } else {
	        // For jQuery < 1.8.0, we fall back on the undocumented internal "clean" function.
	        var elems = jQueryInstance.clean([html], documentContext);
	
	        // As of jQuery 1.7.1, jQuery parses the HTML by appending it to some dummy parent nodes held in an in-memory document fragment.
	        // Unfortunately, it never clears the dummy parent nodes from the document fragment, so it leaks memory over time.
	        // Fix this by finding the top-most dummy parent element, and detaching it from its owner fragment.
	        if (elems && elems[0]) {
	            // Find the top-most parent element that's a direct child of a document fragment
	            var elem = elems[0];
	            while (elem.parentNode && elem.parentNode.nodeType !== 11 /* i.e., DocumentFragment */)
	                elem = elem.parentNode;
	            // ... then detach it
	            if (elem.parentNode)
	                elem.parentNode.removeChild(elem);
	        }
	
	        return elems;
	    }
	}
	
	
	/**
	 * parseHtmlFragment converts a string into an array of DOM Nodes.
	 * If supported, it uses <template>-tag parsing, falling back on
	 * jQuery parsing (if jQuery is present), and finally on a
	 * straightforward parser.
	 *
	 * @param  {string} html            To be parsed.
	 * @param  {Object} documentContext That owns the executing code.
	 * @return {[DOMNode]}              Parsed DOM Nodes
	 */
	function parseHtmlFragment(html, documentContext) {
	    // Prefer <template>-tag based HTML parsing.
	    return supportsTemplateTag ? templateHtmlParse(html, documentContext) :
	
	        // Benefit from jQuery's on old browsers, where possible
	        // NOTE: jQuery's HTML parsing fails on element names like tr-*.
	        // See: https://github.com/jquery/jquery/pull/1988
	        (jQueryInstance ? jQueryHtmlParse(html, documentContext) :
	
	        // ... otherwise, this simple logic will do in most common cases.
	        simpleHtmlParse(html, documentContext));
	}
	
	
	/**
	  * setHtml empties the node's contents, unwraps the HTML, and
	  * sets the node's HTML using jQuery.html or parseHtmlFragment
	  *
	  * @param {DOMNode} node Node in which HTML needs to be set
	  * @param {DOMNode} html HTML to be inserted in node
	  * @returns undefined
	  */
	function setHtml(node, html) {
	    emptyDomNode(node);
	
	    // There's few cases where we would want to display a stringified
	    // function, so we unwrap it.
	    if (typeof html === 'function') {
	        html = html();
	    }
	
	    if ((html !== null) && (html !== undefined)) {
	        if (typeof html !== 'string')
	            html = html.toString();
	
	        // If the browser supports <template> tags, prefer that, as
	        // it obviates all the complex workarounds of jQuery.
	        //
	        // However, jQuery contains a lot of sophisticated code to parse arbitrary HTML fragments,
	        // for example <tr> elements which are not normally allowed to exist on their own.
	        // If you've referenced jQuery (and template tags are not supported) we'll use that rather than duplicating its code.
	        if (jQueryInstance && !supportsTemplateTag) {
	            jQueryInstance(node).html(html);
	        } else {
	            // ... otherwise, use KO's own parsing logic.
	            var parsedNodes = parseHtmlFragment(html, node.ownerDocument);
	
	            if (node.nodeType === 8) {
	                if (html === null) {
	                    emptyNode(node);
	                } else {
	                    setDomNodeChildren$1(node, parsedNodes);
	                }
	            } else {
	                for (var i = 0; i < parsedNodes.length; i++)
	                    node.appendChild(parsedNodes[i]);
	            }
	        }
	    }
	}
	
	//
	// Memoization
	//
	var memos = {};
	
	function randomMax8HexChars() {
	    return (((1 + Math.random()) * 0x100000000) | 0).toString(16).substring(1);
	}
	
	function generateRandomId() {
	    return randomMax8HexChars() + randomMax8HexChars();
	}
	
	function findMemoNodes(rootNode, appendToArray) {
	    if (!rootNode)
	        return;
	    if (rootNode.nodeType == 8) {
	        var memoId = parseMemoText(rootNode.nodeValue);
	        if (memoId != null)
	            appendToArray.push({ domNode: rootNode, memoId: memoId });
	    } else if (rootNode.nodeType == 1) {
	        for (var i = 0, childNodes = rootNode.childNodes, j = childNodes.length; i < j; i++)
	            findMemoNodes(childNodes[i], appendToArray);
	    }
	}
	
	
	function memoize(callback) {
	    if (typeof callback != "function")
	        throw new Error("You can only pass a function to memoization.memoize()");
	    var memoId = generateRandomId();
	    memos[memoId] = callback;
	    return "<!--[ko_memo:" + memoId + "]-->";
	}
	
	function unmemoize(memoId, callbackParams) {
	    var callback = memos[memoId];
	    if (callback === undefined)
	        throw new Error("Couldn't find any memo with ID " + memoId + ". Perhaps it's already been unmemoized.");
	    try {
	        callback.apply(null, callbackParams || []);
	        return true;
	    }
	    finally { delete memos[memoId]; }
	}
	
	function unmemoizeDomNodeAndDescendants(domNode, extraCallbackParamsArray) {
	    var memos = [];
	    findMemoNodes(domNode, memos);
	    for (var i = 0, j = memos.length; i < j; i++) {
	        var node = memos[i].domNode;
	        var combinedParams = [node];
	        if (extraCallbackParamsArray)
	            arrayPushAll(combinedParams, extraCallbackParamsArray);
	        unmemoize(memos[i].memoId, combinedParams);
	        node.nodeValue = ""; // Neuter this node so we don't try to unmemoize it again
	        if (node.parentNode)
	            node.parentNode.removeChild(node); // If possible, erase it totally (not always possible - someone else might just hold a reference to it then call unmemoizeDomNodeAndDescendants again)
	    }
	}
	
	function parseMemoText(memoText) {
	    var match = memoText.match(/^\[ko_memo\:(.*?)\]$/);
	    return match ? match[1] : null;
	}
	
	
	var memoization = Object.freeze({
		memoize: memoize,
		unmemoize: unmemoize,
		unmemoizeDomNodeAndDescendants: unmemoizeDomNodeAndDescendants,
		parseMemoText: parseMemoText
	});
	
	//
	//  Tasks Micro-scheduler
	//  ===
	//
	/* eslint no-cond-assign: 0 */
	var taskQueue = [];
	var taskQueueLength = 0;
	var nextHandle = 1;
	var nextIndexToProcess = 0;
	
	if (window.MutationObserver && !(window.navigator && window.navigator.standalone)) {
	    // Chrome 27+, Firefox 14+, IE 11+, Opera 15+, Safari 6.1+
	    // From https://github.com/petkaantonov/bluebird * Copyright (c) 2014 Petka Antonov * License: MIT
	    options.taskScheduler = (function (callback) {
	        var div = document.createElement("div");
	        new MutationObserver(callback).observe(div, {attributes: true});
	        return function () { div.classList.toggle("foo"); };
	    })(scheduledProcess);
	} else if (document && "onreadystatechange" in document.createElement("script")) {
	    // IE 6-10
	    // From https://github.com/YuzuJS/setImmediate * Copyright (c) 2012 Barnesandnoble.com, llc, Donavon West, and Domenic Denicola * License: MIT
	    options.taskScheduler = function (callback) {
	        var script = document.createElement("script");
	        script.onreadystatechange = function () {
	            script.onreadystatechange = null;
	            document.documentElement.removeChild(script);
	            script = null;
	            callback();
	        };
	        document.documentElement.appendChild(script);
	    };
	} else {
	    options.taskScheduler = function (callback) {
	        setTimeout(callback, 0);
	    };
	}
	
	function processTasks() {
	    if (taskQueueLength) {
	        // Each mark represents the end of a logical group of tasks and the number of these groups is
	        // limited to prevent unchecked recursion.
	        var mark = taskQueueLength, countMarks = 0;
	
	        // nextIndexToProcess keeps track of where we are in the queue; processTasks can be called recursively without issue
	        for (var task; nextIndexToProcess < taskQueueLength; ) {
	            if (task = taskQueue[nextIndexToProcess++]) {
	                if (nextIndexToProcess > mark) {
	                    if (++countMarks >= 5000) {
	                        nextIndexToProcess = taskQueueLength;   // skip all tasks remaining in the queue since any of them could be causing the recursion
	                        deferError(Error("'Too much recursion' after processing " + countMarks + " task groups."));
	                        break;
	                    }
	                    mark = taskQueueLength;
	                }
	                try {
	                    task();
	                } catch (ex) {
	                    deferError(ex);
	                }
	            }
	        }
	    }
	}
	
	function scheduledProcess() {
	    processTasks();
	
	    // Reset the queue
	    nextIndexToProcess = taskQueueLength = taskQueue.length = 0;
	}
	
	function scheduleTaskProcessing() {
	    options.taskScheduler(scheduledProcess);
	}
	
	
	function schedule(func) {
	    if (!taskQueueLength) {
	        scheduleTaskProcessing();
	    }
	
	    taskQueue[taskQueueLength++] = func;
	    return nextHandle++;
	}
	
	function cancel(handle) {
	    var index = handle - (nextHandle - taskQueueLength);
	    if (index >= nextIndexToProcess && index < taskQueueLength) {
	        taskQueue[index] = null;
	    }
	}
	
	// For testing only: reset the queue and return the previous queue length
	function resetForTesting() {
	    var length = taskQueueLength - nextIndexToProcess;
	    nextIndexToProcess = taskQueueLength = taskQueue.length = 0;
	    return length;
	}
	
	
	
	
	var tasks = Object.freeze({
		schedule: schedule,
		cancel: cancel,
		resetForTesting: resetForTesting,
		runEarly: processTasks
	});
	
	/*
	  tko.util
	  ===
	
	
	*/
	
	// Sub-Modules;
	
	
	
	var utils = Object.freeze({
		tasks: tasks,
		virtualElements: virtualElements,
		domData: data,
		memoization: memoization,
		jQuerySetInstance: jQuerySetInstance,
		options: options,
		arrayForEach: arrayForEach,
		arrayIndexOf: arrayIndexOf,
		arrayFirst: arrayFirst,
		arrayRemoveItem: arrayRemoveItem,
		arrayGetDistinctValues: arrayGetDistinctValues,
		arrayMap: arrayMap,
		arrayFilter: arrayFilter,
		arrayPushAll: arrayPushAll,
		addOrRemoveItem: addOrRemoveItem,
		makeArray: makeArray,
		range: range,
		findMovesInArrayComparison: findMovesInArrayComparison,
		compareArrays: compareArrays,
		throttle: throttle,
		debounce: debounce,
		catchFunctionErrors: catchFunctionErrors,
		deferError: deferError,
		safeSetTimeout: safeSetTimeout,
		ieVersion: ieVersion,
		isIe6: isIe6,
		isIe7: isIe7,
		extend: extend,
		objectForEach: objectForEach,
		objectMap: objectMap,
		getObjectOwnProperty: getObjectOwnProperty,
		clonePlainObjectDeep: clonePlainObjectDeep,
		canSetPrototype: canSetPrototype,
		setPrototypeOf: setPrototypeOf,
		setPrototypeOfOrExtend: setPrototypeOfOrExtend,
		hasPrototype: hasPrototype,
		stringTrim: stringTrim,
		stringStartsWith: stringStartsWith,
		parseJson: parseJson,
		stringifyJson: stringifyJson,
		useSymbols: useSymbols,
		createSymbolOrString: createSymbolOrString,
		toggleDomNodeCssClass: toggleDomNodeCssClass,
		registerEventHandler: registerEventHandler,
		triggerEvent: triggerEvent,
		domNodeIsContainedBy: domNodeIsContainedBy,
		domNodeIsAttachedToDocument: domNodeIsAttachedToDocument,
		anyDomNodeIsAttachedToDocument: anyDomNodeIsAttachedToDocument,
		tagNameLower: tagNameLower,
		isDomElement: isDomElement,
		isDocumentFragment: isDocumentFragment,
		moveCleanedNodesToContainerElement: moveCleanedNodesToContainerElement,
		cloneNodes: cloneNodes,
		setDomNodeChildren: setDomNodeChildren$$1,
		replaceDomNodes: replaceDomNodes,
		setElementName: setElementName,
		setTextContent: setTextContent,
		emptyDomNode: emptyDomNode,
		fixUpContinuousNodeArray: fixUpContinuousNodeArray,
		setOptionNodeSelectionState: setOptionNodeSelectionState,
		forceRefresh: forceRefresh,
		ensureSelectElementIsRenderedCorrectly: ensureSelectElementIsRenderedCorrectly,
		parseHtmlFragment: parseHtmlFragment,
		setHtml: setHtml,
		addDisposeCallback: addDisposeCallback,
		removeDisposeCallback: removeDisposeCallback,
		cleanNode: cleanNode,
		removeNode: removeNode,
		otherNodeCleanerFunctions: otherNodeCleanerFunctions,
		cleanjQueryData: cleanjQueryData
	});
	
	//
	//  Defer Updates
	//  ===
	//
	function deferUpdates(target) {
	    if (!target._deferUpdates) {
	        target._deferUpdates = true;
	        target.limit(function (callback) {
	            var handle;
	            return function () {
	                cancel(handle);
	                handle = schedule(callback);
	                target.notifySubscribers(undefined, 'dirty');
	            };
	        });
	    }
	}
	
	//
	// Observable extenders
	// ---
	//
	var primitiveTypes = {
	    'undefined': 1, 'boolean': 1, 'number': 1, 'string': 1
	};
	
	
	function valuesArePrimitiveAndEqual(a, b) {
	    var oldValueIsPrimitive = (a === null) || (typeof(a) in primitiveTypes);
	    return oldValueIsPrimitive ? (a === b) : false;
	}
	
	
	function applyExtenders(requestedExtenders) {
	    var target = this;
	    if (requestedExtenders) {
	        objectForEach(requestedExtenders, function(key, value) {
	            var extenderHandler = extenders[key];
	            if (typeof extenderHandler == 'function') {
	                target = extenderHandler(target, value) || target;
	            } else {
	                options.onError(new Error("Extender not found: " + key));
	            }
	        });
	    }
	    return target;
	}
	
	/*
	                --- DEFAULT EXTENDERS ---
	 */
	
	
	// Change when notifications are published.
	function notify(target, notifyWhen) {
	    target.equalityComparer = notifyWhen == "always" ?
	        null :  // null equalityComparer means to always notify
	        valuesArePrimitiveAndEqual;
	}
	
	
	function deferred(target, option) {
	    if (option !== true) {
	        throw new Error('The \'deferred\' extender only accepts the value \'true\', because it is not supported to turn deferral off once enabled.');
	    }
	    deferUpdates(target);
	}
	
	
	function rateLimit(target, options$$1) {
	    var timeout, method, limitFunction;
	
	    if (typeof options$$1 == 'number') {
	        timeout = options$$1;
	    } else {
	        timeout = options$$1.timeout;
	        method = options$$1.method;
	    }
	
	    // rateLimit supersedes deferred updates
	    target._deferUpdates = false;
	
	    limitFunction = method == 'notifyWhenChangesStop' ? debounce : throttle;
	
	    target.limit(function(callback) {
	        return limitFunction(callback, timeout);
	    });
	}
	
	
	var extenders = {
	    notify: notify,
	    deferred: deferred,
	    rateLimit: rateLimit
	};
	
	/* eslint no-cond-assign: 0 */
	function subscription(target, callback, disposeCallback) {
	    this._target = target;
	    this.callback = callback;
	    this.disposeCallback = disposeCallback;
	    this.isDisposed = false;
	}
	
	subscription.prototype.dispose = function () {
	    this.isDisposed = true;
	    this.disposeCallback();
	};
	
	function subscribable() {
	    setPrototypeOfOrExtend(this, ko_subscribable_fn);
	    ko_subscribable_fn.init(this);
	}
	
	var defaultEvent = "change";
	
	
	var ko_subscribable_fn = {
	    init: function(instance) {
	        instance._subscriptions = {};
	        instance._versionNumber = 1;
	    },
	
	    subscribe: function (callback, callbackTarget, event) {
	        var self = this;
	
	        event = event || defaultEvent;
	        var boundCallback = callbackTarget ? callback.bind(callbackTarget) : callback;
	
	        var subscriptionInstance = new subscription(self, boundCallback, function () {
	            arrayRemoveItem(self._subscriptions[event], subscriptionInstance);
	            if (self.afterSubscriptionRemove)
	                self.afterSubscriptionRemove(event);
	        });
	
	        if (self.beforeSubscriptionAdd)
	            self.beforeSubscriptionAdd(event);
	
	        if (!self._subscriptions[event])
	            self._subscriptions[event] = [];
	        self._subscriptions[event].push(subscriptionInstance);
	
	        return subscriptionInstance;
	    },
	
	    notifySubscribers: function (valueToNotify, event) {
	        event = event || defaultEvent;
	        if (event === defaultEvent) {
	            this.updateVersion();
	        }
	        if (this.hasSubscriptionsForEvent(event)) {
	            try {
	                begin(); // Begin suppressing dependency detection (by setting the top frame to undefined)
	                for (var a = this._subscriptions[event].slice(0), i = 0, subscriptionInstance; subscriptionInstance = a[i]; ++i) {
	                    // In case a subscription was disposed during the arrayForEach cycle, check
	                    // for isDisposed on each subscription before invoking its callback
	                    if (!subscriptionInstance.isDisposed)
	                        subscriptionInstance.callback(valueToNotify);
	                }
	            } finally {
	                end(); // End suppressing dependency detection
	            }
	        }
	    },
	
	    getVersion: function () {
	        return this._versionNumber;
	    },
	
	    hasChanged: function (versionToCheck) {
	        return this.getVersion() !== versionToCheck;
	    },
	
	    updateVersion: function () {
	        ++this._versionNumber;
	    },
	
	    hasSubscriptionsForEvent: function(event) {
	        return this._subscriptions[event] && this._subscriptions[event].length;
	    },
	
	    getSubscriptionsCount: function (event) {
	        if (event) {
	            return this._subscriptions[event] && this._subscriptions[event].length || 0;
	        } else {
	            var total = 0;
	            objectForEach(this._subscriptions, function(eventName, subscriptions) {
	                if (eventName !== 'dirty')
	                    total += subscriptions.length;
	            });
	            return total;
	        }
	    },
	
	    isDifferent: function(oldValue, newValue) {
	        return !this.equalityComparer ||
	               !this.equalityComparer(oldValue, newValue);
	    },
	
	    extend: applyExtenders
	};
	
	
	// For browsers that support proto assignment, we overwrite the prototype of each
	// observable instance. Since observables are functions, we need Function.prototype
	// to still be in the prototype chain.
	if (canSetPrototype) {
	    setPrototypeOf(ko_subscribable_fn, Function.prototype);
	}
	
	subscribable.fn = ko_subscribable_fn;
	
	
	function isSubscribable(instance) {
	    return instance != null && typeof instance.subscribe == "function" && typeof instance.notifySubscribers == "function";
	}
	
	//
	// dependencyDetection
	// ---
	//
	// In KO 3.x, dependencyDetection was also known as computedContext.
	//
	var outerFrames = [];
	var currentFrame;
	var lastId = 0;
	
	// Return a unique ID that can be assigned to an observable for dependency tracking.
	// Theoretically, you could eventually overflow the number storage size, resulting
	// in duplicate IDs. But in JavaScript, the largest exact integral value is 2^53
	// or 9,007,199,254,740,992. If you created 1,000,000 IDs per second, it would
	// take over 285 years to reach that number.
	// Reference http://blog.vjeux.com/2010/javascript/javascript-max_int-number-limits.html
	function getId() {
	    return ++lastId;
	}
	
	function begin(options) {
	    outerFrames.push(currentFrame);
	    currentFrame = options;
	}
	
	function end() {
	    currentFrame = outerFrames.pop();
	}
	
	
	function registerDependency(subscribable$$1) {
	    if (currentFrame) {
	        if (!isSubscribable(subscribable$$1))
	            throw new Error("Only subscribable things can act as dependencies");
	        currentFrame.callback.call(currentFrame.callbackTarget, subscribable$$1, subscribable$$1._id || (subscribable$$1._id = getId()));
	    }
	}
	
	function ignore(callback, callbackTarget, callbackArgs) {
	    try {
	        begin();
	        return callback.apply(callbackTarget, callbackArgs || []);
	    } finally {
	        end();
	    }
	}
	
	function getDependenciesCount() {
	    if (currentFrame)
	        return currentFrame.computed.getDependenciesCount();
	}
	
	function isInitial() {
	    if (currentFrame)
	        return currentFrame.isInitial;
	}
	
	
	
	
	var dependencyDetection = Object.freeze({
		begin: begin,
		end: end,
		registerDependency: registerDependency,
		ignore: ignore,
		getDependenciesCount: getDependenciesCount,
		isInitial: isInitial,
		ignoreDependencies: ignore
	});
	
	//
	//  Observable values
	//  ---
	//
	var observableLatestValue = createSymbolOrString('_latestValue');
	
	
	function observable(initialValue) {
	    function Observable() {
	        if (arguments.length > 0) {
	            // Write
	
	            // Ignore writes if the value hasn't changed
	            if (Observable.isDifferent(Observable[observableLatestValue], arguments[0])) {
	                Observable.valueWillMutate();
	                Observable[observableLatestValue] = arguments[0];
	                Observable.valueHasMutated();
	            }
	            return this; // Permits chained assignments
	        }
	        else {
	            // Read
	            registerDependency(Observable); // The caller only needs to be notified of changes if they did a "read" operation
	            return Observable[observableLatestValue];
	        }
	    }
	
	    Observable[observableLatestValue] = initialValue;
	
	    // Inherit from 'subscribable'
	    if (!canSetPrototype) {
	        // 'subscribable' won't be on the prototype chain unless we put it there directly
	        extend(Observable, subscribable.fn);
	    }
	    subscribable.fn.init(Observable);
	
	    // Inherit from 'observable'
	    setPrototypeOfOrExtend(Observable, observable.fn);
	
	    if (options.deferUpdates) {
	        deferUpdates(Observable);
	    }
	
	    return Observable;
	}
	
	// Define prototype for observables
	observable.fn = {
	    equalityComparer: valuesArePrimitiveAndEqual,
	    peek: function() { return this[observableLatestValue]; },
	    valueHasMutated: function () { this.notifySubscribers(this[observableLatestValue]); },
	    valueWillMutate: function () {
	        this.notifySubscribers(this[observableLatestValue], 'beforeChange');
	    }
	};
	
	
	
	// Moved out of "limit" to avoid the extra closure
	function limitNotifySubscribers(value, event) {
	    if (!event || event === defaultEvent) {
	        this._limitChange(value);
	    } else if (event === 'beforeChange') {
	        this._limitBeforeChange(value);
	    } else {
	        this._origNotifySubscribers(value, event);
	    }
	}
	
	// Add `limit` function to the subscribable prototype
	subscribable.fn.limit = function limit(limitFunction) {
	    var self = this, selfIsObservable = isObservable(self),
	        ignoreBeforeChange, previousValue, pendingValue, beforeChange = 'beforeChange';
	
	    if (!self._origNotifySubscribers) {
	        self._origNotifySubscribers = self.notifySubscribers;
	        self.notifySubscribers = limitNotifySubscribers;
	    }
	
	    var finish = limitFunction(function() {
	        self._notificationIsPending = false;
	
	        // If an observable provided a reference to itself, access it to get the latest value.
	        // This allows computed observables to delay calculating their value until needed.
	        if (selfIsObservable && pendingValue === self) {
	            pendingValue = self();
	        }
	        ignoreBeforeChange = false;
	        if (self.isDifferent(previousValue, pendingValue)) {
	            self._origNotifySubscribers(previousValue = pendingValue);
	        }
	    });
	
	    self._limitChange = function(value) {
	        self._notificationIsPending = ignoreBeforeChange = true;
	        pendingValue = value;
	        finish();
	    };
	    self._limitBeforeChange = function(value) {
	        if (!ignoreBeforeChange) {
	            previousValue = value;
	            self._origNotifySubscribers(value, beforeChange);
	        }
	    };
	};
	
	
	// Note that for browsers that don't support proto assignment, the
	// inheritance chain is created manually in the observable constructor
	if (canSetPrototype) {
	    setPrototypeOf(observable.fn, subscribable.fn);
	}
	
	var protoProperty$1 = observable.protoProperty = options.protoProperty;
	observable.fn[protoProperty$1] = observable;
	
	function isObservable(instance) {
	    return hasPrototype(instance, observable);
	}
	
	function unwrap(value) {
	    return isObservable(value) ? value() : value;
	}
	
	function peek(value) {
	    return isObservable(value) ? value.peek() : value;
	}
	
	function isWriteableObservable(instance) {
	    // Observable
	    if ((typeof instance == 'function') && instance[protoProperty$1] === observable)
	        return true;
	    // Writeable dependent observable
	    if ((typeof instance == 'function') /* && (instance[protoProperty] === ko.dependentObservable)*/ && (instance.hasWriteFunction))
	        return true;
	    // Anything else
	    return false;
	}
	
	//
	// Observable Array - Change Tracking Extender
	// ---
	//
	/* eslint no-fallthrough: 0*/
	
	var arrayChangeEventName = 'arrayChange';
	
	
	function trackArrayChanges(target, options$$1) {
	    // Use the provided options--each call to trackArrayChanges overwrites the previously set options
	    target.compareArrayOptions = {};
	    if (options$$1 && typeof options$$1 == "object") {
	        extend(target.compareArrayOptions, options$$1);
	    }
	    target.compareArrayOptions.sparse = true;
	
	    // Only modify the target observable once
	    if (target.cacheDiffForKnownOperation) {
	        return;
	    }
	    var trackingChanges = false,
	        cachedDiff = null,
	        arrayChangeSubscription,
	        pendingNotifications = 0,
	        underlyingBeforeSubscriptionAddFunction = target.beforeSubscriptionAdd,
	        underlyingAfterSubscriptionRemoveFunction = target.afterSubscriptionRemove;
	
	    // Watch "subscribe" calls, and for array change events, ensure change tracking is enabled
	    target.beforeSubscriptionAdd = function (event) {
	        if (underlyingBeforeSubscriptionAddFunction)
	            underlyingBeforeSubscriptionAddFunction.call(target, event);
	        if (event === arrayChangeEventName) {
	            trackChanges();
	        }
	    };
	
	    // Watch "dispose" calls, and for array change events, ensure change tracking is disabled when all are disposed
	    target.afterSubscriptionRemove = function (event) {
	        if (underlyingAfterSubscriptionRemoveFunction)
	            underlyingAfterSubscriptionRemoveFunction.call(target, event);
	        if (event === arrayChangeEventName && !target.hasSubscriptionsForEvent(arrayChangeEventName)) {
	            arrayChangeSubscription.dispose();
	            trackingChanges = false;
	        }
	    };
	
	    function trackChanges() {
	        // Calling 'trackChanges' multiple times is the same as calling it once
	        if (trackingChanges) {
	            return;
	        }
	
	        trackingChanges = true;
	
	        // Intercept "notifySubscribers" to track how many times it was called.
	        var underlyingNotifySubscribersFunction = target['notifySubscribers'];
	        target['notifySubscribers'] = function(valueToNotify, event) {
	            if (!event || event === defaultEvent) {
	                ++pendingNotifications;
	            }
	            return underlyingNotifySubscribersFunction.apply(this, arguments);
	        };
	
	        // Each time the array changes value, capture a clone so that on the next
	        // change it's possible to produce a diff
	        var previousContents = [].concat(target.peek() || []);
	        cachedDiff = null;
	        arrayChangeSubscription = target.subscribe(function(currentContents) {
	            // Make a copy of the current contents and ensure it's an array
	            currentContents = [].concat(currentContents || []);
	
	            // Compute the diff and issue notifications, but only if someone is listening
	            if (target.hasSubscriptionsForEvent(arrayChangeEventName)) {
	                var changes = getChanges(previousContents, currentContents);
	            }
	
	            // Eliminate references to the old, removed items, so they can be GCed
	            previousContents = currentContents;
	            cachedDiff = null;
	            pendingNotifications = 0;
	
	            if (changes && changes.length) {
	                target['notifySubscribers'](changes, arrayChangeEventName);
	            }
	        });
	    }
	
	    function getChanges(previousContents, currentContents) {
	        // We try to re-use cached diffs.
	        // The scenarios where pendingNotifications > 1 are when using rate-limiting or the Deferred Updates
	        // plugin, which without this check would not be compatible with arrayChange notifications. Normally,
	        // notifications are issued immediately so we wouldn't be queueing up more than one.
	        if (!cachedDiff || pendingNotifications > 1) {
	            cachedDiff = trackArrayChanges.compareArrays(previousContents, currentContents, target.compareArrayOptions);
	        }
	
	        return cachedDiff;
	    }
	
	    target.cacheDiffForKnownOperation = function(rawArray, operationName, args) {
	        var index, argsIndex;
	        // Only run if we're currently tracking changes for this observable array
	        // and there aren't any pending deferred notifications.
	        if (!trackingChanges || pendingNotifications) {
	            return;
	        }
	        var diff = [],
	            arrayLength = rawArray.length,
	            argsLength = args.length,
	            offset = 0;
	
	        function pushDiff(status, value, index) {
	            return diff[diff.length] = { 'status': status, 'value': value, 'index': index };
	        }
	        switch (operationName) {
	        case 'push':
	            offset = arrayLength;
	        case 'unshift':
	            for (index = 0; index < argsLength; index++) {
	                pushDiff('added', args[index], offset + index);
	            }
	            break;
	
	        case 'pop':
	            offset = arrayLength - 1;
	        case 'shift':
	            if (arrayLength) {
	                pushDiff('deleted', rawArray[offset], offset);
	            }
	            break;
	
	        case 'splice':
	            // Negative start index means 'from end of array'. After that we clamp to [0...arrayLength].
	            // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice
	            var startIndex = Math.min(Math.max(0, args[0] < 0 ? arrayLength + args[0] : args[0]), arrayLength),
	                endDeleteIndex = argsLength === 1 ? arrayLength : Math.min(startIndex + (args[1] || 0), arrayLength),
	                endAddIndex = startIndex + argsLength - 2,
	                endIndex = Math.max(endDeleteIndex, endAddIndex),
	                additions = [], deletions = [];
	            for (index = startIndex, argsIndex = 2; index < endIndex; ++index, ++argsIndex) {
	                if (index < endDeleteIndex)
	                    deletions.push(pushDiff('deleted', rawArray[index], index));
	                if (index < endAddIndex)
	                    additions.push(pushDiff('added', args[argsIndex], index));
	            }
	            findMovesInArrayComparison(deletions, additions);
	            break;
	
	        default:
	            return;
	        }
	        cachedDiff = diff;
	    };
	}
	
	
	// Expose compareArrays for testing.
	trackArrayChanges.compareArrays = compareArrays;
	
	
	// Add the trackArrayChanges extender so we can use
	// obs.extend({ trackArrayChanges: true })
	extenders.trackArrayChanges = trackArrayChanges;
	
	//
	// Observable Arrays
	// ===
	//
	function observableArray(initialValues) {
	    initialValues = initialValues || [];
	
	    if (typeof initialValues != 'object' || !('length' in initialValues))
	        throw new Error("The argument passed when initializing an observable array must be an array, or null, or undefined.");
	
	    var result = observable(initialValues);
	    setPrototypeOfOrExtend(result, observableArray.fn);
	    trackArrayChanges(result);
	        // ^== result.extend({ trackArrayChanges: true })
	    return result;
	}
	
	observableArray.fn = {
	    remove: function (valueOrPredicate) {
	        var underlyingArray = this.peek();
	        var removedValues = [];
	        var predicate = typeof valueOrPredicate == "function" && !isObservable(valueOrPredicate) ? valueOrPredicate : function (value) { return value === valueOrPredicate; };
	        for (var i = 0; i < underlyingArray.length; i++) {
	            var value = underlyingArray[i];
	            if (predicate(value)) {
	                if (removedValues.length === 0) {
	                    this.valueWillMutate();
	                }
	                removedValues.push(value);
	                underlyingArray.splice(i, 1);
	                i--;
	            }
	        }
	        if (removedValues.length) {
	            this.valueHasMutated();
	        }
	        return removedValues;
	    },
	
	    removeAll: function (arrayOfValues) {
	        // If you passed zero args, we remove everything
	        if (arrayOfValues === undefined) {
	            var underlyingArray = this.peek();
	            var allValues = underlyingArray.slice(0);
	            this.valueWillMutate();
	            underlyingArray.splice(0, underlyingArray.length);
	            this.valueHasMutated();
	            return allValues;
	        }
	        // If you passed an arg, we interpret it as an array of entries to remove
	        if (!arrayOfValues)
	            return [];
	        return this['remove'](function (value) {
	            return arrayIndexOf(arrayOfValues, value) >= 0;
	        });
	    },
	
	    destroy: function (valueOrPredicate) {
	        var underlyingArray = this.peek();
	        var predicate = typeof valueOrPredicate == "function" && !isObservable(valueOrPredicate) ? valueOrPredicate : function (value) { return value === valueOrPredicate; };
	        this.valueWillMutate();
	        for (var i = underlyingArray.length - 1; i >= 0; i--) {
	            var value = underlyingArray[i];
	            if (predicate(value))
	                underlyingArray[i]["_destroy"] = true;
	        }
	        this.valueHasMutated();
	    },
	
	    destroyAll: function (arrayOfValues) {
	        // If you passed zero args, we destroy everything
	        if (arrayOfValues === undefined)
	            return this.destroy(function() { return true; });
	
	        // If you passed an arg, we interpret it as an array of entries to destroy
	        if (!arrayOfValues)
	            return [];
	        return this.destroy(function (value) {
	            return arrayIndexOf(arrayOfValues, value) >= 0;
	        });
	    },
	
	    indexOf: function (item) {
	        var underlyingArray = this();
	        return arrayIndexOf(underlyingArray, item);
	    },
	
	    replace: function(oldItem, newItem) {
	        var index = this.indexOf(oldItem);
	        if (index >= 0) {
	            this.valueWillMutate();
	            this.peek()[index] = newItem;
	            this.valueHasMutated();
	        }
	    }
	};
	
	
	// Note that for browsers that don't support proto assignment, the
	// inheritance chain is created manually in the ko.observableArray constructor
	if (canSetPrototype) {
	    setPrototypeOf(observableArray.fn, observable.fn);
	}
	
	// Populate ko.observableArray.fn with read/write functions from native arrays
	// Important: Do not add any additional functions here that may reasonably be used to *read* data from the array
	// because we'll eval them without causing subscriptions, so ko.computed output could end up getting stale
	arrayForEach(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function (methodName) {
	    observableArray.fn[methodName] = function () {
	        // Use "peek" to avoid creating a subscription in any computed that we're executing in the context of
	        // (for consistency with mutating regular observables)
	        var underlyingArray = this.peek();
	        this.valueWillMutate();
	        this.cacheDiffForKnownOperation(underlyingArray, methodName, arguments);
	        var methodCallResult = underlyingArray[methodName].apply(underlyingArray, arguments);
	        this.valueHasMutated();
	        // The native sort and reverse methods return a reference to the array, but it makes more sense to return the observable array instead.
	        return methodCallResult === underlyingArray ? this : methodCallResult;
	    };
	});
	
	// Populate ko.observableArray.fn with read-only functions from native arrays
	arrayForEach(["slice"], function (methodName) {
	    observableArray.fn[methodName] = function () {
	        var underlyingArray = this();
	        return underlyingArray[methodName].apply(underlyingArray, arguments);
	    };
	});
	
	//
	// Helpers
	// ---
	// toJS & toJSON
	//
	var maxNestedObservableDepth = 10; // Escape the (unlikely) pathalogical case where an observable's current value is itself (or similar reference cycle)
	
	function toJS(rootObject) {
	    if (arguments.length == 0)
	        throw new Error("When calling ko.toJS, pass the object you want to convert.");
	
	    // We just unwrap everything at every level in the object graph
	    return mapJsObjectGraph(rootObject, function(valueToMap) {
	        // Loop because an observable's value might in turn be another observable wrapper
	        for (var i = 0; isObservable(valueToMap) && (i < maxNestedObservableDepth); i++)
	            valueToMap = valueToMap();
	        return valueToMap;
	    });
	}
	
	function toJSON(rootObject, replacer, space) {     // replacer and space are optional
	    var plainJavaScriptObject = toJS(rootObject);
	    return stringifyJson(plainJavaScriptObject, replacer, space);
	}
	
	function mapJsObjectGraph(rootObject, mapInputCallback, visitedObjects) {
	    visitedObjects = visitedObjects || new objectLookup();
	
	    rootObject = mapInputCallback(rootObject);
	    var canHaveProperties = (typeof rootObject == "object") && (rootObject !== null) && (rootObject !== undefined) && (!(rootObject instanceof RegExp)) && (!(rootObject instanceof Date)) && (!(rootObject instanceof String)) && (!(rootObject instanceof Number)) && (!(rootObject instanceof Boolean));
	    if (!canHaveProperties)
	        return rootObject;
	
	    var outputProperties = rootObject instanceof Array ? [] : {};
	    visitedObjects.save(rootObject, outputProperties);
	
	    visitPropertiesOrArrayEntries(rootObject, function(indexer) {
	        var propertyValue = mapInputCallback(rootObject[indexer]);
	
	        switch (typeof propertyValue) {
	        case "boolean":
	        case "number":
	        case "string":
	        case "function":
	            outputProperties[indexer] = propertyValue;
	            break;
	        case "object":
	        case "undefined":
	            var previouslyMappedValue = visitedObjects.get(propertyValue);
	            outputProperties[indexer] = (previouslyMappedValue !== undefined)
	                ? previouslyMappedValue
	                : mapJsObjectGraph(propertyValue, mapInputCallback, visitedObjects);
	            break;
	        }
	    });
	
	    return outputProperties;
	}
	
	function visitPropertiesOrArrayEntries(rootObject, visitorCallback) {
	    if (rootObject instanceof Array) {
	        for (var i = 0; i < rootObject.length; i++)
	            visitorCallback(i);
	
	        // For arrays, also respect toJSON property for custom mappings (fixes #278)
	        if (typeof rootObject['toJSON'] == 'function')
	            visitorCallback('toJSON');
	    } else {
	        for (var propertyName in rootObject) {
	            visitorCallback(propertyName);
	        }
	    }
	}
	
	function objectLookup() {
	    this.keys = [];
	    this.values = [];
	}
	
	objectLookup.prototype = {
	    constructor: objectLookup,
	    save: function(key, value) {
	        var existingIndex = arrayIndexOf(this.keys, key);
	        if (existingIndex >= 0)
	            this.values[existingIndex] = value;
	        else {
	            this.keys.push(key);
	            this.values.push(value);
	        }
	    },
	    get: function(key) {
	        var existingIndex = arrayIndexOf(this.keys, key);
	        return (existingIndex >= 0) ? this.values[existingIndex] : undefined;
	    }
	};
	
	//
	// Observables.
	// ---
	//
	// The following are added to the root `[t]ko` object.
	//
	
	//
	// Computed Observable Values
	//
	// (before tko, `computed` was also known as `dependentObservable`)
	//
	var computedState = createSymbolOrString('_state');
	
	function computed(evaluatorFunctionOrOptions, evaluatorFunctionTarget, options$$1) {
	    if (typeof evaluatorFunctionOrOptions === "object") {
	        // Single-parameter syntax - everything is on this "options" param
	        options$$1 = evaluatorFunctionOrOptions;
	    } else {
	        // Multi-parameter syntax - construct the options according to the params passed
	        options$$1 = options$$1 || {};
	        if (evaluatorFunctionOrOptions) {
	            options$$1.read = evaluatorFunctionOrOptions;
	        }
	    }
	    if (typeof options$$1.read != "function")
	        throw Error("Pass a function that returns the value of the computed");
	
	    var writeFunction = options$$1.write;
	    var state = {
	        latestValue: undefined,
	        isStale: true,
	        isBeingEvaluated: false,
	        suppressDisposalUntilDisposeWhenReturnsFalse: false,
	        isDisposed: false,
	        pure: false,
	        isSleeping: false,
	        readFunction: options$$1.read,
	        evaluatorFunctionTarget: evaluatorFunctionTarget || options$$1.owner,
	        disposeWhenNodeIsRemoved: options$$1.disposeWhenNodeIsRemoved || options$$1.disposeWhenNodeIsRemoved || null,
	        disposeWhen: options$$1.disposeWhen || options$$1.disposeWhen,
	        domNodeDisposalCallback: null,
	        dependencyTracking: {},
	        dependenciesCount: 0,
	        evaluationTimeoutInstance: null
	    };
	
	    function computedObservable() {
	        if (arguments.length > 0) {
	            if (typeof writeFunction === "function") {
	                // Writing a value
	                writeFunction.apply(state.evaluatorFunctionTarget, arguments);
	            } else {
	                throw new Error("Cannot write a value to a computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.");
	            }
	            return this; // Permits chained assignments
	        } else {
	            // Reading the value
	            registerDependency(computedObservable);
	            if (state.isStale || (state.isSleeping && computedObservable.haveDependenciesChanged())) {
	                computedObservable.evaluateImmediate();
	            }
	            return state.latestValue;
	        }
	    }
	
	    computedObservable[computedState] = state;
	    computedObservable.hasWriteFunction = typeof writeFunction === "function";
	
	    // Inherit from 'subscribable'
	    if (!canSetPrototype) {
	        // 'subscribable' won't be on the prototype chain unless we put it there directly
	        extend(computedObservable, subscribable.fn);
	    }
	    subscribable.fn.init(computedObservable);
	
	    // Inherit from 'computed'
	    setPrototypeOfOrExtend(computedObservable, computed.fn);
	
	    if (options$$1.pure) {
	        state.pure = true;
	        state.isSleeping = true;     // Starts off sleeping; will awake on the first subscription
	        extend(computedObservable, pureComputedOverrides);
	    } else if (options$$1.deferEvaluation) {
	        extend(computedObservable, deferEvaluationOverrides);
	    }
	
	    if (options.deferUpdates) {
	        extenders.deferred(computedObservable, true);
	    }
	
	    if (options.debug) {
	        // #1731 - Aid debugging by exposing the computed's options
	        computedObservable._options = options$$1;
	    }
	
	    if (state.disposeWhenNodeIsRemoved) {
	        // Since this computed is associated with a DOM node, and we don't want to dispose the computed
	        // until the DOM node is *removed* from the document (as opposed to never having been in the document),
	        // we'll prevent disposal until "disposeWhen" first returns false.
	        state.suppressDisposalUntilDisposeWhenReturnsFalse = true;
	
	        // disposeWhenNodeIsRemoved: true can be used to opt into the "only dispose after first false result"
	        // behaviour even if there's no specific node to watch. In that case, clear the option so we don't try
	        // to watch for a non-node's disposal. This technique is intended for KO's internal use only and shouldn't
	        // be documented or used by application code, as it's likely to change in a future version of KO.
	        if (!state.disposeWhenNodeIsRemoved.nodeType) {
	            state.disposeWhenNodeIsRemoved = null;
	        }
	    }
	
	    // Evaluate, unless sleeping or deferEvaluation is true
	    if (!state.isSleeping && !options$$1.deferEvaluation) {
	        computedObservable.evaluateImmediate();
	    }
	
	    // Attach a DOM node disposal callback so that the computed will be proactively disposed as soon as the node is
	    // removed using ko.removeNode. But skip if isActive is false (there will never be any dependencies to dispose).
	    if (state.disposeWhenNodeIsRemoved && computedObservable.isActive()) {
	        addDisposeCallback(state.disposeWhenNodeIsRemoved, state.domNodeDisposalCallback = function () {
	            computedObservable.dispose();
	        });
	    }
	
	    return computedObservable;
	}
	
	// Utility function that disposes a given dependencyTracking entry
	function computedDisposeDependencyCallback(id, entryToDispose) {
	    if (entryToDispose !== null && entryToDispose.dispose) {
	        entryToDispose.dispose();
	    }
	}
	
	// This function gets called each time a dependency is detected while evaluating a computed.
	// It's factored out as a shared function to avoid creating unnecessary function instances during evaluation.
	function computedBeginDependencyDetectionCallback(subscribable$$1, id) {
	    var computedObservable = this.computedObservable,
	        state = computedObservable[computedState];
	    if (!state.isDisposed) {
	        if (this.disposalCount && this.disposalCandidates[id]) {
	            // Don't want to dispose this subscription, as it's still being used
	            computedObservable.addDependencyTracking(id, subscribable$$1, this.disposalCandidates[id]);
	            this.disposalCandidates[id] = null; // No need to actually delete the property - disposalCandidates is a transient object anyway
	            --this.disposalCount;
	        } else if (!state.dependencyTracking[id]) {
	            // Brand new subscription - add it
	            computedObservable.addDependencyTracking(id, subscribable$$1, state.isSleeping ? { _target: subscribable$$1 } : computedObservable.subscribeToDependency(subscribable$$1));
	        }
	    }
	}
	
	computed.fn = {
	    equalityComparer: valuesArePrimitiveAndEqual,
	    getDependenciesCount: function () {
	        return this[computedState].dependenciesCount;
	    },
	    addDependencyTracking: function (id, target, trackingObj) {
	        if (this[computedState].pure && target === this) {
	            throw Error("A 'pure' computed must not be called recursively");
	        }
	
	        this[computedState].dependencyTracking[id] = trackingObj;
	        trackingObj._order = this[computedState].dependenciesCount++;
	        trackingObj._version = target.getVersion();
	    },
	    haveDependenciesChanged: function () {
	        var id, dependency, dependencyTracking = this[computedState].dependencyTracking;
	        for (id in dependencyTracking) {
	            if (dependencyTracking.hasOwnProperty(id)) {
	                dependency = dependencyTracking[id];
	                if (dependency._target.hasChanged(dependency._version)) {
	                    return true;
	                }
	            }
	        }
	    },
	    markDirty: function () {
	        // Process "dirty" events if we can handle delayed notifications
	        if (this._evalDelayed && !this[computedState].isBeingEvaluated) {
	            this._evalDelayed();
	        }
	    },
	    isActive: function () {
	        return this[computedState].isStale || this[computedState].dependenciesCount > 0;
	    },
	    respondToChange: function () {
	        // Ignore "change" events if we've already scheduled a delayed notification
	        if (!this._notificationIsPending) {
	            this.evaluatePossiblyAsync();
	        }
	    },
	    subscribeToDependency: function (target) {
	        if (target._deferUpdates && !this[computedState].disposeWhenNodeIsRemoved) {
	            var dirtySub = target.subscribe(this.markDirty, this, 'dirty'),
	                changeSub = target.subscribe(this.respondToChange, this);
	            return {
	                _target: target,
	                dispose: function () {
	                    dirtySub.dispose();
	                    changeSub.dispose();
	                }
	            };
	        } else {
	            return target.subscribe(this.evaluatePossiblyAsync, this);
	        }
	    },
	    evaluatePossiblyAsync: function () {
	        var computedObservable = this,
	            throttleEvaluationTimeout = computedObservable.throttleEvaluation;
	        if (throttleEvaluationTimeout && throttleEvaluationTimeout >= 0) {
	            clearTimeout(this[computedState].evaluationTimeoutInstance);
	            this[computedState].evaluationTimeoutInstance = safeSetTimeout(function () {
	                computedObservable.evaluateImmediate(true /*notifyChange*/);
	            }, throttleEvaluationTimeout);
	        } else if (computedObservable._evalDelayed) {
	            computedObservable._evalDelayed();
	        } else {
	            computedObservable.evaluateImmediate(true /*notifyChange*/);
	        }
	    },
	    evaluateImmediate: function (notifyChange) {
	        var computedObservable = this,
	            state = computedObservable[computedState],
	            disposeWhen = state.disposeWhen;
	
	        if (state.isBeingEvaluated) {
	            // If the evaluation of a ko.computed causes side effects, it's possible that it will trigger its own re-evaluation.
	            // This is not desirable (it's hard for a developer to realise a chain of dependencies might cause this, and they almost
	            // certainly didn't intend infinite re-evaluations). So, for predictability, we simply prevent ko.computeds from causing
	            // their own re-evaluation. Further discussion at https://github.com/SteveSanderson/knockout/pull/387
	            return;
	        }
	
	        // Do not evaluate (and possibly capture new dependencies) if disposed
	        if (state.isDisposed) {
	            return;
	        }
	
	        if (state.disposeWhenNodeIsRemoved && !domNodeIsAttachedToDocument(state.disposeWhenNodeIsRemoved) || disposeWhen && disposeWhen()) {
	            // See comment above about suppressDisposalUntilDisposeWhenReturnsFalse
	            if (!state.suppressDisposalUntilDisposeWhenReturnsFalse) {
	                computedObservable.dispose();
	                return;
	            }
	        } else {
	            // It just did return false, so we can stop suppressing now
	            state.suppressDisposalUntilDisposeWhenReturnsFalse = false;
	        }
	
	        state.isBeingEvaluated = true;
	        try {
	            this.evaluateImmediate_CallReadWithDependencyDetection(notifyChange);
	        } finally {
	            state.isBeingEvaluated = false;
	        }
	
	        if (!state.dependenciesCount) {
	            computedObservable.dispose();
	        }
	    },
	    evaluateImmediate_CallReadWithDependencyDetection: function (notifyChange) {
	        // This function is really just part of the evaluateImmediate logic. You would never call it from anywhere else.
	        // Factoring it out into a separate function means it can be independent of the try/catch block in evaluateImmediate,
	        // which contributes to saving about 40% off the CPU overhead of computed evaluation (on V8 at least).
	
	        var computedObservable = this,
	            state = computedObservable[computedState];
	
	        // Initially, we assume that none of the subscriptions are still being used (i.e., all are candidates for disposal).
	        // Then, during evaluation, we cross off any that are in fact still being used.
	        var isInitial = state.pure ? undefined : !state.dependenciesCount,   // If we're evaluating when there are no previous dependencies, it must be the first time
	            dependencyDetectionContext = {
	                computedObservable: computedObservable,
	                disposalCandidates: state.dependencyTracking,
	                disposalCount: state.dependenciesCount
	            };
	
	        begin({
	            callbackTarget: dependencyDetectionContext,
	            callback: computedBeginDependencyDetectionCallback,
	            computed: computedObservable,
	            isInitial: isInitial
	        });
	
	        state.dependencyTracking = {};
	        state.dependenciesCount = 0;
	
	        var newValue = this.evaluateImmediate_CallReadThenEndDependencyDetection(state, dependencyDetectionContext);
	
	        if (computedObservable.isDifferent(state.latestValue, newValue)) {
	            if (!state.isSleeping) {
	                computedObservable.notifySubscribers(state.latestValue, "beforeChange");
	            }
	
	            state.latestValue = newValue;
	
	            if (state.isSleeping) {
	                computedObservable.updateVersion();
	            } else if (notifyChange) {
	                computedObservable.notifySubscribers(state.latestValue);
	            }
	        }
	
	        if (isInitial) {
	            computedObservable.notifySubscribers(state.latestValue, "awake");
	        }
	    },
	    evaluateImmediate_CallReadThenEndDependencyDetection: function (state, dependencyDetectionContext) {
	        // This function is really part of the evaluateImmediate_CallReadWithDependencyDetection logic.
	        // You'd never call it from anywhere else. Factoring it out means that evaluateImmediate_CallReadWithDependencyDetection
	        // can be independent of try/finally blocks, which contributes to saving about 40% off the CPU
	        // overhead of computed evaluation (on V8 at least).
	
	        try {
	            var readFunction = state.readFunction;
	            return state.evaluatorFunctionTarget ? readFunction.call(state.evaluatorFunctionTarget) : readFunction();
	        } finally {
	            end();
	
	            // For each subscription no longer being used, remove it from the active subscriptions list and dispose it
	            if (dependencyDetectionContext.disposalCount && !state.isSleeping) {
	                objectForEach(dependencyDetectionContext.disposalCandidates, computedDisposeDependencyCallback);
	            }
	
	            state.isStale = false;
	        }
	    },
	    peek: function () {
	        // Peek won't re-evaluate, except while the computed is sleeping or to get the initial value when "deferEvaluation" is set.
	        var state = this[computedState];
	        if ((state.isStale && !state.dependenciesCount) || (state.isSleeping && this.haveDependenciesChanged())) {
	            this.evaluateImmediate();
	        }
	        return state.latestValue;
	    },
	    limit: function (limitFunction) {
	        // Override the limit function with one that delays evaluation as well
	        subscribable.fn.limit.call(this, limitFunction);
	        this._evalDelayed = function () {
	            this._limitBeforeChange(this[computedState].latestValue);
	
	            this[computedState].isStale = true; // Mark as dirty
	
	            // Pass the observable to the "limit" code, which will access it when
	            // it's time to do the notification.
	            this._limitChange(this);
	        };
	    },
	    dispose: function () {
	        var state = this[computedState];
	        if (!state.isSleeping && state.dependencyTracking) {
	            objectForEach(state.dependencyTracking, function (id, dependency) {
	                if (dependency.dispose)
	                    dependency.dispose();
	            });
	        }
	        if (state.disposeWhenNodeIsRemoved && state.domNodeDisposalCallback) {
	            removeDisposeCallback(state.disposeWhenNodeIsRemoved, state.domNodeDisposalCallback);
	        }
	        state.dependencyTracking = null;
	        state.dependenciesCount = 0;
	        state.isDisposed = true;
	        state.isStale = false;
	        state.isSleeping = false;
	        state.disposeWhenNodeIsRemoved = null;
	        state.readFunction = null;
	        if (options.debug) {
	            this._options = null;
	        }
	    }
	};
	
	var pureComputedOverrides = {
	    beforeSubscriptionAdd: function (event) {
	        // If asleep, wake up the computed by subscribing to any dependencies.
	        var computedObservable = this,
	            state = computedObservable[computedState];
	        if (!state.isDisposed && state.isSleeping && event == 'change') {
	            state.isSleeping = false;
	            if (state.isStale || computedObservable.haveDependenciesChanged()) {
	                state.dependencyTracking = null;
	                state.dependenciesCount = 0;
	                state.isStale = true;
	                computedObservable.evaluateImmediate();
	            } else {
	                // First put the dependencies in order
	                var dependeciesOrder = [];
	                objectForEach(state.dependencyTracking, function (id, dependency) {
	                    dependeciesOrder[dependency._order] = id;
	                });
	                // Next, subscribe to each one
	                arrayForEach(dependeciesOrder, function (id, order) {
	                    var dependency = state.dependencyTracking[id],
	                        subscription = computedObservable.subscribeToDependency(dependency._target);
	                    subscription._order = order;
	                    subscription._version = dependency._version;
	                    state.dependencyTracking[id] = subscription;
	                });
	            }
	            if (!state.isDisposed) {     // test since evaluating could trigger disposal
	                computedObservable.notifySubscribers(state.latestValue, "awake");
	            }
	        }
	    },
	    afterSubscriptionRemove: function (event) {
	        var state = this[computedState];
	        if (!state.isDisposed && event == 'change' && !this.hasSubscriptionsForEvent('change')) {
	            objectForEach(state.dependencyTracking, function (id, dependency) {
	                if (dependency.dispose) {
	                    state.dependencyTracking[id] = {
	                        _target: dependency._target,
	                        _order: dependency._order,
	                        _version: dependency._version
	                    };
	                    dependency.dispose();
	                }
	            });
	            state.isSleeping = true;
	            this.notifySubscribers(undefined, "asleep");
	        }
	    },
	    getVersion: function () {
	        // Because a pure computed is not automatically updated while it is sleeping, we can't
	        // simply return the version number. Instead, we check if any of the dependencies have
	        // changed and conditionally re-evaluate the computed observable.
	        var state = this[computedState];
	        if (state.isSleeping && (state.isStale || this.haveDependenciesChanged())) {
	            this.evaluateImmediate();
	        }
	        return subscribable.fn.getVersion.call(this);
	    }
	};
	
	var deferEvaluationOverrides = {
	    beforeSubscriptionAdd: function (event) {
	        // This will force a computed with deferEvaluation to evaluate when the first subscription is registered.
	        if (event == 'change' || event == 'beforeChange') {
	            this.peek();
	        }
	    }
	};
	
	// Note that for browsers that don't support proto assignment, the
	// inheritance chain is created manually in the ko.computed constructor
	if (canSetPrototype) {
	    setPrototypeOf(computed.fn, subscribable.fn);
	}
	
	// Set the proto chain values for ko.hasPrototype
	var protoProp = observable.protoProperty; // == "__ko_proto__"
	computed[protoProp] = observable;
	computed.fn[protoProp] = computed;
	
	function isComputed(instance) {
	    return hasPrototype(instance, computed);
	}
	
	function isPureComputed(instance) {
	    return hasPrototype(instance, computed)
	        && instance[computedState] && instance[computedState].pure;
	}
	
	function pureComputed(evaluatorFunctionOrOptions, evaluatorFunctionTarget) {
	    if (typeof evaluatorFunctionOrOptions === 'function') {
	        return computed(evaluatorFunctionOrOptions, evaluatorFunctionTarget, {'pure':true});
	    } else {
	        evaluatorFunctionOrOptions = extend({}, evaluatorFunctionOrOptions);   // make a copy of the parameter object
	        evaluatorFunctionOrOptions.pure = true;
	        return computed(evaluatorFunctionOrOptions, evaluatorFunctionTarget);
	    }
	}
	
	function throttleExtender(target, timeout) {
	    // Throttling means two things:
	
	    // (1) For dependent observables, we throttle *evaluations* so that, no matter how fast its dependencies
	    //     notify updates, the target doesn't re-evaluate (and hence doesn't notify) faster than a certain rate
	    target.throttleEvaluation = timeout;
	
	    // (2) For writable targets (observables, or writable dependent observables), we throttle *writes*
	    //     so the target cannot change value synchronously or faster than a certain rate
	    var writeTimeoutInstance = null;
	    return computed({
	        read: target,
	        write: function(value) {
	            clearTimeout(writeTimeoutInstance);
	            writeTimeoutInstance = setTimeout(function() {
	                target(value);
	            }, timeout);
	        }
	    });
	}
	
	
	extenders.throttle = throttleExtender;
	
	//
	// tko.computed - Exports
	//
	// knockout -> tko changes:
	//      Deprecates `dependentObservable` (use `computed`)
	//
	
	/* eslint no-cond-assign: 0 */
	
	// The following regular expressions will be used to split an object-literal string into tokens
	
	// These two match strings, either with double quotes or single quotes
	var stringDouble = '"(?:[^"\\\\]|\\\\.)*"';
	var stringSingle = "'(?:[^'\\\\]|\\\\.)*'";
	var stringRegexp = '/(?:[^/\\\\]|\\\\.)*/\w*';
	var specials = ',"\'{}()/:[\\]';
	var everyThingElse = '[^\\s:,/][^' + specials + ']*[^\\s' + specials + ']';
	var oneNotSpace = '[^\\s]';
	var bindingToken = RegExp(stringDouble + '|' + stringSingle + '|' + stringRegexp + '|' + everyThingElse + '|' + oneNotSpace, 'g');
	var divisionLookBehind = /[\])"'A-Za-z0-9_$]+$/;
	var keywordRegexLookBehind = {
	    'in': 1,
	    'return': 1,
	    'typeof': 1
	  };
	
	/**
	 * Break a binding string (data-bind='x: val, y: ..') into a stable array
	 * of {key: value}.
	 */
	function parseObjectLiteral(objectLiteralString) {
	  // Trim leading and trailing spaces from the string
	  var str = stringTrim(objectLiteralString);
	
	  // Trim braces '{' surrounding the whole object literal
	  if (str.charCodeAt(0) === 123) str = str.slice(1, -1);
	
	  // Split into tokens
	  var result = [],
	    toks = str.match(bindingToken),
	    key, values = [],
	    depth = 0;
	
	  if (!toks) { return [] }
	
	  // Append a comma so that we don't need a separate code block to deal with the last item
	  toks.push(',');
	
	  for (var i = 0, tok; tok = toks[i]; ++i) {
	    var c = tok.charCodeAt(0);
	    // A comma signals the end of a key/value pair if depth is zero
	    if (c === 44) { // ","
	      if (depth <= 0) {
	        result.push((key && values.length) ? {
	          key: key,
	          value: values.join('')
	        } : {
	          'unknown': key || values.join('')
	        });
	        key = depth = 0;
	        values = [];
	        continue;
	      }
	      // Simply skip the colon that separates the name and value
	    } else if (c === 58) { // ":"
	      if (!depth && !key && values.length === 1) {
	        key = values.pop();
	        continue;
	      }
	      // A set of slashes is initially matched as a regular expression, but could be division
	    } else if (c === 47 && i && tok.length > 1) { // "/"
	      // Look at the end of the previous token to determine if the slash is actually division
	      var match = toks[i - 1].match(divisionLookBehind);
	      if (match && !keywordRegexLookBehind[match[0]]) {
	        // The slash is actually a division punctuator; re-parse the remainder of the string (not including the slash)
	        str = str.substr(str.indexOf(tok) + 1);
	        toks = str.match(bindingToken);
	        toks.push(',');
	        i = -1;
	        // Continue with just the slash
	        tok = '/';
	      }
	      // Increment depth for parentheses, braces, and brackets so that interior commas are ignored
	    } else if (c === 40 || c === 123 || c === 91) { // '(', '{', '['
	      ++depth;
	    } else if (c === 41 || c === 125 || c === 93) { // ')', '}', ']'
	      --depth;
	      // The key will be the first token; if it's a string, trim the quotes
	    } else if (!key && !values.length && (c === 34 || c === 39)) { // '"', "'"
	      tok = tok.slice(1, -1);
	    }
	    values.push(tok);
	  }
	
	  return result;
	}
	
	function Node(lhs, op, rhs) {
	  this.lhs = lhs;
	  this.op = op;
	  this.rhs = rhs;
	}
	
	
	/* Just a placeholder */
	function LAMBDA() {}
	
	/**
	 * @ operator - recursively call the identifier if it's a function
	 * @param  {operand} a ignored
	 * @param  {operand} b The variable to be called (if a function) and unwrapped
	 * @return {value}   The result.
	 */
	function unwrapOrCall(a, b) {
	  while (typeof b === 'function') { b = b(); }
	  return b;
	}
	
	
	var operators$1 = {
	  // unary
	  '@': unwrapOrCall,
	  '=>': LAMBDA,
	  '!': function not(a, b) { return !b; },
	  '!!': function notnot(a, b) { return !!b; },
	  '++': function preinc(a, b) { return ++b; },
	  '--': function preinc(a, b) { return --b; },
	  // mul/div
	  '*': function mul(a, b) { return a * b; },
	  '/': function div(a, b) { return a / b; },
	  '%': function mod(a, b) { return a % b; },
	  // sub/add
	  '+': function add(a, b) { return a + b; },
	  '-': function sub(a, b) { return (a || 0) - (b || 0); },
	  // relational
	  '<': function lt(a, b) { return a < b; },
	  '<=': function le(a, b) { return a <= b; },
	  '>': function gt(a, b) { return a > b; },
	  '>=': function ge(a, b) { return a >= b; },
	  //    TODO: 'in': function (a, b) { return a in b; },
	  //    TODO: 'instanceof': function (a, b) { return a instanceof b; },
	  // equality
	  '==': function equal(a, b) { return a === b; },
	  '!=': function ne(a, b) { return a !== b; },
	  '===': function sequal(a, b) { return a === b; },
	  '!==': function sne(a, b) { return a !== b; },
	  // Fuzzy (bad) equality
	  '~==': function equal(a, b) { return a == b; },
	  '~!=': function ne(a, b) { return a != b; },
	  // bitwise
	  '&': function bit_and(a, b) { return a & b; },
	  '^': function xor(a, b) { return a ^ b; },
	  '|': function bit_or(a, b) { return a | b; },
	  // logic
	  '&&': function logic_and(a, b) { return a && b; },
	  '||': function logic_or(a, b) { return a || b; },
	  // Access
	  '.': function member(a, b) { return a[b]; },
	  '[': function member(a, b) { return a[b]; },
	  // conditional/ternary
	  '?': function ternary(a, b) { return Node.value_of(a ? b.yes : b.no); },
	
	  // Function-Call
	  'call': function (a, b) { return a.apply(null, b); },
	};
	
	/* Order of precedence from:
	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#Table
	*/
	
	  // Our operator - unwrap/call
	operators$1['@'].precedence = 21;
	
	  // lambda
	operators$1['=>'].precedence = 20;
	
	  // Member
	operators$1['.'].precedence = 19;
	operators$1['['].precedence = 19;
	
	  // Logical not
	operators$1['!'].precedence = 16;
	operators$1['!!'].precedence = 16; // explicit double-negative
	
	  // Prefix inc/dec
	operators$1['++'].precedence = 16;
	operators$1['--'].precedence = 16;
	
	  // mul/div/remainder
	operators$1['%'].precedence = 14;
	operators$1['*'].precedence = 14;
	operators$1['/'].precedence = 14;
	
	  // add/sub
	operators$1['+'].precedence = 13;
	operators$1['-'].precedence = 13;
	
	  // bitwise
	operators$1['|'].precedence = 12;
	operators$1['^'].precedence = 11;
	operators$1['&'].precedence = 10;
	
	  // comparison
	operators$1['<'].precedence = 11;
	operators$1['<='].precedence = 11;
	operators$1['>'].precedence = 11;
	operators$1['>='].precedence = 11;
	
	  // operators['in'].precedence = 8;
	  // operators['instanceof'].precedence = 8;
	  // equality
	operators$1['=='].precedence = 10;
	operators$1['!='].precedence = 10;
	operators$1['==='].precedence = 10;
	operators$1['!=='].precedence = 10;
	
	  // Fuzzy operators for backwards compat with the "evil twins"
	  //    http://stackoverflow.com/questions/359494
	operators$1['~=='].precedence = 10;
	operators$1['~!='].precedence = 10;
	
	  // logic
	operators$1['&&'].precedence = 6;
	operators$1['||'].precedence = 5;
	
	  // Conditional/ternary
	operators$1['?'].precedence = 4;
	
	  // Call a function
	operators$1['call'].precedence = 1;
	
	
	
	Node.operators = operators$1;
	
	
	Node.prototype.get_leaf_value = function (leaf, member_of) {
	  if (typeof(leaf) === 'function') {
	    // Expressions on observables are nonsensical, so we unwrap any
	    // function values (e.g. identifiers).
	    return unwrap(leaf());
	  }
	
	  // primitives
	  if (typeof(leaf) !== 'object') {
	    return member_of ? member_of[leaf] : leaf;
	  }
	
	  if (leaf === null) { return leaf; }
	
	  // Identifiers and Expressions
	  if (leaf[Node.isExpressionOrIdentifierSymbol]) {
	    // lhs is passed in as the parent of the leaf. It will be defined in
	    // cases like a.b.c as 'a' for 'b' then as 'b' for 'c'.
	    return unwrap(leaf.get_value(member_of));
	  }
	
	  if (leaf instanceof Node) {
	    return leaf.get_node_value(member_of);
	  }
	
	  // Plain object/class.
	  return leaf;
	  // throw new Error("Invalid type of leaf node: " + leaf);
	};
	
	/**
	 * Return a function that calculates and returns an expression's value
	 * when called.
	 * @param  {array} ops  The operations to perform
	 * @return {function}   The function that calculates the expression.
	 *
	 * Note that for a lambda, we do not evaluate the RHS expression until
	 * the lambda is called.
	 */
	Node.prototype.get_node_value = function () {
	  var node = this;
	
	  if (node.op === LAMBDA) {
	    return function () { return node.get_leaf_value(node.rhs); };
	  }
	
	  return node.op(node.get_leaf_value(node.lhs),
	                 node.get_leaf_value(node.rhs));
	};
	
	
	//
	// Class variables.
	//
	Node.isExpressionOrIdentifierSymbol = createSymbolOrString("isExpressionOrIdentifierSymbol");
	
	
	Node.value_of = function value_of(item) {
	  if (item && item[Node.isExpressionOrIdentifierSymbol]) {
	    return item.get_value();
	  }
	  return item;
	};
	
	
	/**
	*  Convert an array of nodes to an executable tree.
	*  @return {object} An object with a `lhs`, `rhs` and `op` key, corresponding
	*                      to the left hand side, right hand side, and
	*                      operation function.
	*/
	Node.create_root = function create_root(nodes) {
	  var root, leaf, op, value;
	
	  // Prime the leaf = root node.
	  leaf = root = new Node(nodes.shift(), nodes.shift(), nodes.shift());
	
	  while (nodes) {
	    op = nodes.shift();
	    value = nodes.shift();
	    if (!op) {
	      break;
	    }
	    if (op.precedence < root.op.precedence) {
	      // rebase
	      root = new Node(root, op, value);
	      leaf = root;
	    } else {
	      leaf.rhs = new Node(leaf.rhs, op, value);
	      leaf = leaf.rhs;
	    }
	  }
	  // console.log("tree", root)
	  return root;
	};
	
	function Expression(nodes) {
	  this.nodes = nodes;
	  this.root = Node.create_root(nodes);
	}
	
	// Exports for testing.
	Expression.operators = Node.operators;
	Expression.Node = Node;
	
	
	/**
	 * Return the value of `this` Expression instance.
	 *
	 */
	Expression.prototype.get_value = function () {
	  if (!this.root) {
	    this.root = Node.create_root(this.nodes);
	  }
	  return this.root.get_node_value();
	};
	
	
	Expression.prototype[Node.isExpressionOrIdentifierSymbol] = true;
	
	function Arguments(parser, args) {
	  this.parser = parser;
	  this.args = args;
	}
	
	
	Arguments.prototype.get_value = function get_value(/* parent */) {
	  var dereffed_args = [];
	  for (var i = 0, j = this.args.length; i < j; ++i) {
	    dereffed_args.push(Node.value_of(this.args[i]));
	  }
	  return dereffed_args;
	};
	
	
	Arguments.prototype[Node.isExpressionOrIdentifierSymbol] = true;
	
	function Identifier(parser, token, dereferences) {
	  this.token = token;
	  this.dereferences = dereferences;
	  this.parser = parser;
	}
	
	
	
	/**
	 * Return the value of the given
	 *
	 * @param  {Object} parent  (optional) source of the identifier e.g. for
	 *                          membership. e.g. `a.b`, one would pass `a` in as
	 *                          the parent when calling lookup_value for `b`.
	 * @return {Mixed}          The value of the token for this Identifier.
	 */
	Identifier.prototype.lookup_value = function (parent) {
	  var token = this.token,
	    parser = this.parser,
	    $context = parser.context,
	    $data = $context.$data || {},
	    globals = parser.globals || {};
	
	  if (parent) {
	    return Node.value_of(parent)[token];
	  }
	
	  // short circuits
	  switch (token) {
	  case '$element': return parser.node;
	  case '$context': return $context;
	  case 'this': case '$data': return $context.$data;
	  default:
	  }
	  // instanceof Object covers 1. {}, 2. [], 3. function() {}, 4. new *;  it excludes undefined, null, primitives.
	  if ($data instanceof Object && token in $data) { return $data[token]; }
	  if (token in $context) { return $context[token]; }
	  if (token in globals) { return globals[token]; }
	
	  throw new Error("The variable \"" + token + "\" was not found on $data, $context, or knockout options.bindingGlobals.");
	};
	
	/**
	 * Apply all () and [] functions on the identifier to the lhs value e.g.
	 * a()[3] has deref functions that are essentially this:
	 *     [_deref_call, _deref_this where this=3]
	 *
	 * @param  {mixed} value  Should be an object.
	 * @return {mixed}        The dereferenced value.
	 *
	 * [1] We want to bind any function that is a method of an object, but not
	 *     corrupt any values (e.g. computed()s).   e.g. Running x.bind(obj) where
	 *     we're given `data-bind='binding: obj.x'` and x is a computed will
	 *     break the computed's `this` and it will stop working as expected.
	 *
	 *     The test `!last_value.hasOwnProperty(member)`
	 *     distinguishes between functions on the prototype chain (prototypal
	 *     members) and value-members added directly to the object.  This may
	 *     not be the canonical test for this relationship, but it succeeds
	 *     in the known test cases.
	 *
	 *     See: `this` tests of our dereference function.
	 */
	Identifier.prototype.dereference = function (value) {
	  var member,
	    refs = this.dereferences || [],
	    parser = this.parser,
	    $context = parser.context || {},
	    $data = $context.$data || {},
	    last_value,  // becomes `this` in function calls to object properties.
	    i, n;
	
	  for (i = 0, n = refs.length; i < n; ++i) {
	    member = Node.value_of(refs[i]);
	
	    if (typeof value === 'function' && refs[i] instanceof Arguments) {
	      // fn(args)
	      value = value.apply(last_value || $data, member);
	      last_value = value;
	    } else {
	      // obj[x] or obj.x dereference.  Note that obj may be a function.
	      last_value = value;
	      value = Node.value_of(value[member]);
	    }
	  }
	
	  // [1] See note above.
	  if (typeof value === 'function' && n > 0 && last_value !== value &&
	      !last_value.hasOwnProperty(member)) {
	    return value.bind(last_value);
	  }
	
	  return value;
	};
	
	/**
	 * Return the value as one would get it from the top-level i.e.
	 * $data.token/$context.token/globals.token; this does not return intermediate
	 * values on a chain of members i.e. $data.hello.there -- requesting the
	 * Identifier('there').value will return $data/$context/globals.there.
	 *
	 * This will dereference using () or [arg] member.
	 * @param  {object | Identifier | Expression} parent
	 * @return {mixed}  Return the primitive or an accessor.
	 */
	Identifier.prototype.get_value = function (parent) {
	  return this.dereference(this.lookup_value(parent));
	};
	
	
	Identifier.prototype.assign = function assign(object, property, value) {
	  if (isWriteableObservable(object[property])) {
	    object[property](value);
	  } else if (!isObservable(object[property])) {
	    object[property] = value;
	  }
	};
	
	
	/**
	 * Set the value of the Identifier.
	 *
	 * @param {Mixed} new_value The value that Identifier is to be set to.
	 */
	Identifier.prototype.set_value = function (new_value) {
	  var parser = this.parser,
	    $context = parser.context,
	    $data = $context.$data || {},
	    globals = parser.globals || {},
	    refs = this.dereferences || [],
	    leaf = this.token,
	    i, n, root;
	
	  if (Object.hasOwnProperty.call($data, leaf)) {
	    root = $data;
	  } else if (Object.hasOwnProperty.call($context, leaf)) {
	    root = $context;
	  } else if (Object.hasOwnProperty.call(globals, leaf)) {
	    root = globals;
	  } else {
	    throw new Error("Identifier::set_value -- " +
	      "The property '" + leaf + "' does not exist " +
	      "on the $data, $context, or globals.");
	  }
	
	  // Degenerate case. {$data|$context|global}[leaf] = something;
	  n = refs.length;
	  if (n === 0) {
	    this.assign(root, leaf, new_value);
	    return;
	  }
	
	  // First dereference is {$data|$context|global}[token].
	  root = root[leaf];
	
	  // We cannot use this.dereference because that gives the leaf; to evoke
	  // the ES5 setter we have to call `obj[leaf] = new_value`
	  for (i = 0; i < n - 1; ++i) {
	    leaf = refs[i];
	    if (leaf instanceof Arguments) {
	      root = root();
	    } else {
	      root = root[Node.value_of(leaf)];
	    }
	  }
	
	  // We indicate that a dereference is a function when it is `true`.
	  if (refs[i] === true) {
	    throw new Error("Cannot assign a value to a function.");
	  }
	
	  // Call the setter for the leaf.
	  if (refs[i]) {
	    this.assign(root, Node.value_of(refs[i]), new_value);
	  }
	};
	
	
	Identifier.prototype[Node.isExpressionOrIdentifierSymbol] = true;
	
	function Ternary(yes, no) {
	  this.yes = yes;
	  this.no = no;
	}
	
	Ternary.prototype[Node.isExpressionOrIdentifierSymbol] = true;
	Ternary.prototype.get_value = function () { return this; };
	
	/**
	 * Originally based on (public domain):
	 * https://github.com/douglascrockford/JSON-js/blob/master/json_parse.js
	 */
	
	var escapee = {
	    "'": "'",
	    '"':  '"',
	    "`":  "`",
	    '\\': '\\',
	    '/':  '/',
	    '$':  '$',
	    b:    '\b',
	    f:    '\f',
	    n:    '\n',
	    r:    '\r',
	    t:    '\t'
	  };
	var operators = Node.operators;
	
	/**
	 * Construct a new Parser instance with new Parser(node, context)
	 * @param {Node} node    The DOM element from which we parsed the
	 *                         content.
	 * @param {object} context The Knockout context.
	 * @param {object} globals An object containing any desired globals.
	 */
	function Parser(node, context, globals) {
	  this.node = node;
	  this.context = context;
	  this.globals = globals || {};
	}
	
	// Exposed for testing.
	Parser.Expression = Expression;
	Parser.Identifier = Identifier;
	Parser.Arguments = Arguments;
	Parser.Node = Node;
	
	Parser.prototype.white = function () {
	  var ch = this.ch;
	  while (ch && ch <= ' ') {
	    ch = this.next();
	  }
	  return this.comment(ch);
	};
	
	/**
	 * Slurp any C or C++ style comments
	 */
	Parser.prototype.comment = function (ch) {
	  if (ch !== '/') { return ch; }
	  var p = this.at;
	  var second = this.lookahead();
	  if (second === '/') {
	    while(ch) {
	      ch = this.next();
	      if (ch === '\n' || ch === '\r') { break; }
	    }
	    ch = this.next();
	  } else if (second === '*') {
	    while(ch) {
	      ch = this.next();
	      if (ch === '*' && this.lookahead() === '/') {
	        this.next();
	        break;
	      }
	    }
	    if (!ch) {
	      this.error("Unclosed comment, starting at character " + p);
	    }
	    this.next();
	    return this.white();
	  }
	  return ch;
	};
	
	Parser.prototype.next = function (c) {
	  if (c && c !== this.ch) {
	    this.error("Expected '" + c + "' but got '" + this.ch + "'");
	  }
	  this.ch = this.text.charAt(this.at);
	  this.at += 1;
	  return this.ch;
	};
	
	Parser.prototype.lookahead = function() {
	  return this.text[this.at];
	};
	
	Parser.prototype.error = function (m) {
	  throw {
	    name:    'SyntaxError',
	    message: m,
	    at:      this.at,
	    text:    this.text
	  };
	};
	
	Parser.prototype.name = function () {
	  // A name of a binding
	  var name = '',
	    enclosed_by;
	  this.white();
	
	  var ch = this.ch;
	
	  if (ch === "'" || ch === '"') {
	    enclosed_by = ch;
	    ch = this.next();
	  }
	
	  while (ch) {
	    if (enclosed_by && ch === enclosed_by) {
	      this.white();
	      ch = this.next();
	      if (ch !== ':' && ch !== ',') {
	        this.error(
	          "Object name: " + name + " missing closing " + enclosed_by
	        );
	      }
	      return name;
	    } else if (ch === ':' || ch <= ' ' || ch === ',' || ch === '|') {
	      return name;
	    }
	    name += ch;
	    ch = this.next();
	  }
	
	  return name;
	};
	
	Parser.prototype.number = function () {
	  var number,
	    string = '',
	    ch = this.ch;
	
	  if (ch === '-') {
	    string = '-';
	    ch = this.next('-');
	  }
	  while (ch >= '0' && ch <= '9') {
	    string += ch;
	    ch = this.next();
	  }
	  if (ch === '.') {
	    string += '.';
	    ch = this.next();
	    while (ch && ch >= '0' && ch <= '9') {
	      string += ch;
	      ch = this.next();
	    }
	  }
	  if (ch === 'e' || ch === 'E') {
	    string += ch;
	    ch = this.next();
	    if (ch === '-' || ch === '+') {
	      string += ch;
	      ch = this.next();
	    }
	    while (ch >= '0' && ch <= '9') {
	      string += ch;
	      ch = this.next();
	    }
	  }
	  number = +string;
	  if (!isFinite(number)) {
	    options.onError(new Error("Bad number: " + number + " in " + string));
	  } else {
	    return number;
	  }
	};
	
	/**
	 * Add a property to 'object' that equals the given value.
	 * @param  {Object} object The object to add the value to.
	 * @param  {String} key    object[key] is set to the given value.
	 * @param  {mixed}  value  The value, may be a primitive or a function. If a
	 *                         function it is unwrapped as a property.
	 */
	Parser.prototype.object_add_value = function (object, key, value) {
	  if (value && value[Node.isExpressionOrIdentifierSymbol]) {
	    Object.defineProperty(object, key, {
	      get: function () {
	        return value.get_value();
	      },
	      enumerable: true
	    });
	  } else {
	    // primitives
	    object[key] = value;
	  }
	};
	
	Parser.prototype.object = function () {
	  var key,
	    object = {},
	    ch = this.ch;
	
	  if (ch === '{') {
	    this.next('{');
	    ch = this.white();
	    if (ch === '}') {
	      ch = this.next('}');
	      return object;
	    }
	    while (ch) {
	      if (ch === '"' || ch === "'" || ch === "`") {
	        key = this.string();
	      } else {
	        key = this.name();
	      }
	      this.white();
	      ch = this.next(':');
	      if (Object.hasOwnProperty.call(object, key)) {
	        this.error('Duplicate key "' + key + '"');
	      }
	
	      this.object_add_value(object, key, this.expression());
	
	      ch = this.white();
	      if (ch === '}') {
	        ch = this.next('}');
	        return object;
	      }
	
	      this.next(',');
	      ch = this.white();
	    }
	  }
	  this.error("Bad object");
	};
	
	
	/**
	 * Read up to delim and return the string
	 * @param  {string} delim The delimiter, either ' or "
	 * @return {string}       The string read.
	 */
	Parser.prototype.read_string = function (delim) {
	  var string = '',
	    nodes = [''],
	    plus_op = operators['+'],
	    hex,
	    i,
	    uffff,
	    interpolate = delim === "`",
	    ch = this.next();
	
	  while (ch) {
	    if (ch === delim) {
	      ch = this.next();
	      if (interpolate) { nodes.push(plus_op); }
	      nodes.push(string);
	      return nodes;
	    }
	    if (ch === '\\') {
	      ch = this.next();
	      if (ch === 'u') {
	        uffff = 0;
	        for (i = 0; i < 4; i += 1) {
	          hex = parseInt(ch = this.next(), 16);
	          if (!isFinite(hex)) {
	            break;
	          }
	          uffff = uffff * 16 + hex;
	        }
	        string += String.fromCharCode(uffff);
	      } else if (typeof escapee[ch] === 'string') {
	        string += escapee[ch];
	      } else {
	        break;
	      }
	    } else if (interpolate && ch === "$") {
	      ch = this.next();
	      if (ch === '{') {
	        this.next('{');
	        nodes.push(plus_op);
	        nodes.push(string);
	        nodes.push(plus_op);
	        nodes.push(this.expression());
	        string = '';
	        // this.next('}');
	      } else {
	        string += "$" + ch;
	      }
	    } else {
	      string += ch;
	    }
	    ch = this.next();
	  }
	
	  this.error("Bad string");
	};
	
	
	Parser.prototype.string = function () {
	  var ch = this.ch;
	  if (ch === '"') {
	    return this.read_string('"').join('');
	  } else if (ch === "'") {
	    return this.read_string("'").join('');
	  } else if (ch === "`") {
	    return Node.create_root(this.read_string("`"));
	  }
	
	  this.error("Bad string");
	};
	
	Parser.prototype.array = function () {
	  var array = [],
	    ch = this.ch;
	
	  if (ch === '[') {
	    ch = this.next('[');
	    this.white();
	    if (ch === ']') {
	      ch = this.next(']');
	      return array;
	    }
	    while (ch) {
	      array.push(this.expression());
	      ch = this.white();
	      if (ch === ']') {
	        ch = this.next(']');
	        return array;
	      }
	      this.next(',');
	      ch = this.white();
	    }
	  }
	  this.error("Bad array");
	};
	
	Parser.prototype.value = function () {
	  var ch;
	  this.white();
	  ch = this.ch;
	  switch (ch) {
	  case '{': return this.object();
	  case '[': return this.array();
	  case '"': case "'": case "`": return this.string();
	  case '-': return this.number();
	  default:
	    return ch >= '0' && ch <= '9' ? this.number() : this.identifier();
	  }
	};
	
	/**
	 * Get the function for the given operator.
	 * A `.precedence` value is added to the function, with increasing
	 * precedence having a higher number.
	 * @return {function} The function that performs the infix operation
	 */
	Parser.prototype.operator = function (not_an_array) {
	  var op = '',
	    op_fn,
	    ch = this.white();
	
	  while (ch) {
	    if (is_identifier_char(ch) || ch <= ' ' || ch === '' ||
	        ch === '"' || ch === "'" || ch === '{' || ch === '(' ||
	        ch === "`" || ch === ')') {
	      break;
	    }
	
	    if (!not_an_array && ch === '[') {
	      break;
	    }
	
	    op += ch;
	    ch = this.next();
	
	    // An infix followed by the prefix e.g. a + @b
	    // TODO: other prefix unary operators
	    if (ch === '@') {
	      break;
	    }
	  }
	
	  if (op !== '') {
	    op_fn = operators[op];
	
	    if (!op_fn) {
	      this.error("Bad operator: '" + op + "'.");
	    }
	  }
	
	  return op_fn;
	};
	
	/**
	 * Filters
	 * Returns what the Node interprets as an "operator".
	 * e.g.
	 *   <span data-bind="text: name | fit:20 | uppercase"></span>
	 */
	Parser.prototype.filter = function() {
	  var ch = this.next(),
	    args = [],
	    next_filter = function(v) { return v; },
	    name = this.name();
	
	  if (!options.filters[name]) {
	    options.onError("Cannot find filter by the name of: " + name);
	  }
	
	  ch = this.white();
	
	  while (ch) {
	    if (ch === ':') {
	      ch = this.next();
	      args.push(this.expression('|'));
	    }
	
	    if (ch === '|') {
	      next_filter = this.filter();
	      break;
	    }
	
	    if (ch === ',') { break; }
	
	    ch = this.white();
	  }
	
	  var filter = function filter(value) {
	    var arg_values = [value];
	
	    for (var i = 0, j = args.length; i < j; ++i) {
	      arg_values.push(Node.value_of(args[i]));
	    }
	
	    return next_filter(options.filters[name].apply(null, arg_values));
	  };
	
	  // Lowest precedence.
	  filter.precedence = 1;
	  return filter;
	};
	
	
	/**
	 * Parse an expression – builds an operator tree, in something like
	 * Shunting-Yard.
	 *   See: http://en.wikipedia.org/wiki/Shunting-yard_algorithm
	 *
	 * @return {function}   A function that computes the value of the expression
	 *                      when called or a primitive.
	 */
	Parser.prototype.expression = function (filterable) {
	  var op,
	    nodes = [],
	    ch = this.white();
	
	  while (ch) {
	    // unary prefix operators
	    op = this.operator();
	    if (op) {
	      nodes.push(undefined);  // LHS Tree node.
	      nodes.push(op);
	      ch = this.white();
	    }
	
	    if (ch === '(') {
	      this.next();
	      nodes.push(this.expression());
	      this.next(')');
	    } else {
	      nodes.push(this.value());
	    }
	    ch = this.white();
	
	    if (ch === ':' || ch === '}' || ch === ',' || ch === ']' ||
	        ch === ')' || ch === '' || ch === '`' || (ch === '|' && filterable === '|')) {
	      break;
	    }
	
	    // filters
	    if (ch === '|' && this.lookahead() !== '|' && filterable) {
	      nodes.push(this.filter());
	      nodes.push(undefined);
	      break;
	    }
	
	    // infix or postfix operators
	    op = this.operator(true);
	
	    if (op === operators['?']) {
	      this.ternary(nodes);
	      break;
	    } else if (op === operators['.']) {
	      nodes.push(op);
	      nodes.push(this.member());
	      op = null;
	    } else if (op === operators['[']) {
	      nodes.push(op);
	      nodes.push(this.expression());
	      ch = this.next(']');
	      op = null;
	    } else if (op) {
	      nodes.push(op);
	    }
	
	    ch = this.white();
	
	    if (ch === ']' || (!op && ch === '(')) { break; }
	  }
	
	  if (nodes.length === 0) {
	    return undefined;
	  }
	
	  var dereferences = this.dereferences();
	
	  if (nodes.length === 1 && !dereferences.length) {
	    return nodes[0];
	  }
	
	  for (var i = 0, j = dereferences.length; i < j; ++i) {
	    var deref = dereferences[i];
	    if (deref.constructor === Arguments) {
	      nodes.push(operators.call);
	    } else {
	      nodes.push(operators['.']);
	    }
	    nodes.push(deref);
	  }
	
	  return new Expression(nodes);
	};
	
	
	Parser.prototype.ternary = function(nodes) {
	  var ternary = new Ternary();
	  ternary.yes = this.expression();
	  this.next(":");
	  ternary.no = this.expression();
	  nodes.push(operators['?']);
	  nodes.push(ternary);
	};
	
	/**
	 * Parse the arguments to a function, returning an Array.
	 *
	 */
	Parser.prototype.func_arguments = function () {
	  var args = [],
	    ch = this.next('(');
	
	  while(ch) {
	    ch = this.white();
	    if (ch === ')') {
	      this.next(')');
	      return new Arguments(this, args);
	    } else {
	      args.push(this.expression());
	      ch = this.white();
	    }
	    if (ch !== ')') { this.next(','); }
	  }
	
	  this.error("Bad arguments to function");
	};
	
	
	/**
	 * The literal string reference `abc` in an `x.abc` expression.
	 */
	Parser.prototype.member = function () {
	  var member = '',
	    ch = this.white();
	  while (ch) {
	    if (!is_identifier_char(ch)) {
	      break;
	    }
	    member += ch;
	    ch = this.next();
	  }
	  return member;
	};
	
	
	/**
	 * A dereference applies to an identifer, being either a function
	 * call "()" or a membership lookup with square brackets "[member]".
	 * @return {fn or undefined}  Dereference function to be applied to the
	 *                            Identifier
	 */
	Parser.prototype.dereference = function () {
	  var member,
	    ch = this.white();
	
	  while (ch) {
	    if (ch === '(') {
	      // a(...) function call
	      return this.func_arguments();
	    } else if (ch === '[') {
	      // a[x] membership
	      this.next('[');
	      member = this.expression();
	      this.white();
	      this.next(']');
	
	      return member;
	    } else if (ch === '.') {
	      // a.x membership
	      this.next('.');
	      return this.member();
	    } else {
	      break;
	    }
	  }
	  return;
	};
	
	Parser.prototype.dereferences = function () {
	  var ch = this.white(),
	    dereferences = [],
	    deref;
	
	  while (ch) {
	    deref = this.dereference();
	    if (deref !== undefined) {
	      dereferences.push(deref);
	    } else {
	      break;
	    }
	  }
	  return dereferences;
	};
	
	
	Parser.prototype.identifier = function () {
	  var token = '', ch;
	  ch = this.white();
	  while (ch) {
	    if (!is_identifier_char(ch)) {
	      break;
	    }
	    token += ch;
	    ch = this.next();
	  }
	  switch (token) {
	  case 'true': return true;
	  case 'false': return false;
	  case 'null': return null;
	  case 'undefined': return void 0;
	  case 'function':
	    throw new Error("Knockout: Anonymous functions are no longer supported, but `=>` lambas are.");
	    //return this.anonymous_fn();
	  }
	  return new Identifier(this, token, this.dereferences());
	};
	
	
	/* Parse an anomymous function () {} ...
	
	 NOTE: Anonymous functions are not supported, primarily because
	 this is not a full Javascript parser.  While a subset of anonymous
	 functions can (and may) be supported, notably lambda-like (a single
	 statement), at this time an error is raised to indiate that the binding
	 has failed and the => lambda workaround.
	
	Parser.prototype.anonymous_fn = function () {
	  var expr;
	  this.white();
	  this.next("(");
	  this.white();
	  this.next(")");
	  this.white();
	  this.next("{");
	  this.white();
	  if (this.text.substr(this.at - 1, 6) === 'return') {
	    this.at = this.at + 5;
	  }
	  this.next();
	  expr = this.expression();
	  this.next("}");
	  return function () { return expr.get_value(); };
	};
	*/
	
	Parser.prototype.read_bindings = function () {
	  var key,
	    bindings = {},
	    sep,
	    expr,
	    ch = this.ch;
	
	  while (ch) {
	    key = this.name();
	    sep = this.white();
	
	    if (!sep || sep === ',') {
	      if (sep) {
	        ch = this.next(',');
	      } else {
	        ch = '';
	      }
	      // A "bare" binding e.g. "text"; substitute value of 'null'
	      // so it becomes "text: null".
	      bindings[key] = null;
	
	    } else {
	
	      if (key.indexOf('.') !== -1) {
	        // Namespaced – i.e.
	        //    `attr.css: x` becomes `attr: { css: x }`
	        //     ^^^ - key
	        key = key.split('.');
	        bindings[key[0]] = bindings[key[0]] || {};
	
	        if (key.length !== 2) {
	          options.onError("Binding " + key + " should have two parts (a.b).");
	        } else if (bindings[key[0]].constructor !== Object) {
	          options.onError("Binding " + key[0] + "." + key[1] + " paired with a non-object.");
	        }
	
	        ch = this.next(':');
	        this.object_add_value(bindings[key[0]], key[1], this.expression(true));
	
	      } else {
	        ch = this.next(':');
	        if (bindings[key] && typeof bindings[key] === 'object' && bindings[key].constructor === Object) {
	          // Extend a namespaced bindings e.g. we've previously seen
	          // on.x, now we're seeing on: { 'abc' }.
	          expr = this.expression(true);
	          if (typeof expr !== 'object' || expr.constructor !== Object) {
	            options.onError("Expected plain object for " + key + " value.");
	          } else {
	            extend(bindings[key], expr);
	          }
	        } else {
	          bindings[key] = this.expression(true);
	        }
	      }
	
	      this.white();
	      if (this.ch) {
	        ch = this.next(',');
	      } else {
	        ch = '';
	      }
	    }
	  }
	  return bindings;
	};
	
	
	/**
	* Convert result[name] from a value to a function (i.e. `valueAccessor()`)
	* @param  {object} result [Map of top-level names to values]
	* @return {object}        [Map of top-level names to functions]
	*
	* Accessors may be one of (below) constAccessor, identifierAccessor,
	* expressionAccessor, or nodeAccessor.
	*/
	Parser.prototype.convert_to_accessors = function (result) {
	
	  objectForEach(result, function (name, value) {
	    if (value instanceof Identifier) {
	      // Return a function that, with no arguments returns
	      // the value of the identifier, otherwise sets the
	      // value of the identifier to the first given argument.
	      Object.defineProperty(result, name, {
	        value: function (optionalValue, options$$1) {
	          if (arguments.length === 0) {
	            return value.get_value();
	          }
	          if (options$$1 && options$$1.onlyIfChanged && optionalValue === value.get_value()) {
	            return;
	          }
	          return value.set_value(optionalValue);
	        }
	      });
	    } else if (value instanceof Expression) {
	      result[name] = function expressionAccessor() {
	        return value.get_value();
	      };
	    } else if (value instanceof Node) {
	      result[name] = function nodeAccessor() {
	        return value.get_node_value();
	      };
	    } else if (typeof(value) !== 'function') {
	      result[name] = function constAccessor() {
	        return clonePlainObjectDeep(value);
	      };
	    } else if (typeof value === 'function') {
	      result[name] = value;
	    }
	  });
	
	  return result;
	};
	
	/**
	 * Get the bindings as name: accessor()
	 * @param  {string} source The binding string to parse.
	 * @return {object}        Map of name to accessor function.
	 */
	Parser.prototype.parse = function (source) {
	  this.text = (source || '').trim();
	  this.at = 0;
	  this.ch = ' ';
	
	  if (!this.text) {
	    return null;
	  }
	
	  try {
	    var result = this.read_bindings();
	  } catch (e) {
	    // `e` may be 1.) a proper Error; 2.) a parsing error; or 3.) a string.
	    var emsg = typeof e === Error ?
	          "\nMessage: <" + e.name + "> " + e.message :
	        typeof e === 'object' && 'at' in e ?
	          "\n" + e.name + " " + e.message + " of \n"
	          + "   " + e.text + "\n"
	          + Array(e.at).join(" ") + "_/ 🔥 \\_\n"
	        : e;
	    options.onError(new Error(emsg));
	  }
	
	  this.white();
	  if (this.ch) {
	    this.error("Syntax Error");
	  }
	
	  return this.convert_to_accessors(result);
	};
	
	
	/**
	 * Determine if a character is a valid item in an identifier.
	 * Note that we do not check whether the first item is a number, nor do we
	 * support unicode identifiers here.
	 *
	 * See: http://docstore.mik.ua/orelly/webprog/jscript/ch02_07.htm
	 * @param  {String}  ch  The character
	 * @return {Boolean}     True if [A-Za-z0-9_]
	 */
	function is_identifier_char(ch) {
	  return (ch >= 'A' && ch <= 'Z') ||
	         (ch >= 'a' && ch <= 'z') ||
	         (ch >= '0' && ch <= 9) ||
	          ch === '_' || ch === '$';
	}
	
	function Provider(options$$1) {
	  options$$1 = options$$1 || {};
	  this.otherProviders = options$$1.otherProviders || [];
	  this.bindingPreProcessors = options$$1.bindingPreProcessors || [];
	  this.nodePreProcessors = options$$1.preprocessors || [];
	
	  // the binding classes -- defaults to the bind's
	  // bindingsHandlers
	  var bindingHandlers = this.bindingHandlers = {};
	
	  addGetterSetter(bindingHandlers);
	
	  // Cache the result of parsing binding strings.
	  // TODO
	  // this.cache = {};
	}
	
	
	/** Add non-enumerable `get` and `set` properties.
	 */
	// bindingHandlers.set(nameOrObject, value)
	// ---
	// Examples:
	//
	// bindingHandlers.set('name', bindingDefinition)
	// bindingHandlers.set({ text: textBinding, input: inputBinding })
	function addGetterSetter(bindingHandlersObject) {
	  Object.defineProperties(bindingHandlersObject, {
	    'set': {
	      configurable: true,
	      value: function setBindingHandler(nameOrObject, value) {
	        if (typeof nameOrObject === 'string') {
	          bindingHandlersObject[nameOrObject] = value;
	        } else if (typeof nameOrObject === 'object') {
	          if (value !== undefined) {
	            options.onError(
	              new Error("Given extraneous `value` parameter (first param should be a string, but it was an object)." + nameOrObject));
	          }
	          extend(bindingHandlersObject, nameOrObject);
	        } else {
	          options.onError(
	            new Error("Given a bad binding handler type: " + nameOrObject));
	        }
	      }
	    },
	    'get': {
	      configurable: true,
	      value: function getBindingHandler(name) {
	        // NOTE: Strict binding checking ought to occur here.
	        return bindingHandlersObject[name];
	      }
	    }
	  });
	}
	
	
	
	function nodeHasBindings(node) {
	  if (node.nodeType === node.ELEMENT_NODE) {
	    if (node.getAttribute(options.defaultBindingAttribute)) { return true; }
	  } else if (node.nodeType === node.COMMENT_NODE) {
	    if (options.allowVirtualElements &&
	        isStartComment(node)) {
	      return true;
	    }
	  }
	
	  for (var i = 0, j = this.otherProviders.length; i < j; i++) {
	    if (this.otherProviders[i].nodeHasBindings(node)) { return true; }
	  }
	
	  return false;
	}
	
	
	function getBindingsString(node) {
	  switch (node.nodeType) {
	  case node.ELEMENT_NODE:
	    return node.getAttribute(options.defaultBindingAttribute);
	  case node.COMMENT_NODE:
	    return virtualNodeBindingValue(node);
	  default:
	    return null;
	  }
	}
	
	
	// Note we do not seem to need both getBindings and getBindingAccessors; just
	// the latter appears to suffice.
	//
	// Return the name/valueAccessor pairs.
	// (undocumented replacement for getBindings)
	// see https://github.com/knockout/knockout/pull/742
	function getBindingAccessors(node, context) {
	  var bindings = {},
	    parser = new Parser(node, context, options.bindingGlobals),
	    binding_string = this.getBindingsString(node);
	
	  if (binding_string) {
	    binding_string = this.preProcessBindings(binding_string);
	    bindings = parser.parse(binding_string || '');
	  }
	
	  arrayForEach(this.otherProviders, function(p) {
	    extend(bindings, p.getBindingAccessors(node, context, parser, bindings));
	  });
	
	  objectForEach(bindings, this.preProcessBindings.bind(this));
	
	  return bindings;
	}
	
	
	/** Call bindingHandler.preprocess on each respective binding string.
	 *
	 * The `preprocess` property of bindingHandler must be a static
	 * function (i.e. on the object or constructor).
	 */
	function preProcessBindings(bindingString) {
	  var results = [];
	  var bindingHandlers = this.bindingHandlers;
	  var preprocessed;
	
	  // Check for a Provider.preprocessNode property
	  if (typeof this.preprocessNode === 'function') {
	    preprocessed = this.preprocessNode(bindingString, this);
	    if (preprocessed) { bindingString = preprocessed; }
	  }
	
	  for (var i = 0, j = this.bindingPreProcessors.length; i < j; ++i) {
	    preprocessed = this.bindingPreProcessors[i](bindingString, this);
	    if (preprocessed) { bindingString = preprocessed; }
	  }
	
	  function addBinding(name, value) {
	    results.push("'" + name + "':" + value);
	  }
	
	  function processBinding(key, value) {
	    // Get the "on" binding from "on.click"
	    var handler = bindingHandlers.get(key.split('.')[0]);
	
	    if (handler && typeof handler.preprocess === 'function') {
	      value = handler.preprocess(value, key, processBinding);
	    }
	
	    addBinding(key, value);
	  }
	
	  arrayForEach(parseObjectLiteral(bindingString), function(keyValueItem) {
	    processBinding(
	      keyValueItem.key || keyValueItem.unknown,
	      keyValueItem.value
	    );
	  });
	
	  return results.join(',');
	}
	
	
	/**
	 * Run the preprocessors on a given node
	 * @param  {HTMLElement} node The node to be modified/preprocessed.
	 * @return {Array<HTMLElement>}     An array of nodes.
	 *
	 * FIXME: This only lets one node preprocessor modify the nodes; more
	 * generically we want to be able to have a nested node->nodes for each
	 * preprocessor, eventually flattening a tree-like result.
	 */
	function preprocessNode(node, startingPreprocessorIndex) {
	  var newNodes;
	  for (var i = startingPreprocessorIndex || 0, j = this.nodePreProcessors.length; i < j; i++) {
	    newNodes = this.nodePreProcessors[i].call(this, node, this);
	    if (newNodes) { return newNodes; }
	  }
	  return;
	}
	
	
	// addProvider(provider instance)
	// ---
	//
	// Other providers (such as ko.components) can be added with the `addProvider`
	// call.  Each provider is expected to have a `nodeHasBindings` and a
	// `getBindingAccessors` function.
	//
	function addProvider(p) { this.otherProviders.push(p); }
	function clearProviders() { this.otherProviders.length = 0; }
	
	function addBindingPreprocessor(fn) { this.bindingPreProcessors.push(fn); }
	function clearBindingPreprocessors() { this.bindingPreProcessors.length = 0; }
	
	function addNodePreprocessor(fn) { this.nodePreProcessors.push(fn); }
	function clearNodePreprocessors() { this.nodePreProcessors.length = 0; }
	
	
	extend(Provider.prototype, {
	  nodeHasBindings: nodeHasBindings,
	  getBindingAccessors: getBindingAccessors,
	  getBindingsString: getBindingsString,
	  Parser: Parser,
	  preProcessBindings: preProcessBindings,
	  preprocessNode: preprocessNode,
	
	  addProvider: addProvider,
	  addBindingPreprocessor: addBindingPreprocessor,
	  clearProviders: clearProviders,
	  clearBindingPreprocessors: clearBindingPreprocessors,
	  addNodePreprocessor: addNodePreprocessor,
	  clearNodePreprocessors: clearNodePreprocessors,
	});
	
	var storedBindingContextDomDataKey = nextKey();
	
	
	
	// The bindingContext constructor is only called directly to create the root context. For child
	// contexts, use bindingContext.createChildContext or bindingContext.extend.
	function bindingContext(dataItemOrAccessor, parentContext, dataItemAlias, extendCallback, settings) {
	
	    var self = this,
	        isFunc = typeof(dataItemOrAccessor) == "function" && !isObservable(dataItemOrAccessor),
	        nodes,
	        subscribable$$1;
	
	    // The binding context object includes static properties for the current, parent, and root view models.
	    // If a view model is actually stored in an observable, the corresponding binding context object, and
	    // any child contexts, must be updated when the view model is changed.
	    function updateContext() {
	        // Most of the time, the context will directly get a view model object, but if a function is given,
	        // we call the function to retrieve the view model. If the function accesses any observables or returns
	        // an observable, the dependency is tracked, and those observables can later cause the binding
	        // context to be updated.
	        var dataItemOrObservable = isFunc ? dataItemOrAccessor() : dataItemOrAccessor,
	            dataItem = unwrap(dataItemOrObservable);
	
	        if (parentContext) {
	            // When a "parent" context is given, register a dependency on the parent context. Thus whenever the
	            // parent context is updated, this context will also be updated.
	            if (parentContext._subscribable)
	                parentContext._subscribable();
	
	            // Copy $root and any custom properties from the parent context
	            extend(self, parentContext);
	
	            // Because the above copy overwrites our own properties, we need to reset them.
	            self._subscribable = subscribable$$1;
	        } else {
	            self.$parents = [];
	            self.$root = dataItem;
	
	            // Export 'ko' in the binding context so it will be available in bindings and templates
	            // even if 'ko' isn't exported as a global, such as when using an AMD loader.
	            // See https://github.com/SteveSanderson/knockout/issues/490
	            self.ko = options.knockoutInstance;
	        }
	        self.$rawData = dataItemOrObservable;
	        self.$data = dataItem;
	        if (dataItemAlias)
	            self[dataItemAlias] = dataItem;
	
	        // The extendCallback function is provided when creating a child context or extending a context.
	        // It handles the specific actions needed to finish setting up the binding context. Actions in this
	        // function could also add dependencies to this binding context.
	        if (extendCallback)
	            extendCallback(self, parentContext, dataItem);
	
	        return self.$data;
	    }
	
	    function disposeWhen() {
	        return nodes && !anyDomNodeIsAttachedToDocument(nodes);
	    }
	
	    if (settings && settings.exportDependencies) {
	        // The "exportDependencies" option means that the calling code will track any dependencies and re-create
	        // the binding context when they change.
	        updateContext();
	        return;
	    }
	
	    subscribable$$1 = computed(updateContext, null, { disposeWhen: disposeWhen, disposeWhenNodeIsRemoved: true });
	
	    // At this point, the binding context has been initialized, and the "subscribable" computed observable is
	    // subscribed to any observables that were accessed in the process. If there is nothing to track, the
	    // computed will be inactive, and we can safely throw it away. If it's active, the computed is stored in
	    // the context object.
	    if (subscribable$$1.isActive()) {
	        self._subscribable = subscribable$$1;
	
	        // Always notify because even if the model ($data) hasn't changed, other context properties might have changed
	        subscribable$$1.equalityComparer = null;
	
	        // We need to be able to dispose of this computed observable when it's no longer needed. This would be
	        // easy if we had a single node to watch, but binding contexts can be used by many different nodes, and
	        // we cannot assume that those nodes have any relation to each other. So instead we track any node that
	        // the context is attached to, and dispose the computed when all of those nodes have been cleaned.
	
	        // Add properties to *subscribable* instead of *self* because any properties added to *self* may be overwritten on updates
	        nodes = [];
	        subscribable$$1._addNode = function(node) {
	            nodes.push(node);
	            addDisposeCallback(node, function(node) {
	                arrayRemoveItem(nodes, node);
	                if (!nodes.length) {
	                    subscribable$$1.dispose();
	                    self._subscribable = subscribable$$1 = undefined;
	                }
	            });
	        };
	    }
	}
	
	// Extend the binding context hierarchy with a new view model object. If the parent context is watching
	// any observables, the new child context will automatically get a dependency on the parent context.
	// But this does not mean that the $data value of the child context will also get updated. If the child
	// view model also depends on the parent view model, you must provide a function that returns the correct
	// view model on each update.
	bindingContext.prototype.createChildContext = function (dataItemOrAccessor, dataItemAlias, extendCallback, settings) {
	    return new bindingContext(dataItemOrAccessor, this, dataItemAlias, function(self, parentContext) {
	        // Extend the context hierarchy by setting the appropriate pointers
	        self.$parentContext = parentContext;
	        self.$parent = parentContext.$data;
	        self.$parents = (parentContext.$parents || []).slice(0);
	        self.$parents.unshift(self.$parent);
	        if (extendCallback)
	            extendCallback(self);
	    }, settings);
	};
	
	// Extend the binding context with new custom properties. This doesn't change the context hierarchy.
	// Similarly to "child" contexts, provide a function here to make sure that the correct values are set
	// when an observable view model is updated.
	bindingContext.prototype.extend = function(properties) {
	    // If the parent context references an observable view model, "_subscribable" will always be the
	    // latest view model object. If not, "_subscribable" isn't set, and we can use the static "$data" value.
	    return new bindingContext(this._subscribable || this.$data, this, null, function(self, parentContext) {
	        // This "child" context doesn't directly track a parent observable view model,
	        // so we need to manually set the $rawData value to match the parent.
	        self.$rawData = parentContext.$rawData;
	        extend(self, typeof(properties) === "function" ? properties() : properties);
	    });
	};
	
	bindingContext.prototype.createStaticChildContext = function (dataItemOrAccessor, dataItemAlias) {
	    return this.createChildContext(dataItemOrAccessor, dataItemAlias, null, { "exportDependencies": true });
	};
	
	
	function storedBindingContextForNode(node, bindingContext) {
	    if (arguments.length == 2) {
	        set(node, storedBindingContextDomDataKey, bindingContext);
	        if (bindingContext._subscribable)
	            bindingContext._subscribable._addNode(node);
	    } else {
	        return get(node, storedBindingContextDomDataKey);
	    }
	}
	
	
	// Retrieving binding context from arbitrary nodes
	function contextFor(node) {
	    // We can only do something meaningful for elements and comment nodes (in particular, not text nodes, as IE can't store domdata for them)
	    switch (node.nodeType) {
	    case 1:
	    case 8:
	        var context = storedBindingContextForNode(node);
	        if (context) return context;
	        if (node.parentNode) return contextFor(node.parentNode);
	        break;
	    }
	    return undefined;
	}
	
	
	function dataFor(node) {
	    var context = contextFor(node);
	    return context ? context.$data : undefined;
	}
	
	/* eslint no-cond-assign: 0 */
	
	// The following element types will not be recursed into during binding.
	var bindingDoesNotRecurseIntoElementTypes = {
	    // Don't want bindings that operate on text nodes to mutate <script> and <textarea> contents,
	    // because it's unexpected and a potential XSS issue.
	    // Also bindings should not operate on <template> elements since this breaks in Internet Explorer
	    // and because such elements' contents are always intended to be bound in a different context
	    // from where they appear in the document.
	    'script': true,
	    'textarea': true,
	    'template': true
	};
	
	// Use an overridable method for retrieving binding handlers so that a plugins may support dynamically created handlers
	function getBindingHandler$1(bindingKey) {
	    return options.bindingProviderInstance.bindingHandlers.get(bindingKey);
	}
	
	
	// Returns the valueAccesor function for a binding value
	function makeValueAccessor(value) {
	    return function() {
	        return value;
	    };
	}
	
	// Returns the value of a valueAccessor function
	function evaluateValueAccessor(valueAccessor) {
	    return valueAccessor();
	}
	
	// Given a function that returns bindings, create and return a new object that contains
	// binding value-accessors functions. Each accessor function calls the original function
	// so that it always gets the latest value and all dependencies are captured. This is used
	// by ko.applyBindingsToNode and getBindingsAndMakeAccessors.
	function makeAccessorsFromFunction(callback) {
	    return objectMap(ignore(callback), function(value, key) {
	        return function() {
	            return callback()[key];
	        };
	    });
	}
	
	// Given a bindings function or object, create and return a new object that contains
	// binding value-accessors functions. This is used by ko.applyBindingsToNode.
	function makeBindingAccessors(bindings, context, node) {
	    if (typeof bindings === 'function') {
	        return makeAccessorsFromFunction(bindings.bind(null, context, node));
	    } else {
	        return objectMap(bindings, makeValueAccessor);
	    }
	}
	
	// This function is used if the binding provider doesn't include a getBindingAccessors function.
	// It must be called with 'this' set to the provider instance.
	function getBindingsAndMakeAccessors(node, context) {
	    return makeAccessorsFromFunction(this.getBindings.bind(this, node, context));
	}
	
	function validateThatBindingIsAllowedForVirtualElements(bindingName) {
	    var bindingHandler = options.bindingProviderInstance.bindingHandlers[bindingName],
	        validator;
	    if (typeof bindingHandler === 'function') {
	        validator = bindingHandler.allowVirtualElements || (
	            typeof bindingHandler.prototype === 'object' &&
	            Boolean(bindingHandler.prototype.allowVirtualElements)
	        );
	    } else {
	        validator = bindingHandler.allowVirtualElements || allowedBindings[bindingName];
	    }
	    if (!validator)
	        throw new Error("The binding '" + bindingName + "' cannot be used with virtual elements");
	}
	
	function applyBindingsToDescendantsInternal (bindingContext$$1, elementOrVirtualElement, bindingContextsMayDifferFromDomParentElement) {
	    var currentChild,
	        nextInQueue = firstChild(elementOrVirtualElement),
	        provider = options.bindingProviderInstance,
	        preprocessNode = provider.preprocessNode;
	
	    // Preprocessing allows a binding provider to mutate a node before bindings are applied to it. For example it's
	    // possible to insert new siblings after it, and/or replace the node with a different one. This can be used to
	    // implement custom binding syntaxes, such as {{ value }} for string interpolation, or custom element types that
	    // trigger insertion of <template> contents at that point in the document.
	    if (preprocessNode) {
	        while (currentChild = nextInQueue) {
	            nextInQueue = nextSibling(currentChild);
	            preprocessNode.call(provider, currentChild);
	        }
	        // Reset nextInQueue for the next loop
	        nextInQueue = firstChild(elementOrVirtualElement);
	    }
	
	    while (currentChild = nextInQueue) {
	        // Keep a record of the next child *before* applying bindings, in case the binding removes the current child from its position
	        nextInQueue = nextSibling(currentChild);
	        applyBindingsToNodeAndDescendantsInternal(bindingContext$$1, currentChild, bindingContextsMayDifferFromDomParentElement);
	    }
	}
	
	function applyBindingsToNodeAndDescendantsInternal (bindingContext$$1, nodeVerified, bindingContextMayDifferFromDomParentElement) {
	    var shouldBindDescendants = true;
	
	    // Perf optimisation: Apply bindings only if...
	    // (1) We need to store the binding context on this node (because it may differ from the DOM parent node's binding context)
	    //     Note that we can't store binding contexts on non-elements (e.g., text nodes), as IE doesn't allow expando properties for those
	    // (2) It might have bindings (e.g., it has a data-bind attribute, or it's a marker for a containerless template)
	    var isElement = (nodeVerified.nodeType === 1);
	    if (isElement) // Workaround IE <= 8 HTML parsing weirdness
	        normaliseVirtualElementDomStructure(nodeVerified);
	
	    var shouldApplyBindings = (isElement && bindingContextMayDifferFromDomParentElement)             // Case (1)
	                           || options.bindingProviderInstance.nodeHasBindings(nodeVerified);       // Case (2)
	    if (shouldApplyBindings)
	        shouldBindDescendants = applyBindingsToNodeInternal(nodeVerified, null, bindingContext$$1, bindingContextMayDifferFromDomParentElement).shouldBindDescendants;
	
	    if (shouldBindDescendants && !bindingDoesNotRecurseIntoElementTypes[tagNameLower(nodeVerified)]) {
	        // We're recursing automatically into (real or virtual) child nodes without changing binding contexts. So,
	        //  * For children of a *real* element, the binding context is certainly the same as on their DOM .parentNode,
	        //    hence bindingContextsMayDifferFromDomParentElement is false
	        //  * For children of a *virtual* element, we can't be sure. Evaluating .parentNode on those children may
	        //    skip over any number of intermediate virtual elements, any of which might define a custom binding context,
	        //    hence bindingContextsMayDifferFromDomParentElement is true
	        applyBindingsToDescendantsInternal(bindingContext$$1, nodeVerified, /* bindingContextsMayDifferFromDomParentElement: */ !isElement);
	    }
	}
	
	var boundElementDomDataKey = nextKey();
	
	
	function topologicalSortBindings(bindings) {
	    // Depth-first sort
	    var result = [],                // The list of key/handler pairs that we will return
	        bindingsConsidered = {},    // A temporary record of which bindings are already in 'result'
	        cyclicDependencyStack = []; // Keeps track of a depth-search so that, if there's a cycle, we know which bindings caused it
	    objectForEach(bindings, function pushBinding(bindingKey) {
	        if (!bindingsConsidered[bindingKey]) {
	            var binding = getBindingHandler$1(bindingKey);
	            if (binding) {
	                // First add dependencies (if any) of the current binding
	                if (binding.after) {
	                    cyclicDependencyStack.push(bindingKey);
	                    arrayForEach(binding.after, function(bindingDependencyKey) {
	                        if (bindings[bindingDependencyKey]) {
	                            if (arrayIndexOf(cyclicDependencyStack, bindingDependencyKey) !== -1) {
	                                throw Error("Cannot combine the following bindings, because they have a cyclic dependency: " + cyclicDependencyStack.join(", "));
	                            } else {
	                                pushBinding(bindingDependencyKey);
	                            }
	                        }
	                    });
	                    cyclicDependencyStack.length--;
	                }
	                // Next add the current binding
	                result.push({ key: bindingKey, handler: binding });
	            }
	            bindingsConsidered[bindingKey] = true;
	        }
	    });
	
	    return result;
	}
	
	// This is called when the bindingHandler is an object (with `init` and/or
	// `update` methods)
	function execObjectBindingHandlerOnNode(bindingKeyAndHandler, node, getValueAccessor, allBindings, bindingContext$$1, reportBindingError) {
	    var handlerInitFn = bindingKeyAndHandler.handler["init"],
	        handlerUpdateFn = bindingKeyAndHandler.handler["update"],
	        bindingKey = bindingKeyAndHandler.key,
	        controlsDescendantBindings = false;
	
	    // Run init, ignoring any dependencies
	    if (typeof handlerInitFn === "function") {
	        try {
	            ignore(function() {
	                var initResult = handlerInitFn(node, getValueAccessor(bindingKey), allBindings, bindingContext$$1.$data, bindingContext$$1);
	
	                // If this binding handler claims to control descendant bindings, make a note of this
	                if (initResult && initResult.controlsDescendantBindings) {
	                    controlsDescendantBindings = true;
	                }
	            });
	        } catch(ex) {
	            reportBindingError('init', ex);
	        }
	    }
	
	    // Run update in its own computed wrapper
	    if (typeof handlerUpdateFn === "function") {
	        computed(
	            function() {
	                try {
	                    handlerUpdateFn(node, getValueAccessor(bindingKey), allBindings, bindingContext$$1.$data, bindingContext$$1);
	                } catch (ex) {
	                    reportBindingError('update', ex);
	                }
	            },
	            null,
	            { disposeWhenNodeIsRemoved: node }
	        );
	    }
	    return controlsDescendantBindings;
	}
	
	// This is called when the bindingHandler is a function (or ES6 class).
	// Node that these will work only for browsers with Object.defineProperty,
	// i.e. IE9+.
	function execNewBindingHandlerOnNode(bindingKeyAndHandler, node, getValueAccessor, allBindings, bindingContext$$1, reportBindingError) {
	    var bindingKey = bindingKeyAndHandler.key,
	        handlerParams = {
	            element: node,
	            $data: bindingContext$$1.$data,
	            $context: bindingContext$$1,
	            allBindings: allBindings
	        },
	        handlerConstructor = bindingKeyAndHandler.handler,
	        handlerInstance,
	        subscriptions = [];
	
	    Object.defineProperty(handlerParams, 'value', {
	        get: function () { return getValueAccessor(bindingKey)(); }
	    });
	
	    function handlerConstructorWrapper() {
	        handlerInstance = this;
	
	        // The handler instance will have properties `computed` and
	        // `subscribe`, which are almost the same as the `ko.-` equivalent
	        // except their lifecycle is limited to that of the node (i.e.
	        // they are automatically disposed).
	        this.computed = function handlerInstanceComputed(functionOrObject) {
	            var settings = typeof functionOrObject === 'function' ?
	                { read: functionOrObject, write: functionOrObject } :
	                functionOrObject;
	            extend(settings, {
	                owner: handlerInstance,
	                disposeWhenNodeIsRemoved: node
	            });
	            return computed(settings);
	        };
	
	        this.subscribe = function handlerInstanceSubscription(subscribable$$1, callback, eventType) {
	            subscriptions.push(
	                subscribable$$1.subscribe(callback, handlerInstance, eventType)
	            );
	        };
	
	        this.value = this.computed(function () {
	            return getValueAccessor(bindingKey)();
	        });
	
	        handlerConstructor.call(this, handlerParams);
	    }
	
	    // We have to wrap the handler instance in this "subclass" because
	    // it's the only way to define this.computed/subscribe before the
	    // handlerConstructor is called, and one would expect those
	    // utilities to be available in the constructor.
	    extend(handlerConstructorWrapper, handlerConstructor);
	    handlerConstructorWrapper.prototype = handlerConstructor.prototype;
	
	    try {
	        new handlerConstructorWrapper();
	    } catch(ex) {
	        reportBindingError('construction', ex);
	    }
	
	    addDisposeCallback(node, function () {
	        if (typeof handlerInstance.dispose === "function") {
	            handlerInstance.dispose.call(handlerInstance);
	        }
	        arrayForEach(subscriptions, function (subs) {
	            subs.dispose();
	        });
	    });
	
	    return handlerConstructor.controlsDescendantBindings || handlerInstance.controlsDescendantBindings;
	}
	
	function applyBindingsToNodeInternal(node, sourceBindings, bindingContext$$1, bindingContextMayDifferFromDomParentElement) {
	
	    // Use of allBindings as a function is maintained for backwards compatibility, but its use is deprecated
	    function allBindings() {
	        return objectMap(bindingsUpdater ? bindingsUpdater() : bindings, evaluateValueAccessor);
	    }
	    // The following is the 3.x allBindings API
	    allBindings.get = function(key) {
	        return bindings[key] && evaluateValueAccessor(getValueAccessor(key));
	    };
	    allBindings.has = function(key) {
	        return key in bindings;
	    };
	
	    // Prevent multiple applyBindings calls for the same node, except when a binding value is specified
	    var alreadyBound = get(node, boundElementDomDataKey);
	    if (!sourceBindings) {
	        if (alreadyBound) {
	            onBindingError({
	                during: 'apply',
	                errorCaptured: new Error("You cannot apply bindings multiple times to the same element."),
	                element: node,
	                bindingContext: bindingContext$$1
	            });
	            return false;
	        }
	        set(node, boundElementDomDataKey, true);
	    }
	
	    // Optimization: Don't store the binding context on this node if it's definitely the same as on node.parentNode, because
	    // we can easily recover it just by scanning up the node's ancestors in the DOM
	    // (note: here, parent node means "real DOM parent" not "virtual parent", as there's no O(1) way to find the virtual parent)
	    if (!alreadyBound && bindingContextMayDifferFromDomParentElement)
	        storedBindingContextForNode(node, bindingContext$$1);
	
	    // Use bindings if given, otherwise fall back on asking the bindings provider to give us some bindings
	    var bindings;
	    if (sourceBindings && typeof sourceBindings !== 'function') {
	        bindings = sourceBindings;
	    } else {
	        var provider = options.bindingProviderInstance,
	            getBindings = provider.getBindingAccessors || getBindingsAndMakeAccessors;
	
	        // Get the binding from the provider within a computed observable so that we can update the bindings whenever
	        // the binding context is updated or if the binding provider accesses observables.
	        var bindingsUpdater = computed(
	            function() {
	                bindings = sourceBindings ? sourceBindings(bindingContext$$1, node) : getBindings.call(provider, node, bindingContext$$1);
	                // Register a dependency on the binding context to support observable view models.
	                if (bindings && bindingContext$$1._subscribable)
	                    bindingContext$$1._subscribable();
	                return bindings;
	            },
	            null, { disposeWhenNodeIsRemoved: node }
	        );
	
	        if (!bindings || !bindingsUpdater.isActive())
	            bindingsUpdater = null;
	    }
	
	    var bindingHandlerThatControlsDescendantBindings;
	    if (bindings) {
	        // Return the value accessor for a given binding. When bindings are static (won't be updated because of a binding
	        // context update), just return the value accessor from the binding. Otherwise, return a function that always gets
	        // the latest binding value and registers a dependency on the binding updater.
	        var getValueAccessor = bindingsUpdater
	            ? function (bindingKey) {
	                return function(optionalValue) {
	                    var valueAccessor = bindingsUpdater()[bindingKey];
	                    if (arguments.length === 0) {
	                        return evaluateValueAccessor(valueAccessor);
	                    } else {
	                        return valueAccessor(optionalValue);
	                    }
	                };
	            } : function (bindingKey) { return bindings[bindingKey]; };
	
	        // First put the bindings into the right order
	        var orderedBindings = topologicalSortBindings(bindings);
	
	        // Go through the sorted bindings, calling init and update for each
	        arrayForEach(orderedBindings, function(bindingKeyAndHandler) {
	            var bindingKey = bindingKeyAndHandler.key,
	                controlsDescendantBindings,
	                execBindingFunction = typeof bindingKeyAndHandler.handler === 'function' ?
	                    execNewBindingHandlerOnNode :
	                    execObjectBindingHandlerOnNode;
	
	            if (node.nodeType === 8) {
	                validateThatBindingIsAllowedForVirtualElements(bindingKey);
	            }
	
	            function reportBindingError(during, errorCaptured) {
	                onBindingError({
	                    during: during,
	                    errorCaptured: errorCaptured,
	                    element: node,
	                    bindingKey: bindingKey,
	                    bindings: bindings,
	                    allBindings: allBindings,
	                    valueAccessor: getValueAccessor(bindingKey),
	                    bindingContext: bindingContext$$1
	                });
	            }
	
	            // Note that topologicalSortBindings has already filtered out any nonexistent binding handlers,
	            // so bindingKeyAndHandler.handler will always be nonnull.
	            controlsDescendantBindings = execBindingFunction(
	                bindingKeyAndHandler, node, getValueAccessor,
	                allBindings, bindingContext$$1, reportBindingError);
	
	            if (controlsDescendantBindings) {
	                if (bindingHandlerThatControlsDescendantBindings !== undefined)
	                    throw new Error("Multiple bindings (" + bindingHandlerThatControlsDescendantBindings + " and " + bindingKey + ") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.");
	                bindingHandlerThatControlsDescendantBindings = bindingKey;
	            }
	        });
	    }
	
	    return {
	        'shouldBindDescendants': bindingHandlerThatControlsDescendantBindings === undefined
	    };
	}
	
	
	function getBindingContext(viewModelOrBindingContext) {
	    return viewModelOrBindingContext && (viewModelOrBindingContext instanceof bindingContext)
	        ? viewModelOrBindingContext
	        : new bindingContext(viewModelOrBindingContext);
	}
	
	function applyBindingAccessorsToNode(node, bindings, viewModelOrBindingContext) {
	    if (node.nodeType === 1) // If it's an element, workaround IE <= 8 HTML parsing weirdness
	        normaliseVirtualElementDomStructure(node);
	    return applyBindingsToNodeInternal(node, bindings, getBindingContext(viewModelOrBindingContext), true);
	}
	
	function applyBindingsToNode(node, bindings, viewModelOrBindingContext) {
	    var context = getBindingContext(viewModelOrBindingContext);
	    return applyBindingAccessorsToNode(node, makeBindingAccessors(bindings, context, node), context);
	}
	
	function applyBindingsToDescendants(viewModelOrBindingContext, rootNode) {
	    if (rootNode.nodeType === 1 || rootNode.nodeType === 8)
	        applyBindingsToDescendantsInternal(getBindingContext(viewModelOrBindingContext), rootNode, true);
	}
	
	function applyBindings(viewModelOrBindingContext, rootNode) {
	    // If jQuery is loaded after Knockout, we won't initially have access to it. So save it here.
	    if (!options.jQuery === undefined && window.jQuery) {
	        options.jQuery = window.jQuery;
	    }
	
	    if (rootNode && (rootNode.nodeType !== 1) && (rootNode.nodeType !== 8))
	        throw new Error("ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node");
	    rootNode = rootNode || window.document.body; // Make "rootNode" parameter optional
	
	    applyBindingsToNodeAndDescendantsInternal(getBindingContext(viewModelOrBindingContext), rootNode, true);
	}
	
	function onBindingError(spec) {
	    var error, bindingText;
	    if (spec.bindingKey) {
	        // During: 'init' or initial 'update'
	        error = spec.errorCaptured;
	        bindingText = options.bindingProviderInstance.getBindingsString(spec.element);
	        spec.message = "Unable to process binding \"" + spec.bindingKey
	            + "\" in binding \"" + bindingText
	            + "\"\nMessage: " + error.message;
	    } else {
	        // During: 'apply'
	        error = spec.errorCaptured;
	    }
	    try {
	        extend(error, spec);
	    } catch (e) {
	        // Read-only error e.g. a DOMEXception.
	        spec.stack = error.stack;
	        error = new Error(error.message);
	        extend(error, spec);
	    }
	    options.onError(error);
	}
	
	/* eslint no-cond-assign: 0 */
	// Objective:
	// * Given an input array, a container DOM node, and a function from array elements to arrays of DOM nodes,
	//   map the array elements to arrays of DOM nodes, concatenate together all these arrays, and use them to populate the container DOM node
	// * Next time we're given the same combination of things (with the array possibly having mutated), update the container DOM node
	//   so that its children is again the concatenation of the mappings of the array elements, but don't re-map any array elements that we
	//   previously mapped - retain those nodes, and just insert/delete other ones
	
	// "callbackAfterAddingNodes" will be invoked after any "mapping"-generated nodes are inserted into the container node
	// You can use this, for example, to activate bindings on those nodes.
	
	function mapNodeAndRefreshWhenChanged(containerNode, mapping, valueToMap, callbackAfterAddingNodes, index) {
	    // Map this array value inside a dependentObservable so we re-map when any dependency changes
	    var mappedNodes = [];
	    var dependentObservable = computed(function() {
	        var newMappedNodes = mapping(valueToMap, index, fixUpContinuousNodeArray(mappedNodes, containerNode)) || [];
	
	        // On subsequent evaluations, just replace the previously-inserted DOM nodes
	        if (mappedNodes.length > 0) {
	            replaceDomNodes(mappedNodes, newMappedNodes);
	            if (callbackAfterAddingNodes)
	                ignore(callbackAfterAddingNodes, null, [valueToMap, newMappedNodes, index]);
	        }
	
	        // Replace the contents of the mappedNodes array, thereby updating the record
	        // of which nodes would be deleted if valueToMap was itself later removed
	        mappedNodes.length = 0;
	        arrayPushAll(mappedNodes, newMappedNodes);
	    }, null, { disposeWhenNodeIsRemoved: containerNode, disposeWhen: function() { return !anyDomNodeIsAttachedToDocument(mappedNodes); } });
	    return { mappedNodes : mappedNodes, dependentObservable : (dependentObservable.isActive() ? dependentObservable : undefined) };
	}
	
	var lastMappingResultDomDataKey = nextKey();
	var deletedItemDummyValue = nextKey();
	
	function setDomNodeChildrenFromArrayMapping(domNode, array, mapping, options$$1, callbackAfterAddingNodes) {
	    // Compare the provided array against the previous one
	    array = array || [];
	    options$$1 = options$$1 || {};
	    var isFirstExecution = get(domNode, lastMappingResultDomDataKey) === undefined;
	    var lastMappingResult = get(domNode, lastMappingResultDomDataKey) || [];
	    var lastArray = arrayMap(lastMappingResult, function (x) { return x.arrayEntry; });
	    var editScript = compareArrays(lastArray, array, options$$1['dontLimitMoves']);
	
	    // Build the new mapping result
	    var newMappingResult = [];
	    var lastMappingResultIndex = 0;
	    var newMappingResultIndex = 0;
	
	    var nodesToDelete = [];
	    var itemsToProcess = [];
	    var itemsForBeforeRemoveCallbacks = [];
	    var itemsForMoveCallbacks = [];
	    var itemsForAfterAddCallbacks = [];
	    var mapData;
	
	    function itemMovedOrRetained(editScriptIndex, oldPosition) {
	        mapData = lastMappingResult[oldPosition];
	        if (newMappingResultIndex !== oldPosition)
	            itemsForMoveCallbacks[editScriptIndex] = mapData;
	        // Since updating the index might change the nodes, do so before calling fixUpContinuousNodeArray
	        mapData.indexObservable(newMappingResultIndex++);
	        fixUpContinuousNodeArray(mapData.mappedNodes, domNode);
	        newMappingResult.push(mapData);
	        itemsToProcess.push(mapData);
	    }
	
	    function callCallback(callback, items) {
	        if (callback) {
	            for (var i = 0, n = items.length; i < n; i++) {
	                if (items[i]) {
	                    arrayForEach(items[i].mappedNodes, function(node) {
	                        callback(node, i, items[i].arrayEntry);
	                    });
	                }
	            }
	        }
	    }
	
	    for (var i = 0, editScriptItem, movedIndex; editScriptItem = editScript[i]; i++) {
	        movedIndex = editScriptItem['moved'];
	        switch (editScriptItem['status']) {
	        case "deleted":
	            if (movedIndex === undefined) {
	                mapData = lastMappingResult[lastMappingResultIndex];
	
	                // Stop tracking changes to the mapping for these nodes
	                if (mapData.dependentObservable) {
	                    mapData.dependentObservable.dispose();
	                    mapData.dependentObservable = undefined;
	                }
	
	                // Queue these nodes for later removal
	                if (fixUpContinuousNodeArray(mapData.mappedNodes, domNode).length) {
	                    if (options$$1['beforeRemove']) {
	                        newMappingResult.push(mapData);
	                        itemsToProcess.push(mapData);
	                        if (mapData.arrayEntry === deletedItemDummyValue) {
	                            mapData = null;
	                        } else {
	                            itemsForBeforeRemoveCallbacks[i] = mapData;
	                        }
	                    }
	                    if (mapData) {
	                        nodesToDelete.push.apply(nodesToDelete, mapData.mappedNodes);
	                    }
	                }
	            }
	            lastMappingResultIndex++;
	            break;
	
	        case "retained":
	            itemMovedOrRetained(i, lastMappingResultIndex++);
	            break;
	
	        case "added":
	            if (movedIndex !== undefined) {
	                itemMovedOrRetained(i, movedIndex);
	            } else {
	                mapData = { arrayEntry: editScriptItem['value'], indexObservable: observable(newMappingResultIndex++) };
	                newMappingResult.push(mapData);
	                itemsToProcess.push(mapData);
	                if (!isFirstExecution)
	                    itemsForAfterAddCallbacks[i] = mapData;
	            }
	            break;
	        }
	    }
	
	    // Store a copy of the array items we just considered so we can difference it next time
	    set(domNode, lastMappingResultDomDataKey, newMappingResult);
	
	    // Call beforeMove first before any changes have been made to the DOM
	    callCallback(options$$1['beforeMove'], itemsForMoveCallbacks);
	
	    // Next remove nodes for deleted items (or just clean if there's a beforeRemove callback)
	    arrayForEach(nodesToDelete, options$$1['beforeRemove'] ? cleanNode : removeNode);
	
	    // Next add/reorder the remaining items (will include deleted items if there's a beforeRemove callback)
	    i = 0;
	    for (var nextNode = firstChild(domNode), lastNode, node; mapData = itemsToProcess[i]; i++) {
	        // Get nodes for newly added items
	        if (!mapData.mappedNodes)
	            extend(mapData, mapNodeAndRefreshWhenChanged(domNode, mapping, mapData.arrayEntry, callbackAfterAddingNodes, mapData.indexObservable));
	
	        // Put nodes in the right place if they aren't there already
	        for (var j = 0; node = mapData.mappedNodes[j]; nextNode = node.nextSibling, lastNode = node, j++) {
	            if (node !== nextNode)
	                insertAfter(domNode, node, lastNode);
	        }
	
	        // Run the callbacks for newly added nodes (for example, to apply bindings, etc.)
	        if (!mapData.initialized && callbackAfterAddingNodes) {
	            callbackAfterAddingNodes(mapData.arrayEntry, mapData.mappedNodes, mapData.indexObservable);
	            mapData.initialized = true;
	        }
	    }
	
	    // If there's a beforeRemove callback, call it after reordering.
	    // Note that we assume that the beforeRemove callback will usually be used to remove the nodes using
	    // some sort of animation, which is why we first reorder the nodes that will be removed. If the
	    // callback instead removes the nodes right away, it would be more efficient to skip reordering them.
	    // Perhaps we'll make that change in the future if this scenario becomes more common.
	    callCallback(options$$1['beforeRemove'], itemsForBeforeRemoveCallbacks);
	
	    // Replace the stored values of deleted items with a dummy value. This provides two benefits: it marks this item
	    // as already "removed" so we won't call beforeRemove for it again, and it ensures that the item won't match up
	    // with an actual item in the array and appear as "retained" or "moved".
	    for (i = 0; i < itemsForBeforeRemoveCallbacks.length; ++i) {
	        if (itemsForBeforeRemoveCallbacks[i]) {
	            itemsForBeforeRemoveCallbacks[i].arrayEntry = deletedItemDummyValue;
	        }
	    }
	
	    // Finally call afterMove and afterAdd callbacks
	    callCallback(options$$1['afterMove'], itemsForMoveCallbacks);
	    callCallback(options$$1['afterAdd'], itemsForAfterAddCallbacks);
	}
	
	var attr = {
	    update: function(element, valueAccessor, allBindings) {
	        var value = unwrap(valueAccessor()) || {};
	        objectForEach(value, function(attrName, attrValue) {
	            attrValue = unwrap(attrValue);
	
	            // To cover cases like "attr: { checked:someProp }", we want to remove the attribute entirely
	            // when someProp is a "no value"-like value (strictly null, false, or undefined)
	            // (because the absence of the "checked" attr is how to mark an element as not checked, etc.)
	            var toRemove = (attrValue === false) || (attrValue === null) || (attrValue === undefined);
	
	            if (toRemove) {
	                element.removeAttribute(attrName);
	            }
	
	            if (!toRemove) {
	                element.setAttribute(attrName, attrValue.toString());
	            }
	
	            // Treat "name" specially - although you can think of it as an attribute, it also needs
	            // special handling on older versions of IE (https://github.com/SteveSanderson/knockout/pull/333)
	            // Deliberately being case-sensitive here because XHTML would regard "Name" as a different thing
	            // entirely, and there's no strong reason to allow for such casing in HTML.
	            if (attrName === "name") {
	                setElementName(element, toRemove ? "" : attrValue.toString());
	            }
	        });
	    }
	};
	
	var checked = {
	    after: ['value', 'attr'],
	    init: function (element, valueAccessor, allBindings) {
	        var checkedValue = pureComputed(function() {
	            // Treat "value" like "checkedValue" when it is included with "checked" binding
	            if (allBindings['has']('checkedValue')) {
	                return unwrap(allBindings.get('checkedValue'));
	            } else if (allBindings['has']('value')) {
	                return unwrap(allBindings.get('value'));
	            }
	
	            return element.value;
	        });
	
	        function updateModel() {
	            // This updates the model value from the view value.
	            // It runs in response to DOM events (click) and changes in checkedValue.
	            var isChecked = element.checked,
	                elemValue = useCheckedValue ? checkedValue() : isChecked;
	
	            // When we're first setting up this computed, don't change any model state.
	            if (isInitial()) {
	                return;
	            }
	
	            // We can ignore unchecked radio buttons, because some other radio
	            // button will be getting checked, and that one can take care of updating state.
	            if (isRadio && !isChecked) {
	                return;
	            }
	
	            var modelValue = ignore(valueAccessor);
	            if (valueIsArray) {
	                var writableValue = rawValueIsNonArrayObservable ? modelValue.peek() : modelValue;
	                if (oldElemValue !== elemValue) {
	                    // When we're responding to the checkedValue changing, and the element is
	                    // currently checked, replace the old elem value with the new elem value
	                    // in the model array.
	                    if (isChecked) {
	                        addOrRemoveItem(writableValue, elemValue, true);
	                        addOrRemoveItem(writableValue, oldElemValue, false);
	                    }
	
	                    oldElemValue = elemValue;
	                } else {
	                    // When we're responding to the user having checked/unchecked a checkbox,
	                    // add/remove the element value to the model array.
	                    addOrRemoveItem(writableValue, elemValue, isChecked);
	                }
	                if (rawValueIsNonArrayObservable && isWriteableObservable(modelValue)) {
	                    modelValue(writableValue);
	                }
	            } else {
	                valueAccessor(elemValue, {onlyIfChanged: true});
	            }
	        }
	
	        function updateView() {
	            // This updates the view value from the model value.
	            // It runs in response to changes in the bound (checked) value.
	            var modelValue = unwrap(valueAccessor());
	
	            if (valueIsArray) {
	                // When a checkbox is bound to an array, being checked represents its value being present in that array
	                element.checked = arrayIndexOf(modelValue, checkedValue()) >= 0;
	            } else if (isCheckbox) {
	                // When a checkbox is bound to any other value (not an array), being checked represents the value being trueish
	                element.checked = modelValue;
	            } else {
	                // For radio buttons, being checked means that the radio button's value corresponds to the model value
	                element.checked = (checkedValue() === modelValue);
	            }
	        }
	
	        var isCheckbox = element.type == "checkbox",
	            isRadio = element.type == "radio";
	
	        // Only bind to check boxes and radio buttons
	        if (!isCheckbox && !isRadio) {
	            return;
	        }
	
	        var rawValue = valueAccessor(),
	            valueIsArray = isCheckbox && (unwrap(rawValue) instanceof Array),
	            rawValueIsNonArrayObservable = !(valueIsArray && rawValue.push && rawValue.splice),
	            oldElemValue = valueIsArray ? checkedValue() : undefined,
	            useCheckedValue = isRadio || valueIsArray;
	
	        // Set up two computeds to update the binding:
	
	        // The first responds to changes in the checkedValue value and to element clicks
	        computed(updateModel, null, { disposeWhenNodeIsRemoved: element });
	        registerEventHandler(element, "click", updateModel);
	
	        // The second responds to changes in the model value (the one associated with the checked binding)
	        computed(updateView, null, { disposeWhenNodeIsRemoved: element });
	
	        rawValue = undefined;
	    }
	};
	
	var checkedValue = {
	    update: function (element, valueAccessor) {
	        element.value = unwrap(valueAccessor());
	    }
	};
	
	// For certain common events (currently just 'click'), allow a simplified data-binding syntax
	// e.g. click:handler instead of the usual full-length event:{click:handler}
	function makeEventHandlerShortcut(eventName) {
	    return {
	        init: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
	            var newValueAccessor = function () {
	                var result = {};
	                result[eventName] = valueAccessor();
	                return result;
	            };
	            eventHandler.init.call(this, element, newValueAccessor, allBindings, viewModel, bindingContext);
	        }
	    };
	}
	
	var eventHandler = {
	    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
	        var eventsToHandle = valueAccessor() || {};
	        objectForEach(eventsToHandle, function(eventName) {
	            if (typeof eventName == "string") {
	                registerEventHandler(element, eventName, function (event) {
	                    var handlerReturnValue;
	                    var handlerFunction = valueAccessor()[eventName];
	                    if (!handlerFunction)
	                        return;
	
	                    try {
	                        // Take all the event args, and prefix with the viewmodel
	                        var argsForHandler = makeArray(arguments);
	                        viewModel = bindingContext['$data'];
	                        argsForHandler.unshift(viewModel);
	                        handlerReturnValue = handlerFunction.apply(viewModel, argsForHandler);
	                    } finally {
	                        if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.
	                            if (event.preventDefault)
	                                event.preventDefault();
	                            else
	                                event.returnValue = false;
	                        }
	                    }
	
	                    var bubble = allBindings.get(eventName + 'Bubble') !== false;
	                    if (!bubble) {
	                        event.cancelBubble = true;
	                        if (event.stopPropagation)
	                            event.stopPropagation();
	                    }
	                });
	            }
	        });
	    }
	};
	
	
	var onHandler = {
	    init: eventHandler.init,
	    preprocess: function (value /*, key, processBinding */) {
	        // Change `on.click: xyz` to `on.click: => xyz`
	        return " => " + value;
	    }
	};
	
	// 'click' is just a shorthand for the usual full-length event:{click:handler}
	var click = makeEventHandlerShortcut('click');
	
	var css = {
	    aliases: ['class'],
	    update: function (element, valueAccessor) {
	        var value = unwrap(valueAccessor());
	        if (value !== null && typeof value == "object") {
	            objectForEach(value, function(className, shouldHaveClass) {
	                shouldHaveClass = unwrap(shouldHaveClass);
	                toggleDomNodeCssClass(element, className, shouldHaveClass);
	            });
	        } else {
	            value = stringTrim(String(value || '')); // Make sure we don't try to store or set a non-string value
	            toggleDomNodeCssClass(element, element[css.classesWrittenByBindingKey], false);
	            element[css.classesWrittenByBindingKey] = value;
	            toggleDomNodeCssClass(element, value, true);
	        }
	    },
	    classesWrittenByBindingKey: createSymbolOrString('__ko__cssValue')
	};
	
	var enable = {
	    update: function (element, valueAccessor) {
	        var value = unwrap(valueAccessor());
	        if (value && element.disabled) {
	            element.removeAttribute("disabled");
	        } else if ((!value) && (!element.disabled)) {
	            element.disabled = true;
	        }
	    }
	};
	
	var disable = {
	    update: function (element, valueAccessor) {
	        enable.update(element, function() { return !unwrap(valueAccessor()); });
	    }
	};
	
	var hasfocusUpdatingProperty = createSymbolOrString('__ko_hasfocusUpdating');
	var hasfocusLastValue = createSymbolOrString('__ko_hasfocusLastValue');
	
	var hasfocus = {
	    init: function(element, valueAccessor /*, allBindings */) {
	        var handleElementFocusChange = function(isFocused) {
	            // Where possible, ignore which event was raised and determine focus state using activeElement,
	            // as this avoids phantom focus/blur events raised when changing tabs in modern browsers.
	            // However, not all KO-targeted browsers (Firefox 2) support activeElement. For those browsers,
	            // prevent a loss of focus when changing tabs/windows by setting a flag that prevents hasfocus
	            // from calling 'blur()' on the element when it loses focus.
	            // Discussion at https://github.com/SteveSanderson/knockout/pull/352
	            element[hasfocusUpdatingProperty] = true;
	            var ownerDoc = element.ownerDocument;
	            if ("activeElement" in ownerDoc) {
	                var active;
	                try {
	                    active = ownerDoc.activeElement;
	                } catch(e) {
	                    // IE9 throws if you access activeElement during page load (see issue #703)
	                    active = ownerDoc.body;
	                }
	                isFocused = (active === element);
	            }
	            // var modelValue = valueAccessor();
	            valueAccessor(isFocused, {onlyIfChanged: true});
	
	            //cache the latest value, so we can avoid unnecessarily calling focus/blur in the update function
	            element[hasfocusLastValue] = isFocused;
	            element[hasfocusUpdatingProperty] = false;
	        };
	        var handleElementFocusIn = handleElementFocusChange.bind(null, true);
	        var handleElementFocusOut = handleElementFocusChange.bind(null, false);
	
	        registerEventHandler(element, "focus", handleElementFocusIn);
	        registerEventHandler(element, "focusin", handleElementFocusIn); // For IE
	        registerEventHandler(element, "blur",  handleElementFocusOut);
	        registerEventHandler(element, "focusout",  handleElementFocusOut); // For IE
	    },
	    update: function(element, valueAccessor) {
	        var value = !!unwrap(valueAccessor());
	
	        if (!element[hasfocusUpdatingProperty] && element[hasfocusLastValue] !== value) {
	            value ? element.focus() : element.blur();
	
	            // In IE, the blur method doesn't always cause the element to lose focus (for example, if the window is not in focus).
	            // Setting focus to the body element does seem to be reliable in IE, but should only be used if we know that the current
	            // element was focused already.
	            if (!value && element[hasfocusLastValue]) {
	                element.ownerDocument.body.focus();
	            }
	
	            // For IE, which doesn't reliably fire "focus" or "blur" events synchronously
	            ignore(triggerEvent, null, [element, value ? "focusin" : "focusout"]);
	        }
	    }
	};
	
	var html = {
	    init: function() {
	        // Prevent binding on the dynamically-injected HTML (as developers are unlikely to expect that, and it has security implications)
	        return {
	            'controlsDescendantBindings': true
	        };
	    },
	    //
	    // Modify internal, per ko.punches and :
	    //      http://stackoverflow.com/a/15348139
	    update: function(element, valueAccessor) {
	        setHtml(element, valueAccessor());
	    },
	    allowVirtualElements: true
	};
	
	var $let = {
	    init: function(element, valueAccessor, allBindings, viewModel, bindingContext$$1) {
	        // Make a modified binding context, with extra properties, and apply it to descendant elements
	        var innerContext = bindingContext$$1['extend'](valueAccessor);
	        applyBindingsToDescendants(innerContext, element);
	
	        return { 'controlsDescendantBindings': true };
	    },
	    allowVirtualElements: true
	};
	
	var hasDomDataExpandoProperty = '__ko__hasDomDataOptionValue__';
	
	// Normally, SELECT elements and their OPTIONs can only take value of type 'string' (because the values
	// are stored on DOM attributes). ko.selectExtensions provides a way for SELECTs/OPTIONs to have values
	// that are arbitrary objects. This is very convenient when implementing things like cascading dropdowns.
	var selectExtensions = {
	    optionsValueDomDataKey: undefined,
	
	    readValue : function(element) {
	        switch (tagNameLower(element)) {
	        case 'option':
	            if (element[hasDomDataExpandoProperty] === true)
	                return get(element, selectExtensions.optionValueDomDataKey);
	            return element.value;
	        case 'select':
	            return element.selectedIndex >= 0 ? selectExtensions.readValue(element.options[element.selectedIndex]) : undefined;
	        default:
	            return element.value;
	        }
	    },
	
	    writeValue: function(element, value, allowUnset) {
	        switch (tagNameLower(element)) {
	        case 'option':
	            switch(typeof value) {
	            case "string":
	                set(element, selectExtensions.optionValueDomDataKey, undefined);
	                if (hasDomDataExpandoProperty in element) { // IE <= 8 throws errors if you delete non-existent properties from a DOM node
	                    delete element[hasDomDataExpandoProperty];
	                }
	                element.value = value;
	                break;
	            default:
	                // Store arbitrary object using DomData
	                set(element, selectExtensions.optionValueDomDataKey, value);
	                element[hasDomDataExpandoProperty] = true;
	
	                // Special treatment of numbers is just for backward compatibility. KO 1.2.1 wrote numerical values to element.value.
	                element.value = typeof value === "number" ? value : "";
	                break;
	            }
	            break;
	        case 'select':
	            if (value === "" || value === null)       // A blank string or null value will select the caption
	                value = undefined;
	            var selection = -1;
	            for (var i = 0, n = element.options.length, optionValue; i < n; ++i) {
	                optionValue = selectExtensions.readValue(element.options[i]);
	                // Include special check to handle selecting a caption with a blank string value
	                if (optionValue == value || (optionValue === "" && value === undefined)) {
	                    selection = i;
	                    break;
	                }
	            }
	            if (allowUnset || selection >= 0 || (value === undefined && element.size > 1)) {
	                element.selectedIndex = selection;
	            }
	            break;
	        default:
	            if ((value === null) || (value === undefined))
	                value = "";
	            element.value = value;
	            break;
	        }
	    }
	};
	
	var captionPlaceholder = {};
	
	var options$2 = {
	    init: function(element) {
	        if (tagNameLower(element) !== "select")
	            throw new Error("options binding applies only to SELECT elements");
	
	        // Remove all existing <option>s.
	        while (element.length > 0) {
	            element.remove(0);
	        }
	
	        // Ensures that the binding processor doesn't try to bind the options
	        return { 'controlsDescendantBindings': true };
	    },
	    update: function (element, valueAccessor, allBindings) {
	        function selectedOptions() {
	            return arrayFilter(element.options, function (node) { return node.selected; });
	        }
	
	        var selectWasPreviouslyEmpty = element.length == 0,
	            multiple = element.multiple,
	            previousScrollTop = (!selectWasPreviouslyEmpty && multiple) ? element.scrollTop : null,
	            unwrappedArray = unwrap(valueAccessor()),
	            valueAllowUnset = allBindings.get('valueAllowUnset') && allBindings['has']('value'),
	            includeDestroyed = allBindings.get('optionsIncludeDestroyed'),
	            arrayToDomNodeChildrenOptions = {},
	            captionValue,
	            filteredArray,
	            previousSelectedValues = [];
	
	        if (!valueAllowUnset) {
	            if (multiple) {
	                previousSelectedValues = arrayMap(selectedOptions(), selectExtensions.readValue);
	            } else if (element.selectedIndex >= 0) {
	                previousSelectedValues.push(selectExtensions.readValue(element.options[element.selectedIndex]));
	            }
	        }
	
	        if (unwrappedArray) {
	            if (typeof unwrappedArray.length == "undefined") // Coerce single value into array
	                unwrappedArray = [unwrappedArray];
	
	            // Filter out any entries marked as destroyed
	            filteredArray = arrayFilter(unwrappedArray, function(item) {
	                return includeDestroyed || item === undefined || item === null || !unwrap(item['_destroy']);
	            });
	
	            // If caption is included, add it to the array
	            if (allBindings['has']('optionsCaption')) {
	                captionValue = unwrap(allBindings.get('optionsCaption'));
	                // If caption value is null or undefined, don't show a caption
	                if (captionValue !== null && captionValue !== undefined) {
	                    filteredArray.unshift(captionPlaceholder);
	                }
	            }
	        } else {
	            // If a falsy value is provided (e.g. null), we'll simply empty the select element
	        }
	
	        function applyToObject(object, predicate, defaultValue) {
	            var predicateType = typeof predicate;
	            if (predicateType == "function")    // Given a function; run it against the data value
	                return predicate(object);
	            else if (predicateType == "string") // Given a string; treat it as a property name on the data value
	                return object[predicate];
	            else                                // Given no optionsText arg; use the data value itself
	                return defaultValue;
	        }
	
	        // The following functions can run at two different times:
	        // The first is when the whole array is being updated directly from this binding handler.
	        // The second is when an observable value for a specific array entry is updated.
	        // oldOptions will be empty in the first case, but will be filled with the previously generated option in the second.
	        var itemUpdate = false;
	        function optionForArrayItem(arrayEntry, index, oldOptions) {
	            if (oldOptions.length) {
	                previousSelectedValues = !valueAllowUnset && oldOptions[0].selected ? [ selectExtensions.readValue(oldOptions[0]) ] : [];
	                itemUpdate = true;
	            }
	            var option = element.ownerDocument.createElement("option");
	            if (arrayEntry === captionPlaceholder) {
	                setTextContent(option, allBindings.get('optionsCaption'));
	                selectExtensions.writeValue(option, undefined);
	            } else {
	                // Apply a value to the option element
	                var optionValue = applyToObject(arrayEntry, allBindings.get('optionsValue'), arrayEntry);
	                selectExtensions.writeValue(option, unwrap(optionValue));
	
	                // Apply some text to the option element
	                var optionText = applyToObject(arrayEntry, allBindings.get('optionsText'), optionValue);
	                setTextContent(option, optionText);
	            }
	            return [option];
	        }
	
	        // By using a beforeRemove callback, we delay the removal until after new items are added. This fixes a selection
	        // problem in IE<=8 and Firefox. See https://github.com/knockout/knockout/issues/1208
	        arrayToDomNodeChildrenOptions['beforeRemove'] =
	            function (option) {
	                element.removeChild(option);
	            };
	
	        function setSelectionCallback(arrayEntry, newOptions) {
	            if (itemUpdate && valueAllowUnset) {
	                // The model value is authoritative, so make sure its value is the one selected
	                // There is no need to use dependencyDetection.ignore since setDomNodeChildrenFromArrayMapping does so already.
	                selectExtensions.writeValue(element, unwrap(allBindings.get('value')), true /* allowUnset */);
	            } else if (previousSelectedValues.length) {
	                // IE6 doesn't like us to assign selection to OPTION nodes before they're added to the document.
	                // That's why we first added them without selection. Now it's time to set the selection.
	                var isSelected = arrayIndexOf(previousSelectedValues, selectExtensions.readValue(newOptions[0])) >= 0;
	                setOptionNodeSelectionState(newOptions[0], isSelected);
	
	                // If this option was changed from being selected during a single-item update, notify the change
	                if (itemUpdate && !isSelected) {
	                    ignore(triggerEvent, null, [element, "change"]);
	                }
	            }
	        }
	
	        var callback = setSelectionCallback;
	        if (allBindings['has']('optionsAfterRender') && typeof allBindings.get('optionsAfterRender') == "function") {
	            callback = function(arrayEntry, newOptions) {
	                setSelectionCallback(arrayEntry, newOptions);
	                ignore(allBindings.get('optionsAfterRender'), null, [newOptions[0], arrayEntry !== captionPlaceholder ? arrayEntry : undefined]);
	            };
	        }
	
	        setDomNodeChildrenFromArrayMapping(element, filteredArray, optionForArrayItem, arrayToDomNodeChildrenOptions, callback);
	
	        ignore(function () {
	            if (valueAllowUnset) {
	                // The model value is authoritative, so make sure its value is the one selected
	                selectExtensions.writeValue(element, unwrap(allBindings.get('value')), true /* allowUnset */);
	            } else {
	                // Determine if the selection has changed as a result of updating the options list
	                var selectionChanged;
	                if (multiple) {
	                    // For a multiple-select box, compare the new selection count to the previous one
	                    // But if nothing was selected before, the selection can't have changed
	                    selectionChanged = previousSelectedValues.length && selectedOptions().length < previousSelectedValues.length;
	                } else {
	                    // For a single-select box, compare the current value to the previous value
	                    // But if nothing was selected before or nothing is selected now, just look for a change in selection
	                    selectionChanged = (previousSelectedValues.length && element.selectedIndex >= 0)
	                        ? (selectExtensions.readValue(element.options[element.selectedIndex]) !== previousSelectedValues[0])
	                        : (previousSelectedValues.length || element.selectedIndex >= 0);
	                }
	
	                // Ensure consistency between model value and selected option.
	                // If the dropdown was changed so that selection is no longer the same,
	                // notify the value or selectedOptions binding.
	                if (selectionChanged) {
	                    triggerEvent(element, "change");
	                }
	            }
	        });
	
	        // Workaround for IE bug
	        ensureSelectElementIsRenderedCorrectly(element);
	
	        if (previousScrollTop && Math.abs(previousScrollTop - element.scrollTop) > 20)
	            element.scrollTop = previousScrollTop;
	    }
	};
	
	selectExtensions.optionValueDomDataKey = nextKey();
	
	var selectedOptions = {
	    after: ['options', 'foreach'],
	
	    init: function (element, valueAccessor, allBindings) {
	        registerEventHandler(element, "change", function () {
	            var value = valueAccessor(), valueToWrite = [];
	            arrayForEach(element.getElementsByTagName("option"), function(node) {
	                if (node.selected)
	                    valueToWrite.push(selectExtensions.readValue(node));
	            });
	            valueAccessor(valueToWrite);
	        });
	    },
	
	    update: function (element, valueAccessor) {
	        if (tagNameLower(element) != "select")
	            throw new Error("values binding applies only to SELECT elements");
	
	        var newValue = unwrap(valueAccessor()),
	            previousScrollTop = element.scrollTop;
	
	        if (newValue && typeof newValue.length == "number") {
	            arrayForEach(element.getElementsByTagName("option"), function(node) {
	                var isSelected = arrayIndexOf(newValue, selectExtensions.readValue(node)) >= 0;
	                if (node.selected != isSelected) {      // This check prevents flashing of the select element in IE
	                    setOptionNodeSelectionState(node, isSelected);
	                }
	            });
	        }
	
	        element.scrollTop = previousScrollTop;
	    }
	};
	
	var style = {
	    update: function (element, valueAccessor) {
	        var value = unwrap(valueAccessor() || {});
	        objectForEach(value, function(styleName, styleValue) {
	            styleValue = unwrap(styleValue);
	
	            if (styleValue === null || styleValue === undefined || styleValue === false) {
	                // Empty string removes the value, whereas null/undefined have no effect
	                styleValue = "";
	            }
	
	            element.style[styleName] = styleValue;
	        });
	    }
	};
	
	var submit = {
	    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
	        if (typeof valueAccessor() != "function")
	            throw new Error("The value for a submit binding must be a function");
	        registerEventHandler(element, "submit", function (event) {
	            var handlerReturnValue;
	            var value = valueAccessor();
	            try { handlerReturnValue = value.call(bindingContext['$data'], element); }
	            finally {
	                if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.
	                    if (event.preventDefault)
	                        event.preventDefault();
	                    else
	                        event.returnValue = false;
	                }
	            }
	        });
	    }
	};
	
	var text = {
	    init: function() {
	        // Prevent binding on the dynamically-injected text node (as developers are unlikely to expect that, and it has security implications).
	        // It should also make things faster, as we no longer have to consider whether the text node might be bindable.
	        return { controlsDescendantBindings: true };
	    },
	    update: function (element, valueAccessor) {
	        setTextContent(element, valueAccessor());
	    },
	    allowVirtualElements: true
	};
	
	var parseVersion;
	var operaVersion;
	var userAgent;
	var safariVersion;
	var firefoxVersion;
	
	if (window.navigator) {
	    parseVersion = function (matches) {
	        if (matches) {
	            return parseFloat(matches[1]);
	        }
	    };
	
	    // Detect various browser versions because some old versions don't fully support the 'input' event
	    operaVersion = window.opera && window.opera.version && parseInt(window.opera.version()),
	        userAgent = window.navigator.userAgent,
	        safariVersion = parseVersion(userAgent.match(/^(?:(?!chrome).)*version\/([^ ]*) safari/i)),
	        firefoxVersion = parseVersion(userAgent.match(/Firefox\/([^ ]*)/));
	}
	
	// IE 8 and 9 have bugs that prevent the normal events from firing when the value changes.
	// But it does fire the 'selectionchange' event on many of those, presumably because the
	// cursor is moving and that counts as the selection changing. The 'selectionchange' event is
	// fired at the document level only and doesn't directly indicate which element changed. We
	// set up just one event handler for the document and use 'activeElement' to determine which
	// element was changed.
	if (ieVersion < 10) {
	    var selectionChangeRegisteredName = nextKey(),
	        selectionChangeHandlerName = nextKey();
	    var selectionChangeHandler = function(event) {
	        var target = this.activeElement,
	            handler = target && get(target, selectionChangeHandlerName);
	        if (handler) {
	            handler(event);
	        }
	    };
	    var registerForSelectionChangeEvent = function (element, handler) {
	        var ownerDoc = element.ownerDocument;
	        if (!get(ownerDoc, selectionChangeRegisteredName)) {
	            set(ownerDoc, selectionChangeRegisteredName, true);
	            registerEventHandler(ownerDoc, 'selectionchange', selectionChangeHandler);
	        }
	        set(element, selectionChangeHandlerName, handler);
	    };
	}
	
	var textInput = {
	    aliases: 'textinput',
	    init: function (element, valueAccessor) {
	
	        var previousElementValue = element.value,
	            timeoutHandle,
	            elementValueBeforeEvent;
	
	        var updateModel = function (event) {
	            clearTimeout(timeoutHandle);
	            elementValueBeforeEvent = timeoutHandle = undefined;
	
	            var elementValue = element.value;
	            if (previousElementValue !== elementValue) {
	                // Provide a way for tests to know exactly which event was processed
	                if (options.debug && event) element['_ko_textInputProcessedEvent'] = event.type;
	                previousElementValue = elementValue;
	                valueAccessor(elementValue);
	            }
	        };
	
	        var deferUpdateModel = function (event) {
	            if (!timeoutHandle) {
	                // The elementValueBeforeEvent variable is set *only* during the brief gap between an
	                // event firing and the updateModel function running. This allows us to ignore model
	                // updates that are from the previous state of the element, usually due to techniques
	                // such as rateLimit. Such updates, if not ignored, can cause keystrokes to be lost.
	                elementValueBeforeEvent = element.value;
	                var handler = options.debug ? updateModel.bind(element, {type: event.type}) : updateModel;
	                timeoutHandle = safeSetTimeout(handler, 4);
	            }
	        };
	
	        // IE9 will mess up the DOM if you handle events synchronously which results in DOM changes (such as other bindings);
	        // so we'll make sure all updates are asynchronous
	        var ieUpdateModel = ieVersion === 9 ? deferUpdateModel : updateModel;
	
	        var updateView = function () {
	            var modelValue = unwrap(valueAccessor());
	
	            if (modelValue === null || modelValue === undefined) {
	                modelValue = '';
	            }
	
	            if (elementValueBeforeEvent !== undefined && modelValue === elementValueBeforeEvent) {
	                safeSetTimeout(updateView, 4);
	                return;
	            }
	
	            // Update the element only if the element and model are different. On some browsers, updating the value
	            // will move the cursor to the end of the input, which would be bad while the user is typing.
	            if (element.value !== modelValue) {
	                previousElementValue = modelValue;  // Make sure we ignore events (propertychange) that result from updating the value
	                element.value = modelValue;
	            }
	        };
	
	        var onEvent = function (event, handler) {
	            registerEventHandler(element, event, handler);
	        };
	
	        if (options.debug && textInput._forceUpdateOn) {
	            // Provide a way for tests to specify exactly which events are bound
	            arrayForEach(textInput._forceUpdateOn, function(eventName) {
	                if (eventName.slice(0,5) == 'after') {
	                    onEvent(eventName.slice(5), deferUpdateModel);
	                } else {
	                    onEvent(eventName, updateModel);
	                }
	            });
	        } else {
	            if (ieVersion < 10) {
	                // Internet Explorer <= 8 doesn't support the 'input' event, but does include 'propertychange' that fires whenever
	                // any property of an element changes. Unlike 'input', it also fires if a property is changed from JavaScript code,
	                // but that's an acceptable compromise for this binding. IE 9 does support 'input', but since it doesn't fire it
	                // when using autocomplete, we'll use 'propertychange' for it also.
	                onEvent('propertychange', function(event) {
	                    if (event.propertyName === 'value') {
	                        ieUpdateModel(event);
	                    }
	                });
	
	                if (ieVersion == 8) {
	                    // IE 8 has a bug where it fails to fire 'propertychange' on the first update following a value change from
	                    // JavaScript code. It also doesn't fire if you clear the entire value. To fix this, we bind to the following
	                    // events too.
	                    onEvent('keyup', updateModel);      // A single keystoke
	                    onEvent('keydown', updateModel);    // The first character when a key is held down
	                }
	                if (ieVersion >= 8) {
	                    // Internet Explorer 9 doesn't fire the 'input' event when deleting text, including using
	                    // the backspace, delete, or ctrl-x keys, clicking the 'x' to clear the input, dragging text
	                    // out of the field, and cutting or deleting text using the context menu. 'selectionchange'
	                    // can detect all of those except dragging text out of the field, for which we use 'dragend'.
	                    // These are also needed in IE8 because of the bug described above.
	                    registerForSelectionChangeEvent(element, ieUpdateModel);  // 'selectionchange' covers cut, paste, drop, delete, etc.
	                    onEvent('dragend', deferUpdateModel);
	                }
	            } else {
	                // All other supported browsers support the 'input' event, which fires whenever the content of the element is changed
	                // through the user interface.
	                onEvent('input', updateModel);
	
	                if (safariVersion < 5 && tagNameLower(element) === "textarea") {
	                    // Safari <5 doesn't fire the 'input' event for <textarea> elements (it does fire 'textInput'
	                    // but only when typing). So we'll just catch as much as we can with keydown, cut, and paste.
	                    onEvent('keydown', deferUpdateModel);
	                    onEvent('paste', deferUpdateModel);
	                    onEvent('cut', deferUpdateModel);
	                } else if (operaVersion < 11) {
	                    // Opera 10 doesn't always fire the 'input' event for cut, paste, undo & drop operations.
	                    // We can try to catch some of those using 'keydown'.
	                    onEvent('keydown', deferUpdateModel);
	                } else if (firefoxVersion < 4.0) {
	                    // Firefox <= 3.6 doesn't fire the 'input' event when text is filled in through autocomplete
	                    onEvent('DOMAutoComplete', updateModel);
	
	                    // Firefox <=3.5 doesn't fire the 'input' event when text is dropped into the input.
	                    onEvent('dragdrop', updateModel);       // <3.5
	                    onEvent('drop', updateModel);           // 3.5
	                }
	            }
	        }
	
	        // Bind to the change event so that we can catch programmatic updates of the value that fire this event.
	        onEvent('change', updateModel);
	
	        computed(updateView, null, { disposeWhenNodeIsRemoved: element });
	    }
	};
	
	// // textinput is an alias for textInput
	// ko.bindingHandlers['textinput'] = {
	//     // preprocess is the only way to set up a full alias
	//     'preprocess': function (value, name, addBinding) {
	//         addBinding('textInput', value);
	//     }
	// };
	
	var uniqueName = {
	    init: function (element, valueAccessor) {
	        if (valueAccessor()) {
	            var name = "ko_unique_" + (++uniqueName.currentIndex);
	            setElementName(element, name);
	        }
	    },
	    currentIndex: 0
	};
	
	var value = {
	    after: ['options', 'foreach'],
	    init: function (element, valueAccessor, allBindings) {
	        // If the value binding is placed on a radio/checkbox, then just pass through to checkedValue and quit
	        if (element.tagName.toLowerCase() == "input" && (element.type == "checkbox" || element.type == "radio")) {
	            applyBindingAccessorsToNode(element, { 'checkedValue': valueAccessor });
	            return;
	        }
	
	        // Always catch "change" event; possibly other events too if asked
	        var eventsToCatch = ["change"];
	        var requestedEventsToCatch = allBindings.get("valueUpdate");
	        var propertyChangedFired = false;
	        var elementValueBeforeEvent = null;
	
	        if (requestedEventsToCatch) {
	            if (typeof requestedEventsToCatch == "string") // Allow both individual event names, and arrays of event names
	                requestedEventsToCatch = [requestedEventsToCatch];
	            arrayPushAll(eventsToCatch, requestedEventsToCatch);
	            eventsToCatch = arrayGetDistinctValues(eventsToCatch);
	        }
	
	        var valueUpdateHandler = function() {
	            elementValueBeforeEvent = null;
	            propertyChangedFired = false;
	            var modelValue = valueAccessor();
	            var elementValue = selectExtensions.readValue(element);
	            valueAccessor(elementValue);
	        };
	
	        // Workaround for https://github.com/SteveSanderson/knockout/issues/122
	        // IE doesn't fire "change" events on textboxes if the user selects a value from its autocomplete list
	        var ieAutoCompleteHackNeeded = ieVersion && element.tagName.toLowerCase() == "input" && element.type == "text"
	                                       && element.autocomplete != "off" && (!element.form || element.form.autocomplete != "off");
	        if (ieAutoCompleteHackNeeded && arrayIndexOf(eventsToCatch, "propertychange") == -1) {
	            registerEventHandler(element, "propertychange", function () { propertyChangedFired = true; });
	            registerEventHandler(element, "focus", function () { propertyChangedFired = false; });
	            registerEventHandler(element, "blur", function() {
	                if (propertyChangedFired) {
	                    valueUpdateHandler();
	                }
	            });
	        }
	
	        arrayForEach(eventsToCatch, function(eventName) {
	            // The syntax "after<eventname>" means "run the handler asynchronously after the event"
	            // This is useful, for example, to catch "keydown" events after the browser has updated the control
	            // (otherwise, ko.selectExtensions.readValue(this) will receive the control's value *before* the key event)
	            var handler = valueUpdateHandler;
	            if (stringStartsWith(eventName, "after")) {
	                handler = function() {
	                    // The elementValueBeforeEvent variable is non-null *only* during the brief gap between
	                    // a keyX event firing and the valueUpdateHandler running, which is scheduled to happen
	                    // at the earliest asynchronous opportunity. We store this temporary information so that
	                    // if, between keyX and valueUpdateHandler, the underlying model value changes separately,
	                    // we can overwrite that model value change with the value the user just typed. Otherwise,
	                    // techniques like rateLimit can trigger model changes at critical moments that will
	                    // override the user's inputs, causing keystrokes to be lost.
	                    elementValueBeforeEvent = selectExtensions.readValue(element);
	                    safeSetTimeout(valueUpdateHandler, 0);
	                };
	                eventName = eventName.substring("after".length);
	            }
	            registerEventHandler(element, eventName, handler);
	        });
	
	        var updateFromModel = function () {
	            var newValue = unwrap(valueAccessor());
	            var elementValue = selectExtensions.readValue(element);
	
	            if (elementValueBeforeEvent !== null && newValue === elementValueBeforeEvent) {
	                safeSetTimeout(updateFromModel, 0);
	                return;
	            }
	
	            var valueHasChanged = (newValue !== elementValue);
	
	            if (valueHasChanged) {
	                if (tagNameLower(element) === "select") {
	                    var allowUnset = allBindings.get('valueAllowUnset');
	                    var applyValueAction = function () {
	                        selectExtensions.writeValue(element, newValue, allowUnset);
	                    };
	                    applyValueAction();
	
	                    if (!allowUnset && newValue !== selectExtensions.readValue(element)) {
	                        // If you try to set a model value that can't be represented in an already-populated dropdown, reject that change,
	                        // because you're not allowed to have a model value that disagrees with a visible UI selection.
	                        ignore(triggerEvent, null, [element, "change"]);
	                    } else {
	                        // Workaround for IE6 bug: It won't reliably apply values to SELECT nodes during the same execution thread
	                        // right after you've changed the set of OPTION nodes on it. So for that node type, we'll schedule a second thread
	                        // to apply the value as well.
	                        safeSetTimeout(applyValueAction, 0);
	                    }
	                } else {
	                    selectExtensions.writeValue(element, newValue);
	                }
	            }
	        };
	
	        computed(updateFromModel, null, { disposeWhenNodeIsRemoved: element });
	    }
	};
	
	var visible = {
	    update: function (element, valueAccessor) {
	        var value = unwrap(valueAccessor());
	        var isCurrentlyVisible = !(element.style.display == "none");
	        if (value && !isCurrentlyVisible)
	            element.style.display = "";
	        else if ((!value) && isCurrentlyVisible)
	            element.style.display = "none";
	    }
	};
	
	var hidden = {
	    update: function (element, valueAccessor) {
	        visible.update.call(this, element, function () { return !unwrap(valueAccessor()); });
	    }
	};
	
	var using = {
	    init: function(element, valueAccessor, allBindings, viewModel, bindingContext$$1) {
	        var innerContext = bindingContext$$1.createChildContext(valueAccessor);
	        applyBindingsToDescendants(innerContext, element);
	        return { controlsDescendantBindings: true };
	    },
	    allowVirtualElements: true
	};
	
	var bindings = {
	    attr: attr,
	    checked: checked,
	    checkedValue: checkedValue,
	    click: click,
	    css: css, 'class': css,
	    enable: enable,
	    'event': eventHandler,
	    disable: disable,
	    hasfocus: hasfocus, hasFocus: hasfocus,
	    hidden: hidden,
	    html: html,
	    'let': $let,
	    on: onHandler,
	    options: options$2,
	    selectedOptions: selectedOptions,
	    style: style,
	    submit: submit,
	    text: text,
	    textInput: textInput,
	    textinput: textInput,
	    uniqueName: uniqueName,
	    using: using,
	    value: value,
	    visible: visible
	};
	
	// A template source represents a read/write way of accessing a template. This is to eliminate the need for template loading/saving
	// logic to be duplicated in every template engine (and means they can all work with anonymous templates, etc.)
	//
	// Two are provided by default:
	//  1. ko.templateSources.domElement       - reads/writes the text content of an arbitrary DOM element
	//  2. ko.templateSources.anonymousElement - uses ko.utils.domData to read/write text *associated* with the DOM element, but
	//                                           without reading/writing the actual element text content, since it will be overwritten
	//                                           with the rendered template output.
	// You can implement your own template source if you want to fetch/store templates somewhere other than in DOM elements.
	// Template sources need to have the following functions:
	//   text() 			- returns the template text from your storage location
	//   text(value)		- writes the supplied template text to your storage location
	//   data(key)			- reads values stored using data(key, value) - see below
	//   data(key, value)	- associates "value" with this template and the key "key". Is used to store information like "isRewritten".
	//
	// Optionally, template sources can also have the following functions:
	//   nodes()            - returns a DOM element containing the nodes of this template, where available
	//   nodes(value)       - writes the given DOM element to your storage location
	// If a DOM element is available for a given template source, template engines are encouraged to use it in preference over text()
	// for improved speed. However, all templateSources must supply text() even if they don't supply nodes().
	//
	// Once you've implemented a templateSource, make your template engine use it by subclassing whatever template engine you were
	// using and overriding "makeTemplateSource" to return an instance of your custom template source.
	
	// ---- ko.templateSources.domElement -----
	
	// template types
	var templateScript = 1;
	var templateTextArea = 2;
	var templateTemplate = 3;
	var templateElement = 4;
	
	function domElement(element) {
	    this.domElement = element;
	
	    if (!element) { return; }
	    var tagNameLower$$1 = tagNameLower(element);
	    this.templateType =
	        tagNameLower$$1 === "script" ? templateScript :
	        tagNameLower$$1 === "textarea" ? templateTextArea :
	            // For browsers with proper <template> element support, where the .content property gives a document fragment
	        tagNameLower$$1 == "template" && element.content && element.content.nodeType === 11 ? templateTemplate :
	        templateElement;
	}
	
	domElement.prototype.text = function(/* valueToWrite */) {
	    var elemContentsProperty = this.templateType === templateScript ? "text"
	                             : this.templateType === templateTextArea ? "value"
	                             : "innerHTML";
	
	    if (arguments.length == 0) {
	        return this.domElement[elemContentsProperty];
	    } else {
	        var valueToWrite = arguments[0];
	        if (elemContentsProperty === "innerHTML")
	            setHtml(this.domElement, valueToWrite);
	        else
	            this.domElement[elemContentsProperty] = valueToWrite;
	    }
	};
	
	var dataDomDataPrefix = nextKey() + "_";
	domElement.prototype.data = function(key /*, valueToWrite */) {
	    if (arguments.length === 1) {
	        return get(this.domElement, dataDomDataPrefix + key);
	    } else {
	        set(this.domElement, dataDomDataPrefix + key, arguments[1]);
	    }
	};
	
	var templatesDomDataKey = nextKey();
	function getTemplateDomData(element) {
	    return get(element, templatesDomDataKey) || {};
	}
	function setTemplateDomData(element, data$$1) {
	    set(element, templatesDomDataKey, data$$1);
	}
	
	domElement.prototype.nodes = function(/* valueToWrite */) {
	    var element = this.domElement;
	    if (arguments.length == 0) {
	        var templateData = getTemplateDomData(element),
	            containerData = templateData.containerData;
	        return containerData || (
	            this.templateType === templateTemplate ? element.content :
	            this.templateType === templateElement ? element :
	            undefined);
	    } else {
	        var valueToWrite = arguments[0];
	        setTemplateDomData(element, {containerData: valueToWrite});
	    }
	};
	
	// ---- ko.templateSources.anonymousTemplate -----
	// Anonymous templates are normally saved/retrieved as DOM nodes through "nodes".
	// For compatibility, you can also read "text"; it will be serialized from the nodes on demand.
	// Writing to "text" is still supported, but then the template data will not be available as DOM nodes.
	
	function anonymousTemplate(element) {
	    this.domElement = element;
	}
	
	anonymousTemplate.prototype = new domElement();
	anonymousTemplate.prototype.constructor = anonymousTemplate;
	anonymousTemplate.prototype.text = function(/* valueToWrite */) {
	    if (arguments.length == 0) {
	        var templateData = getTemplateDomData(this.domElement);
	        if (templateData.textData === undefined && templateData.containerData)
	            templateData.textData = templateData.containerData.innerHTML;
	        return templateData.textData;
	    } else {
	        var valueToWrite = arguments[0];
	        setTemplateDomData(this.domElement, {textData: valueToWrite});
	    }
	};
	
	// If you want to make a custom template engine,
	//
	// [1] Inherit from this class (like ko.nativeTemplateEngine does)
	// [2] Override 'renderTemplateSource', supplying a function with this signature:
	//
	//        function (templateSource, bindingContext, options) {
	//            // - templateSource.text() is the text of the template you should render
	//            // - bindingContext.$data is the data you should pass into the template
	//            //   - you might also want to make bindingContext.$parent, bindingContext.$parents,
	//            //     and bindingContext.$root available in the template too
	//            // - options gives you access to any other properties set on "data-bind: { template: options }"
	//            // - templateDocument is the document object of the template
	//            //
	//            // Return value: an array of DOM nodes
	//        }
	//
	// [3] Override 'createJavaScriptEvaluatorBlock', supplying a function with this signature:
	//
	//        function (script) {
	//            // Return value: Whatever syntax means "Evaluate the JavaScript statement 'script' and output the result"
	//            //               For example, the jquery.tmpl template engine converts 'someScript' to '${ someScript }'
	//        }
	//
	//     This is only necessary if you want to allow data-bind attributes to reference arbitrary template variables.
	//     If you don't want to allow that, you can set the property 'allowTemplateRewriting' to false (like ko.nativeTemplateEngine does)
	//     and then you don't need to override 'createJavaScriptEvaluatorBlock'.
	
	function templateEngine() { }
	
	extend(templateEngine.prototype, {
	  renderTemplateSource: function (templateSource, bindingContext, options$$1, templateDocument) {
	      options$$1.onError("Override renderTemplateSource");
	  },
	
	  createJavaScriptEvaluatorBlock: function (script) {
	      options.onError("Override createJavaScriptEvaluatorBlock");
	  },
	
	  makeTemplateSource: function(template, templateDocument) {
	      // Named template
	      if (typeof template == "string") {
	          templateDocument = templateDocument || document;
	          var elem = templateDocument.getElementById(template);
	          if (!elem)
	              options.onError("Cannot find template with ID " + template);
	          return new domElement(elem);
	      } else if ((template.nodeType == 1) || (template.nodeType == 8)) {
	          // Anonymous template
	          return new anonymousTemplate(template);
	      } else
	          options.onError("Unknown template type: " + template);
	  },
	
	  renderTemplate: function (template, bindingContext, options$$1, templateDocument) {
	      var templateSource = this['makeTemplateSource'](template, templateDocument);
	      return this.renderTemplateSource(templateSource, bindingContext, options$$1, templateDocument);
	  }
	});
	
	var _templateEngine;
	
	function setTemplateEngine(tEngine) {
	    if ((tEngine != undefined) && !(tEngine instanceof templateEngine))
	        //TODO: ko.templateEngine to appropriate name
	        throw new Error("templateEngine must inherit from ko.templateEngine");
	    _templateEngine = tEngine;
	}
	
	function invokeForEachNodeInContinuousRange(firstNode, lastNode, action) {
	    var node, nextInQueue = firstNode, firstOutOfRangeNode = nextSibling(lastNode);
	    while (nextInQueue && ((node = nextInQueue) !== firstOutOfRangeNode)) {
	        nextInQueue = nextSibling(node);
	        action(node, nextInQueue);
	    }
	}
	
	function activateBindingsOnContinuousNodeArray(continuousNodeArray, bindingContext$$1) {
	    // To be used on any nodes that have been rendered by a template and have been inserted into some parent element
	    // Walks through continuousNodeArray (which *must* be continuous, i.e., an uninterrupted sequence of sibling nodes, because
	    // the algorithm for walking them relies on this), and for each top-level item in the virtual-element sense,
	    // (1) Does a regular "applyBindings" to associate bindingContext with this node and to activate any non-memoized bindings
	    // (2) Unmemoizes any memos in the DOM subtree (e.g., to activate bindings that had been memoized during template rewriting)
	
	    if (continuousNodeArray.length) {
	        var firstNode = continuousNodeArray[0],
	            lastNode = continuousNodeArray[continuousNodeArray.length - 1],
	            parentNode = firstNode.parentNode,
	            provider = options.bindingProviderInstance,
	            preprocessNode = provider.preprocessNode;
	
	        if (preprocessNode) {
	            invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node, nextNodeInRange) {
	                var nodePreviousSibling = node.previousSibling;
	                var newNodes = preprocessNode.call(provider, node);
	                if (newNodes) {
	                    if (node === firstNode)
	                        firstNode = newNodes[0] || nextNodeInRange;
	                    if (node === lastNode)
	                        lastNode = newNodes[newNodes.length - 1] || nodePreviousSibling;
	                }
	            });
	
	            // Because preprocessNode can change the nodes, including the first and last nodes, update continuousNodeArray to match.
	            // We need the full set, including inner nodes, because the unmemoize step might remove the first node (and so the real
	            // first node needs to be in the array).
	            continuousNodeArray.length = 0;
	            if (!firstNode) { // preprocessNode might have removed all the nodes, in which case there's nothing left to do
	                return;
	            }
	            if (firstNode === lastNode) {
	                continuousNodeArray.push(firstNode);
	            } else {
	                continuousNodeArray.push(firstNode, lastNode);
	                fixUpContinuousNodeArray(continuousNodeArray, parentNode);
	            }
	        }
	
	        // Need to applyBindings *before* unmemoziation, because unmemoization might introduce extra nodes (that we don't want to re-bind)
	        // whereas a regular applyBindings won't introduce new memoized nodes
	        invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node) {
	            if (node.nodeType === 1 || node.nodeType === 8)
	                applyBindings(bindingContext$$1, node);
	        });
	        invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node) {
	            if (node.nodeType === 1 || node.nodeType === 8)
	                unmemoizeDomNodeAndDescendants(node, [bindingContext$$1]);
	        });
	
	        // Make sure any changes done by applyBindings or unmemoize are reflected in the array
	        fixUpContinuousNodeArray(continuousNodeArray, parentNode);
	    }
	}
	
	function getFirstNodeFromPossibleArray(nodeOrNodeArray) {
	    return nodeOrNodeArray.nodeType ? nodeOrNodeArray
	                                    : nodeOrNodeArray.length > 0 ? nodeOrNodeArray[0]
	                                    : null;
	}
	
	function executeTemplate(targetNodeOrNodeArray, renderMode, template, bindingContext$$1, options$$1) {
	    options$$1 = options$$1 || {};
	    var firstTargetNode = targetNodeOrNodeArray && getFirstNodeFromPossibleArray(targetNodeOrNodeArray);
	    var templateDocument = (firstTargetNode || template || {}).ownerDocument;
	    var templateEngineToUse = (options$$1.templateEngine || _templateEngine);
	    var renderedNodesArray = templateEngineToUse.renderTemplate(template, bindingContext$$1, options$$1, templateDocument);
	
	    // Loosely check result is an array of DOM nodes
	    if ((typeof renderedNodesArray.length != "number") || (renderedNodesArray.length > 0 && typeof renderedNodesArray[0].nodeType != "number"))
	        throw new Error("Template engine must return an array of DOM nodes");
	
	    var haveAddedNodesToParent = false;
	    switch (renderMode) {
	    case "replaceChildren":
	        setDomNodeChildren$1(targetNodeOrNodeArray, renderedNodesArray);
	        haveAddedNodesToParent = true;
	        break;
	    case "replaceNode":
	        replaceDomNodes(targetNodeOrNodeArray, renderedNodesArray);
	        haveAddedNodesToParent = true;
	        break;
	    case "ignoreTargetNode": break;
	    default:
	        throw new Error("Unknown renderMode: " + renderMode);
	    }
	
	    if (haveAddedNodesToParent) {
	        activateBindingsOnContinuousNodeArray(renderedNodesArray, bindingContext$$1);
	        if (options$$1['afterRender'])
	            ignore(options$$1['afterRender'], null, [renderedNodesArray, bindingContext$$1['$data']]);
	    }
	
	    return renderedNodesArray;
	}
	
	function resolveTemplateName(template, data$$1, context) {
	    // The template can be specified as:
	    if (isObservable(template)) {
	        // 1. An observable, with string value
	        return template();
	    } else if (typeof template === 'function') {
	        // 2. A function of (data, context) returning a string
	        return template(data$$1, context);
	    } else {
	        // 3. A string
	        return template;
	    }
	}
	
	function renderTemplate(template, dataOrBindingContext, options$$1, targetNodeOrNodeArray, renderMode) {
	    options$$1 = options$$1 || {};
	    if ((options$$1.templateEngine || _templateEngine) === undefined)
	        throw new Error("Set a template engine before calling renderTemplate");
	    renderMode = renderMode || "replaceChildren";
	
	    if (targetNodeOrNodeArray) {
	        var firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);
	
	        var whenToDispose = function () { return (!firstTargetNode) || !domNodeIsAttachedToDocument(firstTargetNode); }; // Passive disposal (on next evaluation)
	        var activelyDisposeWhenNodeIsRemoved = (firstTargetNode && renderMode == "replaceNode") ? firstTargetNode.parentNode : firstTargetNode;
	
	        return computed( // So the DOM is automatically updated when any dependency changes
	            function () {
	                // Ensure we've got a proper binding context to work with
	                var bindingContext$$1 = (dataOrBindingContext && (dataOrBindingContext instanceof bindingContext))
	                    ? dataOrBindingContext
	                    : new bindingContext(dataOrBindingContext, null, null, null, { "exportDependencies": true });
	
	                var templateName = resolveTemplateName(template, bindingContext$$1['$data'], bindingContext$$1),
	                    renderedNodesArray = executeTemplate(targetNodeOrNodeArray, renderMode, templateName, bindingContext$$1, options$$1);
	
	                if (renderMode == "replaceNode") {
	                    targetNodeOrNodeArray = renderedNodesArray;
	                    firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);
	                }
	            },
	            null,
	            { disposeWhen: whenToDispose, disposeWhenNodeIsRemoved: activelyDisposeWhenNodeIsRemoved }
	        );
	    } else {
	        // We don't yet have a DOM node to evaluate, so use a memo and render the template later when there is a DOM node
	        return memoize(function (domNode) {
	            renderTemplate(template, dataOrBindingContext, options$$1, domNode, "replaceNode");
	        });
	    }
	}
	
	function renderTemplateForEach(template, arrayOrObservableArray, options$$1, targetNode, parentBindingContext) {
	    // Since setDomNodeChildrenFromArrayMapping always calls executeTemplateForArrayItem and then
	    // activateBindingsCallback for added items, we can store the binding context in the former to use in the latter.
	    var arrayItemContext;
	
	    // This will be called by setDomNodeChildrenFromArrayMapping to get the nodes to add to targetNode
	    function executeTemplateForArrayItem(arrayValue, index) {
	        // Support selecting template as a function of the data being rendered
	        arrayItemContext = parentBindingContext['createChildContext'](arrayValue, options$$1['as'], function(context) {
	            context['$index'] = index;
	        });
	
	        var templateName = resolveTemplateName(template, arrayValue, arrayItemContext);
	        return executeTemplate(null, "ignoreTargetNode", templateName, arrayItemContext, options$$1);
	    }
	
	    // This will be called whenever setDomNodeChildrenFromArrayMapping has added nodes to targetNode
	    var activateBindingsCallback = function(arrayValue, addedNodesArray /*, index */) {
	        activateBindingsOnContinuousNodeArray(addedNodesArray, arrayItemContext);
	        if (options$$1['afterRender'])
	            options$$1['afterRender'](addedNodesArray, arrayValue);
	
	        // release the "cache" variable, so that it can be collected by
	        // the GC when its value isn't used from within the bindings anymore.
	        arrayItemContext = null;
	    };
	
	    return computed(function () {
	        var unwrappedArray = unwrap(arrayOrObservableArray) || [];
	        if (typeof unwrappedArray.length == "undefined") // Coerce single value into array
	            unwrappedArray = [unwrappedArray];
	
	        // Filter out any entries marked as destroyed
	        var filteredArray = arrayFilter(unwrappedArray, function(item) {
	            return options$$1['includeDestroyed'] || item === undefined || item === null || !unwrap(item['_destroy']);
	        });
	
	        // Call setDomNodeChildrenFromArrayMapping, ignoring any observables unwrapped within (most likely from a callback function).
	        // If the array items are observables, though, they will be unwrapped in executeTemplateForArrayItem and managed within setDomNodeChildrenFromArrayMapping.
	        ignore(setDomNodeChildrenFromArrayMapping, null, [targetNode, filteredArray, executeTemplateForArrayItem, options$$1, activateBindingsCallback]);
	
	    }, null, { disposeWhenNodeIsRemoved: targetNode });
	}
	
	var templateComputedDomDataKey = nextKey();
	function disposeOldComputedAndStoreNewOne(element, newComputed) {
	    var oldComputed = get(element, templateComputedDomDataKey);
	    if (oldComputed && (typeof(oldComputed.dispose) == 'function'))
	        oldComputed.dispose();
	    set(element, templateComputedDomDataKey, (newComputed && newComputed.isActive()) ? newComputed : undefined);
	}
	
	var template = {
	    init: function(element, valueAccessor) {
	        var container;
	        
	        // Expose 'conditional' for `else` chaining.
	        set(element, 'conditional', {
	            elseChainSatisfied: observable(true)
	        });
	        
	        // Support anonymous templates
	        var bindingValue = unwrap(valueAccessor());
	        if (typeof bindingValue == "string" || bindingValue['name']) {
	            // It's a named template - clear the element
	            emptyNode(element);
	        } else if ('nodes' in bindingValue) {
	            // We've been given an array of DOM nodes. Save them as the template source.
	            // There is no known use case for the node array being an observable array (if the output
	            // varies, put that behavior *into* your template - that's what templates are for), and
	            // the implementation would be a mess, so assert that it's not observable.
	            var nodes = bindingValue['nodes'] || [];
	            if (isObservable(nodes)) {
	                throw new Error('The "nodes" option must be a plain, non-observable array.');
	            }
	            container = moveCleanedNodesToContainerElement(nodes); // This also removes the nodes from their current parent
	            new anonymousTemplate(element)['nodes'](container);
	        } else {
	            // It's an anonymous template - store the element contents, then clear the element
	            var templateNodes = childNodes(element);
	            container = moveCleanedNodesToContainerElement(templateNodes); // This also removes the nodes from their current parent
	            new anonymousTemplate(element).nodes(container);
	        }
	        return { 'controlsDescendantBindings': true };
	    },
	    update: function (element, valueAccessor, allBindings, viewModel, bindingContext$$1) {
	        var value = valueAccessor(),
	            options$$1 = unwrap(value),
	            shouldDisplay = true,
	            templateComputed = null,
	            elseChainSatisfied = get(element, 'conditional').elseChainSatisfied,
	            templateName;
	
	        if (typeof options$$1 == "string") {
	            templateName = value;
	            options$$1 = {};
	        } else {
	            templateName = options$$1['name'];
	
	            // Support "if"/"ifnot" conditions
	            if ('if' in options$$1)
	                shouldDisplay = unwrap(options$$1['if']);
	            if (shouldDisplay && 'ifnot' in options$$1)
	                shouldDisplay = !unwrap(options$$1['ifnot']);
	        }
	
	        if ('foreach' in options$$1) {
	            // Render once for each data point (treating data set as empty if shouldDisplay==false)
	            var dataArray = (shouldDisplay && options$$1['foreach']) || [];
	            templateComputed = renderTemplateForEach(templateName || element, dataArray, options$$1, element, bindingContext$$1);
	            
	            elseChainSatisfied((unwrap(dataArray) || []).length !== 0);
	        } else if (!shouldDisplay) {
	            emptyNode(element);
	            elseChainSatisfied(false);
	        } else {
	            // Render once for this single data point (or use the viewModel if no data was provided)
	            var innerBindingContext = ('data' in options$$1) ?
	                bindingContext$$1.createStaticChildContext(options$$1['data'], options$$1['as']) :  // Given an explitit 'data' value, we create a child binding context for it
	                bindingContext$$1;                                                        // Given no explicit 'data' value, we retain the same binding context
	            templateComputed = renderTemplate(templateName || element, innerBindingContext, options$$1, element);
	            elseChainSatisfied(true);
	        }
	
	        // It only makes sense to have a single template computed per element (otherwise which one should have its output displayed?)
	        disposeOldComputedAndStoreNewOne(element, templateComputed);
	    },
	    allowVirtualElements: true
	};
	
	function nativeTemplateEngine () {
	}
	
	nativeTemplateEngine.prototype = new templateEngine();
	nativeTemplateEngine.prototype.constructor = nativeTemplateEngine;
	nativeTemplateEngine.prototype.renderTemplateSource = function(templateSource, bindingContext, options$$1, templateDocument) {
	    var useNodesIfAvailable = !(ieVersion < 9), // IE<9 cloneNode doesn't work properly
	        templateNodesFunc = useNodesIfAvailable ? templateSource.nodes : null,
	        templateNodes = templateNodesFunc ? templateSource.nodes() : null;
	
	    if (templateNodes) {
	        return makeArray(templateNodes.cloneNode(true).childNodes);
	    } else {
	        var templateText = templateSource.text();
	        return parseHtmlFragment(templateText, templateDocument);
	    }
	};
	
	
	nativeTemplateEngine.instance = new nativeTemplateEngine();
	setTemplateEngine(nativeTemplateEngine.instance);
	
	function makeTemplateValueAccessor(valueAccessor) {
	    return function() {
	        var modelValue = valueAccessor(),
	            unwrappedValue = peek(modelValue);    // Unwrap without setting a dependency here
	
	        // If unwrappedValue is the array, pass in the wrapped value on its own
	        // The value will be unwrapped and tracked within the template binding
	        // (See https://github.com/SteveSanderson/knockout/issues/523)
	        if ((!unwrappedValue) || typeof unwrappedValue.length == "number")
	            return { 'foreach': modelValue, 'templateEngine': nativeTemplateEngine.instance };
	
	        // If unwrappedValue.data is the array, preserve all relevant options and unwrap again value so we get updates
	        unwrap(modelValue);
	        return {
	            'foreach': unwrappedValue['data'],
	            'as': unwrappedValue['as'],
	            'includeDestroyed': unwrappedValue['includeDestroyed'],
	            'afterAdd': unwrappedValue['afterAdd'],
	            'beforeRemove': unwrappedValue['beforeRemove'],
	            'afterRender': unwrappedValue['afterRender'],
	            'beforeMove': unwrappedValue['beforeMove'],
	            'afterMove': unwrappedValue['afterMove'],
	            'templateEngine': nativeTemplateEngine.instance
	        };
	    };
	}
	
	
	// "foreach: someExpression" is equivalent to "template: { foreach: someExpression }"
	// "foreach: { data: someExpression, afterAdd: myfn }" is equivalent to "template: { foreach: someExpression, afterAdd: myfn }"
	var foreach = {
	    init: function(element, valueAccessor) {
	        return getBindingHandler$1('template').init(element, makeTemplateValueAccessor(valueAccessor));
	    },
	    update: function(element, valueAccessor, allBindings, viewModel, bindingContext$$1) {
	        return getBindingHandler$1('template').update(element, makeTemplateValueAccessor(valueAccessor), allBindings, viewModel, bindingContext$$1);
	    },
	    allowVirtualElements: true,
	    bindingRewriteValidator: false
	};
	
	//ko.expressionRewriting.bindingRewriteValidators['foreach'] = false; // Can't rewrite control flow bindings
	
	//    'let': letBinding,
	//    template: template,
	
	var bindings$1 = {
	    foreach: foreach,
	    template: template
	};
	
	/**
	 * Test a node for whether it represents an "else" condition.
	 * @param  {HTMLElement}  node to be tested
	 * @return {Boolean}      true when
	 *
	 * Matches <!-- else -->
	 */
	function isElseNode(node) {
	    return node.nodeType === 8 &&
	        node.nodeValue.trim().toLowerCase() === 'else';
	}
	
	function detectElse(element) {
	    var children = childNodes(element);
	    for (var i = 0, j = children.length; i < j; ++i) {
	        if (isElseNode(children[i])) { return true; }
	    }
	    return false;
	}
	
	
	/**
	 * Clone the nodes, returning `ifNodes`, `elseNodes`
	 * @param  {HTMLElement} element The nodes to be cloned
	 * @param  {boolean}    hasElse short-circuit to speed up the inner-loop.
	 * @return {object}         Containing the cloned nodes.
	 */
	function cloneIfElseNodes(element, hasElse) {
	    var children = childNodes(element),
	        ifNodes = [],
	        elseNodes = [],
	        target = ifNodes;
	
	    for (var i = 0, j = children.length; i < j; ++i) {
	        if (hasElse && isElseNode(children[i])) {
	            target = elseNodes;
	            hasElse = false;
	        } else {
	            target.push(cleanNode(children[i].cloneNode(true)));
	        }
	    }
	
	    return {
	        ifNodes: ifNodes,
	        elseNodes: elseNodes
	    };
	}
	
	/**
	 * Return any conditional that precedes the given node.
	 * @param  {HTMLElement} node To find the preceding conditional of
	 * @return {object}      { elseChainSatisfied: observable }
	 */
	function getPrecedingConditional(node) {
	    do {
	        node = node.previousSibling;
	    } while(node && node.nodeType !== 1 && node.nodeType !== 8);
	
	    if (!node) { return; }
	
	    if (node.nodeType === 8) {
	        node = previousSibling(node);
	    }
	
	    return get(node, 'conditional');
	}
	
	
	/**
	 * Create a DOMbinding that controls DOM nodes presence
	 *
	 * Covers e.g.
	 *
	 * 1. DOM Nodes contents
	 *
	 * <div data-bind='if: x'>
	 * <!-- else --> ... an optional "if"
	 * </div>
	 *
	 * 2. Virtual elements
	 *
	 * <!-- ko if: x -->
	 * <!-- else -->
	 * <!-- /ko -->
	 *
	 * 3. Else binding
	 * <div data-bind='if: x'></div>
	 * <div data-bind='else'></div>
	 */
	function makeWithIfBinding(isWith, isNot, isElse, makeContextCallback) {
	    return {
	        init: function(element, valueAccessor, allBindings, viewModel, bindingContext$$1) {
	
	            var didDisplayOnLastUpdate,
	                hasElse = detectElse(element),
	                completesElseChain = observable(),
	                ifElseNodes,
	                precedingConditional;
	
	            set(element, "conditional", {
	                elseChainSatisfied: completesElseChain,
	            });
	
	            if (isElse) {
	                precedingConditional = getPrecedingConditional(element);
	            }
	
	            computed(function() {
	                var rawValue = valueAccessor(),
	                    dataValue = unwrap(rawValue),
	                    shouldDisplayIf = !isNot !== !dataValue || (isElse && rawValue === undefined), // equivalent to (isNot ? !dataValue : !!dataValue) || isElse && rawValue === undefined
	                    isFirstRender = !ifElseNodes,
	                    needsRefresh = isFirstRender || isWith || (shouldDisplayIf !== didDisplayOnLastUpdate);
	
	                if (precedingConditional && precedingConditional.elseChainSatisfied()) {
	                    shouldDisplayIf = false;
	                    needsRefresh = isFirstRender || didDisplayOnLastUpdate;
	                    completesElseChain(true);
	                } else {
	                    completesElseChain(shouldDisplayIf);
	                }
	
	                if (!needsRefresh) { return; }
	
	                if (isFirstRender && (getDependenciesCount() || hasElse)) {
	                    ifElseNodes = cloneIfElseNodes(element, hasElse);
	                }
	
	                if (shouldDisplayIf) {
	                    if (!isFirstRender || hasElse) {
	                        setDomNodeChildren$1(element, cloneNodes(ifElseNodes.ifNodes));
	                    }
	                } else if (ifElseNodes) {
	                    setDomNodeChildren$1(element, cloneNodes(ifElseNodes.elseNodes));
	                } else {
	                    emptyNode(element);
	                }
	
	                applyBindingsToDescendants(makeContextCallback ? makeContextCallback(bindingContext$$1, rawValue) : bindingContext$$1, element);
	
	                didDisplayOnLastUpdate = shouldDisplayIf;
	            }, null, { disposeWhenNodeIsRemoved: element });
	
	            return { 'controlsDescendantBindings': true };
	        },
	        allowVirtualElements: true,
	        bindingRewriteValidator: false
	    };
	}
	
	function withContextCallback(bindingContext$$1, dataValue) {
	    return bindingContext$$1.createStaticChildContext(dataValue);
	}
	
	                                 /* isWith, isNot */
	var $if =   makeWithIfBinding(false, false, false);
	var ifnot = makeWithIfBinding(false, true, false);
	var $else = makeWithIfBinding(false, false, true);
	var $with = makeWithIfBinding(true, false, false, withContextCallback);
	
	var bindings$2 = {
	    'if': $if,
	    'with': $with,
	    ifnot: ifnot, unless: ifnot,
	    'else': $else,
	    'elseif': $else
	};
	
	// index.js
	// --------
	// Fast For Each
	//
	// Employing sound techniques to make a faster Knockout foreach binding.
	// --------
	
	//      Utilities
	var MAX_LIST_SIZE = 9007199254740991;
	
	// from https://github.com/jonschlinkert/is-plain-object
	function isPlainObject(o) {
	  return !!o && typeof o === 'object' && o.constructor === Object;
	}
	
	var supportsDocumentFragment = document && typeof document.createDocumentFragment === "function";
	
	
	// Get a copy of the (possibly virtual) child nodes of the given element,
	// put them into a container, then empty the given node.
	function makeTemplateNode(sourceNode) {
	  var container = document.createElement("div");
	  var parentNode;
	  if (sourceNode.content) {
	    // For e.g. <template> tags
	    parentNode = sourceNode.content;
	  } else if (sourceNode.tagName === 'SCRIPT') {
	    parentNode = document.createElement("div");
	    parentNode.innerHTML = sourceNode.text;
	  } else {
	    // Anything else e.g. <div>
	    parentNode = sourceNode;
	  }
	  arrayForEach(childNodes(parentNode), function (child) {
	    // FIXME - This cloneNode could be expensive; we may prefer to iterate over the
	    // parentNode children in reverse (so as not to foul the indexes as childNodes are
	    // removed from parentNode when inserted into the container)
	    if (child) {
	      container.insertBefore(child.cloneNode(true), null);
	    }
	  });
	  return container;
	}
	
	// Mimic a KO change item 'add'
	function valueToChangeAddItem(value, index) {
	  return {
	    status: 'added',
	    value: value,
	    index: index
	  };
	}
	
	
	// store a symbol for caching the pending delete info index in the data item objects
	var PENDING_DELETE_INDEX_KEY = createSymbolOrString("_ko_ffe_pending_delete_index");
	
	function ForEach(spec) {
	  this.element = spec.element;
	  this.container = isStartComment(this.element) ?
	                   this.element.parentNode : this.element;
	  this.$context = spec.$context;
	  this.data = spec.data;
	  this.as = spec.as;
	  this.noContext = spec.noContext;
	  this.noIndex = spec.noIndex;
	  this.afterAdd = spec.afterAdd;
	  this.beforeRemove = spec.beforeRemove;
	  this.templateNode = makeTemplateNode(
	    spec.templateNode || (spec.name ? document.getElementById(spec.name).cloneNode(true) : spec.element)
	  );
	  this.afterQueueFlush = spec.afterQueueFlush;
	  this.beforeQueueFlush = spec.beforeQueueFlush;
	  this.changeQueue = [];
	  this.firstLastNodesList = [];
	  this.indexesToDelete = [];
	  this.rendering_queued = false;
	  this.pendingDeletes = [];
	
	  // Remove existing content.
	  emptyNode(this.element);
	
	  // Prime content
	  var primeData = unwrap(this.data);
	  if (primeData.map) {
	    this.onArrayChange(primeData.map(valueToChangeAddItem), true);
	  }
	
	  // Watch for changes
	  if (isObservable(this.data)) {
	    if (!this.data.indexOf) {
	      // Make sure the observable is trackable.
	      this.data = this.data.extend({ trackArrayChanges: true });
	    }
	    this.changeSubs = this.data.subscribe(this.onArrayChange, this, 'arrayChange');
	  }
	}
	
	ForEach.PENDING_DELETE_INDEX_KEY = PENDING_DELETE_INDEX_KEY;
	
	
	ForEach.prototype.dispose = function () {
	  if (this.changeSubs) {
	    this.changeSubs.dispose();
	  }
	  this.flushPendingDeletes();
	};
	
	
	// If the array changes we register the change.
	ForEach.prototype.onArrayChange = function (changeSet, isInitial) {
	  var self = this;
	  var changeMap = {
	    added: [],
	    deleted: []
	  };
	
	  // knockout array change notification index handling:
	  // - sends the original array indexes for deletes
	  // - sends the new array indexes for adds
	  // - sorts them all by index in ascending order
	  // because of this, when checking for possible batch additions, any delete can be between to adds with neighboring indexes, so only additions should be checked
	  for (var i = 0, len = changeSet.length; i < len; i++) {
	
	    if (changeMap.added.length && changeSet[i].status == 'added') {
	      var lastAdd = changeMap.added[changeMap.added.length - 1];
	      var lastIndex = lastAdd.isBatch ? lastAdd.index + lastAdd.values.length - 1 : lastAdd.index;
	      if (lastIndex + 1 == changeSet[i].index) {
	        if (!lastAdd.isBatch) {
	          // transform the last addition into a batch addition object
	          lastAdd = {
	            isBatch: true,
	            status: 'added',
	            index: lastAdd.index,
	            values: [lastAdd.value]
	          };
	          changeMap.added.splice(changeMap.added.length - 1, 1, lastAdd);
	        }
	        lastAdd.values.push(changeSet[i].value);
	        continue;
	      }
	    }
	
	    changeMap[changeSet[i].status].push(changeSet[i]);
	  }
	
	  if (changeMap.deleted.length > 0) {
	    this.changeQueue.push.apply(this.changeQueue, changeMap.deleted);
	    this.changeQueue.push({ status: 'clearDeletedIndexes' });
	  }
	  this.changeQueue.push.apply(this.changeQueue, changeMap.added);
	  // Once a change is registered, the ticking count-down starts for the processQueue.
	  if (this.changeQueue.length > 0 && !this.rendering_queued) {
	    this.rendering_queued = true;
	    if (isInitial) {
	      self.processQueue();
	    } else {
	      ForEach.animateFrame.call(window, function () { self.processQueue(); });
	    }
	  }
	};
	
	
	// Reflect all the changes in the queue in the DOM, then wipe the queue.
	ForEach.prototype.processQueue = function () {
	  var self = this;
	  var lowestIndexChanged = MAX_LIST_SIZE;
	
	  // Callback so folks can do things before the queue flush.
	  if (typeof this.beforeQueueFlush === 'function') {
	    this.beforeQueueFlush(this.changeQueue);
	  }
	
	  arrayForEach(this.changeQueue, function (changeItem) {
	    if (typeof changeItem.index === 'number') {
	      lowestIndexChanged = Math.min(lowestIndexChanged, changeItem.index);
	    }
	    // console.log(self.data(), "CI", JSON.stringify(changeItem, null, 2), JSON.stringify($(self.element).text()))
	    self[changeItem.status](changeItem);
	    // console.log("  ==> ", JSON.stringify($(self.element).text()))
	  });
	  this.flushPendingDeletes();
	  this.rendering_queued = false;
	
	  // Update our indexes.
	  if (!this.noIndex) {
	    this.updateIndexes(lowestIndexChanged);
	  }
	
	  // Callback so folks can do things.
	  if (typeof this.afterQueueFlush === 'function') {
	    this.afterQueueFlush(this.changeQueue);
	  }
	  this.changeQueue = [];
	};
	
	
	function extendWithIndex(context) {
	  context.$index = observable();
	}
	
	
	// Process a changeItem with {status: 'added', ...}
	ForEach.prototype.added = function (changeItem) {
	  var index = changeItem.index;
	  var valuesToAdd = changeItem.isBatch ? changeItem.values : [changeItem.value];
	  var referenceElement = this.getLastNodeBeforeIndex(index);
	  // gather all childnodes for a possible batch insertion
	  var allChildNodes = [];
	  var children;
	
	  for (var i = 0, len = valuesToAdd.length; i < len; ++i) {
	    // we check if we have a pending delete with reusable nodesets for this data, and if yes, we reuse one nodeset
	    var pendingDelete = this.getPendingDeleteFor(valuesToAdd[i]);
	    if (pendingDelete && pendingDelete.nodesets.length) {
	      children = pendingDelete.nodesets.pop();
	    } else {
	      var templateClone = this.templateNode.cloneNode(true);
	      var childContext;
	
	      if (this.noContext) {
	        childContext = this.$context.extend({
	          $item: valuesToAdd[i],
	          $index: this.noIndex ? undefined : observable()
	        });
	      } else {
	        childContext = this.$context.createChildContext(valuesToAdd[i], this.as || null, this.noIndex ? undefined : extendWithIndex);
	      }
	
	      // apply bindings first, and then process child nodes, because bindings can add childnodes
	      applyBindingsToDescendants(childContext, templateClone);
	
	      children = childNodes(templateClone);
	    }
	
	    // Note discussion at https://github.com/angular/angular.js/issues/7851
	    allChildNodes.push.apply(allChildNodes, Array.prototype.slice.call(children));
	    this.firstLastNodesList.splice(index + i, 0, { first: children[0], last: children[children.length - 1] });
	  }
	
	  if (typeof this.afterAdd === 'function') {
	    this.afterAdd({
	      nodeOrArrayInserted: this.insertAllAfter(allChildNodes, referenceElement),
	      foreachInstance: this
	    }
	    );
	  } else {
	    this.insertAllAfter(allChildNodes, referenceElement);
	  }
	};
	
	ForEach.prototype.getNodesForIndex = function (index) {
	  var result = [],
	    ptr = this.firstLastNodesList[index].first,
	    last = this.firstLastNodesList[index].last;
	  result.push(ptr);
	  while (ptr && ptr !== last) {
	    ptr = ptr.nextSibling;
	    result.push(ptr);
	  }
	  return result;
	};
	
	ForEach.prototype.getLastNodeBeforeIndex = function (index) {
	  if (index < 1 || index - 1 >= this.firstLastNodesList.length)
	    return null;
	  return this.firstLastNodesList[index - 1].last;
	};
	
	ForEach.prototype.insertAllAfter = function (nodeOrNodeArrayToInsert, insertAfterNode) {
	  var frag, len, i,
	    containerNode = this.element;
	
	  // poor man's node and array check, should be enough for this
	  if (nodeOrNodeArrayToInsert.nodeType === undefined && nodeOrNodeArrayToInsert.length === undefined) {
	    throw new Error("Expected a single node or a node array");
	  }
	  if (nodeOrNodeArrayToInsert.nodeType !== undefined) {
	    insertAfter(containerNode, nodeOrNodeArrayToInsert, insertAfterNode);
	    return [nodeOrNodeArrayToInsert];
	  } else if (nodeOrNodeArrayToInsert.length === 1) {
	    insertAfter(containerNode, nodeOrNodeArrayToInsert[0], insertAfterNode);
	  } else if (supportsDocumentFragment) {
	    frag = document.createDocumentFragment();
	
	    for (i = 0, len = nodeOrNodeArrayToInsert.length; i !== len; ++i) {
	      frag.appendChild(nodeOrNodeArrayToInsert[i]);
	    }
	    insertAfter(containerNode, frag, insertAfterNode);
	  } else {
	    // Nodes are inserted in reverse order - pushed down immediately after
	    // the last node for the previous item or as the first node of element.
	    for (i = nodeOrNodeArrayToInsert.length - 1; i >= 0; --i) {
	      var child = nodeOrNodeArrayToInsert[i];
	      if (!child) { break; }
	      insertAfter(containerNode, child, insertAfterNode);
	    }
	  }
	  return nodeOrNodeArrayToInsert;
	};
	
	// checks if the deleted data item should be handled with delay for a possible reuse at additions
	ForEach.prototype.shouldDelayDeletion = function (data) {
	  return data && (typeof data === "object" || typeof data === "function");
	};
	
	// gets the pending deletion info for this data item
	ForEach.prototype.getPendingDeleteFor = function (data) {
	  var index = data && data[PENDING_DELETE_INDEX_KEY];
	  if (index === undefined) return null;
	  return this.pendingDeletes[index];
	};
	
	// tries to find the existing pending delete info for this data item, and if it can't, it registeres one
	ForEach.prototype.getOrCreatePendingDeleteFor = function (data) {
	  var pd = this.getPendingDeleteFor(data);
	  if (pd) {
	    return pd;
	  }
	  pd = {
	    data: data,
	    nodesets: []
	  };
	  data[PENDING_DELETE_INDEX_KEY] = this.pendingDeletes.length;
	  this.pendingDeletes.push(pd);
	  return pd;
	};
	
	// Process a changeItem with {status: 'deleted', ...}
	ForEach.prototype.deleted = function (changeItem) {
	  // if we should delay the deletion of this data, we add the nodeset to the pending delete info object
	  if (this.shouldDelayDeletion(changeItem.value)) {
	    var pd = this.getOrCreatePendingDeleteFor(changeItem.value);
	    pd.nodesets.push(this.getNodesForIndex(changeItem.index));
	  } else { // simple data, just remove the nodes
	    this.removeNodes(this.getNodesForIndex(changeItem.index));
	  }
	  this.indexesToDelete.push(changeItem.index);
	};
	
	// removes a set of nodes from the DOM
	ForEach.prototype.removeNodes = function (nodes) {
	  if (!nodes.length) { return; }
	
	  var removeFn = function () {
	    var parent = nodes[0].parentNode;
	    for (var i = nodes.length - 1; i >= 0; --i) {
	      cleanNode(nodes[i]);
	      parent.removeChild(nodes[i]);
	    }
	  };
	
	  if (this.beforeRemove) {
	    var beforeRemoveReturn = this.beforeRemove({
	      nodesToRemove: nodes, foreachInstance: this
	    }) || {};
	    // If beforeRemove returns a `then`–able e.g. a Promise, we remove
	    // the nodes when that thenable completes.  We pass any errors to
	    // ko.onError.
	    if (typeof beforeRemoveReturn.then === 'function') {
	      beforeRemoveReturn.then(removeFn, options.onError);
	    }
	  } else {
	    removeFn();
	  }
	};
	
	// flushes the pending delete info store
	// this should be called after queue processing has finished, so that data items and remaining (not reused) nodesets get cleaned up
	// we also call it on dispose not to leave any mess
	ForEach.prototype.flushPendingDeletes = function () {
	  for (var i = 0, len = this.pendingDeletes.length; i != len; ++i) {
	    var pd = this.pendingDeletes[i];
	    while (pd.nodesets.length) {
	      this.removeNodes(pd.nodesets.pop());
	    }
	    if (pd.data && pd.data[PENDING_DELETE_INDEX_KEY] !== undefined)
	      delete pd.data[PENDING_DELETE_INDEX_KEY];
	  }
	  this.pendingDeletes = [];
	};
	
	// We batch our deletion of item indexes in our parallel array.
	// See brianmhunt/knockout-fast-foreach#6/#8
	ForEach.prototype.clearDeletedIndexes = function () {
	  // We iterate in reverse on the presumption (following the unit tests) that KO's diff engine
	  // processes diffs (esp. deletes) monotonically ascending i.e. from index 0 -> N.
	  for (var i = this.indexesToDelete.length - 1; i >= 0; --i) {
	    this.firstLastNodesList.splice(this.indexesToDelete[i], 1);
	  }
	  this.indexesToDelete = [];
	};
	
	
	ForEach.prototype.getContextStartingFrom = function (node) {
	  var ctx;
	  while (node) {
	    ctx = contextFor(node);
	    if (ctx) { return ctx; }
	    node = node.nextSibling;
	  }
	};
	
	
	ForEach.prototype.updateIndexes = function (fromIndex) {
	  var ctx;
	  for (var i = fromIndex, len = this.firstLastNodesList.length; i < len; ++i) {
	    ctx = this.getContextStartingFrom(this.firstLastNodesList[i].first);
	    if (ctx) { ctx.$index(i); }
	  }
	};
	
	
	/**
	 * Set whether the binding is synchronous.
	 * Useful during testing.
	 */
	function setSync(toggle) {
	  if (toggle) {
	    ForEach.animateFrame = function (frame) { frame(); };
	  } else {
	    ForEach.animateFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame ||
	      window.mozRequestAnimationFrame || window.msRequestAnimationFrame ||
	      function (cb) { return window.setTimeout(cb, 1000 / 60); };
	  }
	}
	
	
	var foreach$1 = {
	  // Valid valueAccessors:
	  //    []
	  //    observable([])
	  //    observableArray([])
	  //    computed
	  //    {data: array, name: string, as: string}
	  init: function init(element, valueAccessor, bindings, vm, context) {
	    var ffe, value = valueAccessor();
	    if (isPlainObject(value)) {
	      value.element = value.element || element;
	      value.$context = context;
	      ffe = new ForEach(value);
	    } else {
	      ffe = new ForEach({
	        element: element,
	        data: unwrap(context.$rawData) === value ? context.$rawData : value,
	        $context: context
	      });
	    }
	
	    addDisposeCallback(element, function () {
	      ffe.dispose();
	    });
	    return { controlsDescendantBindings: true };
	  },
	
	  setSync: setSync,
	
	  allowVirtualElements: true,
	
	  // Export for testing, debugging, and overloading.
	  ForEach: ForEach
	};
	
	var bindings$3 = {
	  foreach: foreach$1
	};
	
	// By default, foreach will be async.
	foreach$1.setSync(false);
	
	var dataBind = 'data-bind';
	
	
	// Performance comparison at http://jsperf.com/markup-interpolation-comparison
	function parseInterpolationMarkup(textToParse, outerTextCallback, expressionCallback) {
	    function innerParse(text) {
	        var innerMatch = text.match(/^([\s\S]*)}}([\s\S]*?)\{\{([\s\S]*)$/);
	        if (innerMatch) {
	            innerParse(innerMatch[1]);
	            outerTextCallback(innerMatch[2]);
	            expressionCallback(innerMatch[3]);
	        } else {
	            expressionCallback(text);
	        }
	    }
	
	    var outerMatch = textToParse.match(/^([\s\S]*?)\{\{([\s\S]*)}}([\s\S]*)$/);
	
	    if (outerMatch) {
	        outerTextCallback(outerMatch[1]);
	        innerParse(outerMatch[2]);
	        outerTextCallback(outerMatch[3]);
	    }
	}
	
	function trim(string) {
	    return string ? string.trim() : '';
	}
	
	function interpolationMarkupPreprocessor(node) {
	    var nodes = [];
	
	    function addTextNode(text) {
	        if (text) {
	            nodes.push(document.createTextNode(text));
	        }
	    }
	
	    function wrapExpr(expressionText) {
	        if (expressionText) {
	            nodes.push.apply(nodes, interpolationMarkup.wrapExpression(expressionText, node));
	        }
	    }
	
	    // only needs to work with text nodes
	    if (node.nodeType === 3 && node.nodeValue && node.nodeValue.indexOf('{{') !== -1 && (node.parentNode || {}).nodeName != "TEXTAREA") {
	        parseInterpolationMarkup(node.nodeValue, addTextNode, wrapExpr);
	
	        if (nodes.length) {
	            if (node.parentNode) {
	                for (var i = 0, n = nodes.length, parent = node.parentNode; i < n; ++i) {
	                    parent.insertBefore(nodes[i], node);
	                }
	                parent.removeChild(node);
	            }
	            return nodes;
	        }
	    }
	}
	
	
	function wrapExpression(expressionText_, node) {
	    var ownerDocument = node ? node.ownerDocument : document,
	        closeComment = true,
	        binding,
	        expressionText = trim(expressionText_),
	        firstChar = expressionText[0],
	        lastChar = expressionText[expressionText.length - 1],
	        result = [],
	        matches;
	
	    if (firstChar === '#') {
	        if (lastChar === '/') {
	            binding = expressionText.slice(1, -1);
	        } else {
	            binding = expressionText.slice(1);
	            closeComment = false;
	        }
	        matches = binding.match(/^([^,"'{}()\/:[\]\s]+)\s+([^\s:].*)/);
	        if (matches) {
	            binding = matches[1] + ':' + matches[2];
	        }
	    } else if (firstChar === '/') {
	        // replace only with a closing comment
	    } else if (firstChar === '{' && lastChar === '}') {
	        binding = "html:" + trim(expressionText.slice(1, -1));
	    } else {
	        binding = "text:" + trim(expressionText);
	    }
	
	    if (binding) {
	        result.push(ownerDocument.createComment("ko " + binding));
	    }
	    if (closeComment) {
	        result.push(ownerDocument.createComment("/ko"));
	    }
	    return result;
	}
	
	
	function attributeInterpolationMarkerPreprocessor(node, provider) {
	    function addText(text) {
	        if (text) {
	            parts.push('"' + text.replace(/"/g, '\\"') + '"');
	        }
	    }
	
	    function addExpr(expressionText) {
	        if (expressionText) {
	            attrValue = expressionText;
	            parts.push('@(' + expressionText + ")");
	        }
	    }
	
	    if (node.nodeType === 1 && node.attributes.length) {
	        var dataBindAttribute = node.getAttribute(dataBind);
	        for (var attrs = arrayPushAll([], node.attributes), n = attrs.length, i = 0; i < n; ++i) {
	            var attr = attrs[i];
	            if (attr.specified && attr.name != dataBind && attr.value.indexOf('{{') !== -1) {
	                var parts = [], attrValue = '';
	                parseInterpolationMarkup(attr.value, addText, addExpr);
	
	                if (parts.length > 1) {
	                    attrValue = '""+' + parts.join('+');
	                }
	
	                if (attrValue) {
	                    var attrName = attr.name.toLowerCase();
	                    var attrBinding = attributeInterpolationMarkup.attributeBinding(attrName, attrValue, provider) || attributeBinding(attrName, attrValue, provider);
	                    if (!dataBindAttribute) {
	                        dataBindAttribute = attrBinding;
	                    } else {
	                        dataBindAttribute += ',' + attrBinding;
	                    }
	                    node.setAttribute(dataBind, dataBindAttribute);
	                    // Using removeAttribute instead of removeAttributeNode because IE clears the
	                    // class if you use removeAttributeNode to remove the id.
	                    node.removeAttribute(attr.name);
	                }
	            }
	        }
	    }
	}
	
	function attributeBinding(name, value, provider) {
	    if (provider.bindingHandlers.get(name)) {
	        return name + ':' + value;
	    } else {
	        return 'attr.' + name + ':' + value;
	    }
	}
	
	
	// Exports
	var interpolationMarkup = {
	    nodePreProcessor: interpolationMarkupPreprocessor,
	    wrapExpression: wrapExpression
	};
	
	var attributeInterpolationMarkup = {
	    nodePreProcessor: attributeInterpolationMarkerPreprocessor,
	    attributeBinding: attributeBinding
	};
	
	var preprocessors = [
	    interpolationMarkup,
	    attributeInterpolationMarkup
	];
	
	var sproto = String.prototype;
	
	var filters = {};
	
	// Convert value to uppercase
	filters.uppercase = function(value) {
	    return sproto.toUpperCase.call(unwrap(value));
	};
	
	// Convert value to lowercase
	filters.lowercase = function(value) {
	    return sproto.toLowerCase.call(unwrap(value));
	};
	
	// Return default value if the input value is empty or null
	filters['default'] = function (value, defaultValue) {
	    value = unwrap(value);
	    if (typeof value === "function") {
	        return value;
	    }
	    if (typeof value === "string") {
	        return sproto.trim.call(value) === '' ? defaultValue : value;
	    }
	    return value == null || value.length == 0 ? defaultValue : value;
	};
	
	// Return the value with the search string replaced with the replacement string
	filters.replace = function(value, search, replace) {
	    return sproto.replace.call(unwrap(value), search, replace);
	};
	
	filters.fit = function(value, length, replacement, trimWhere) {
	    value = unwrap(value);
	    if (length && ('' + value).length > length) {
	        replacement = '' + (replacement || '...');
	        length = length - replacement.length;
	        value = '' + value;
	        switch (trimWhere) {
	            case 'left':
	                return replacement + value.slice(-length);
	            case 'middle':
	                var leftLen = Math.ceil(length / 2);
	                return value.substr(0, leftLen) + replacement + value.slice(leftLen-length);
	            default:
	                return value.substr(0, length) + replacement;
	        }
	    } else {
	        return value;
	    }
	};
	
	// Convert a model object to JSON
	filters.json = function(rootObject, space, replacer) {
	       // replacer and space are optional
	    return JSON.stringify(toJS(rootObject), replacer, space);
	};
	
	// Format a number using the browser's toLocaleString
	filters.number = function(value) {
	    return (+unwrap(value)).toLocaleString();
	};
	
	var loadingSubscribablesCache = {};
	var loadedDefinitionsCache = {};    // Tracks component loads that have already completed
	
	function loadComponentAndNotify(componentName, callback) {
	    var _subscribable = getObjectOwnProperty(loadingSubscribablesCache, componentName),
	        completedAsync;
	    if (!_subscribable) {
	        // It's not started loading yet. Start loading, and when it's done, move it to loadedDefinitionsCache.
	        _subscribable = loadingSubscribablesCache[componentName] = new subscribable();
	        _subscribable.subscribe(callback);
	
	        beginLoadingComponent(componentName, function(definition, config) {
	            var isSynchronousComponent = !!(config && config.synchronous);
	            loadedDefinitionsCache[componentName] = { definition: definition, isSynchronousComponent: isSynchronousComponent };
	            delete loadingSubscribablesCache[componentName];
	
	            // For API consistency, all loads complete asynchronously. However we want to avoid
	            // adding an extra task schedule if it's unnecessary (i.e., the completion is already
	            // async).
	            //
	            // You can bypass the 'always asynchronous' feature by putting the synchronous:true
	            // flag on your component configuration when you register it.
	            if (completedAsync || isSynchronousComponent) {
	                // Note that notifySubscribers ignores any dependencies read within the callback.
	                // See comment in loaderRegistryBehaviors.js for reasoning
	                _subscribable.notifySubscribers(definition);
	            } else {
	                schedule(function() {
	                    _subscribable.notifySubscribers(definition);
	                });
	            }
	        });
	        completedAsync = true;
	    } else {
	        _subscribable.subscribe(callback);
	    }
	}
	
	function beginLoadingComponent(componentName, callback) {
	    getFirstResultFromLoaders('getConfig', [componentName], function(config) {
	        if (config) {
	            // We have a config, so now load its definition
	            getFirstResultFromLoaders('loadComponent', [componentName, config], function(definition) {
	                callback(definition, config);
	            });
	        } else {
	            // The component has no config - it's unknown to all the loaders.
	            // Note that this is not an error (e.g., a module loading error) - that would abort the
	            // process and this callback would not run. For this callback to run, all loaders must
	            // have confirmed they don't know about this component.
	            callback(null, null);
	        }
	    });
	}
	
	function getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders) {
	    // On the first call in the stack, start with the full set of loaders
	    if (!candidateLoaders) {
	        candidateLoaders = registry.loaders.slice(0); // Use a copy, because we'll be mutating this array
	    }
	
	    // Try the next candidate
	    var currentCandidateLoader = candidateLoaders.shift();
	    if (currentCandidateLoader) {
	        var methodInstance = currentCandidateLoader[methodName];
	        if (methodInstance) {
	            var wasAborted = false,
	                synchronousReturnValue = methodInstance.apply(currentCandidateLoader, argsExceptCallback.concat(function(result) {
	                    if (wasAborted) {
	                        callback(null);
	                    } else if (result !== null) {
	                        // This candidate returned a value. Use it.
	                        callback(result);
	                    } else {
	                        // Try the next candidate
	                        getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders);
	                    }
	                }));
	
	            // Currently, loaders may not return anything synchronously. This leaves open the possibility
	            // that we'll extend the API to support synchronous return values in the future. It won't be
	            // a breaking change, because currently no loader is allowed to return anything except undefined.
	            if (synchronousReturnValue !== undefined) {
	                wasAborted = true;
	
	                // Method to suppress exceptions will remain undocumented. This is only to keep
	                // KO's specs running tidily, since we can observe the loading got aborted without
	                // having exceptions cluttering up the console too.
	                if (!currentCandidateLoader.suppressLoaderExceptions) {
	                    throw new Error('Component loaders must supply values by invoking the callback, not by returning values synchronously.');
	                }
	            }
	        } else {
	            // This candidate doesn't have the relevant handler. Synchronously move on to the next one.
	            getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders);
	        }
	    } else {
	        // No candidates returned a value
	        callback(null);
	    }
	}
	
	var registry = {
	    get: function(componentName, callback) {
	        var cachedDefinition = getObjectOwnProperty(loadedDefinitionsCache, componentName);
	        if (cachedDefinition) {
	            // It's already loaded and cached. Reuse the same definition object.
	            // Note that for API consistency, even cache hits complete asynchronously by default.
	            // You can bypass this by putting synchronous:true on your component config.
	            if (cachedDefinition.isSynchronousComponent) {
	                ignore(function() { // See comment in loaderRegistryBehaviors.js for reasoning
	                    callback(cachedDefinition.definition);
	                });
	            } else {
	                schedule(function() { callback(cachedDefinition.definition); });
	            }
	        } else {
	            // Join the loading process that is already underway, or start a new one.
	            loadComponentAndNotify(componentName, callback);
	        }
	    },
	
	    clearCachedDefinition: function(componentName) {
	        delete loadedDefinitionsCache[componentName];
	    },
	
	    _getFirstResultFromLoaders: getFirstResultFromLoaders,
	
	    loaders: []
	};
	
	//
	// Binding Handler for Components
	//
	var componentLoadingOperationUniqueId = 0;
	
	
	function cloneTemplateIntoElement(componentName, componentDefinition, element) {
	    var template = componentDefinition['template'];
	    if (!template) {
	        throw new Error('Component \'' + componentName + '\' has no template');
	    }
	
	    var clonedNodesArray = cloneNodes(template);
	    setDomNodeChildren$1(element, clonedNodesArray);
	}
	
	
	function createViewModel(componentDefinition, element, originalChildNodes, componentParams) {
	    var componentViewModelFactory = componentDefinition.createViewModel;
	    return componentViewModelFactory
	        ? componentViewModelFactory.call(componentDefinition, componentParams, { 'element': element, 'templateNodes': originalChildNodes })
	        : componentParams; // Template-only component
	}
	
	
	var componentBinding = {
	    init: function(element, valueAccessor, ignored1, ignored2, bindingContext$$1) {
	        var currentViewModel,
	            currentLoadingOperationId,
	            disposeAssociatedComponentViewModel = function () {
	                var currentViewModelDispose = currentViewModel && currentViewModel['dispose'];
	                if (typeof currentViewModelDispose === 'function') {
	                    currentViewModelDispose.call(currentViewModel);
	                }
	                currentViewModel = null;
	                // Any in-flight loading operation is no longer relevant, so make sure we ignore its completion
	                currentLoadingOperationId = null;
	            },
	            originalChildNodes = makeArray(childNodes(element));
	
	        addDisposeCallback(element, disposeAssociatedComponentViewModel);
	
	        computed(function () {
	            var value = unwrap(valueAccessor()),
	                componentName, componentParams;
	
	            if (typeof value === 'string') {
	                componentName = value;
	            } else {
	                componentName = unwrap(value['name']);
	                componentParams = unwrap(value['params']);
	            }
	
	            if (!componentName) {
	                throw new Error('No component name specified');
	            }
	
	            var loadingOperationId = currentLoadingOperationId = ++componentLoadingOperationUniqueId;
	            registry.get(componentName, function(componentDefinition) {
	                // If this is not the current load operation for this element, ignore it.
	                if (currentLoadingOperationId !== loadingOperationId) {
	                    return;
	                }
	
	                // Clean up previous state
	                disposeAssociatedComponentViewModel();
	
	                // Instantiate and bind new component. Implicitly this cleans any old DOM nodes.
	                if (!componentDefinition) {
	                    throw new Error('Unknown component \'' + componentName + '\'');
	                }
	                cloneTemplateIntoElement(componentName, componentDefinition, element);
	                var componentViewModel = createViewModel(componentDefinition, element, originalChildNodes, componentParams),
	                    childBindingContext = bindingContext$$1['createChildContext'](componentViewModel, /* dataItemAlias */ undefined, function(ctx) {
	                        ctx['$component'] = componentViewModel;
	                        ctx['$componentTemplateNodes'] = originalChildNodes;
	                    });
	                currentViewModel = componentViewModel;
	                applyBindingsToDescendants(childBindingContext, element);
	            });
	        }, null, { disposeWhenNodeIsRemoved: element });
	
	        return { 'controlsDescendantBindings': true };
	    },
	
	    allowVirtualElements: true
	};
	
	// The default loader is responsible for two things:
	// 1. Maintaining the default in-memory registry of component configuration objects
	//    (i.e., the thing you're writing to when you call ko.components.register(someName, ...))
	// 2. Answering requests for components by fetching configuration objects
	//    from that default in-memory registry and resolving them into standard
	//    component definition objects (of the form { createViewModel: ..., template: ... })
	// Custom loaders may override either of these facilities, i.e.,
	// 1. To supply configuration objects from some other source (e.g., conventions)
	// 2. Or, to resolve configuration objects by loading viewmodels/templates via arbitrary logic.
	
	var defaultConfigRegistry = {};
	
	function register(componentName, config) {
	    if (!config) {
	        throw new Error('Invalid configuration for ' + componentName);
	    }
	
	    if (isRegistered(componentName)) {
	        throw new Error('Component ' + componentName + ' is already registered');
	    }
	
	    defaultConfigRegistry[componentName] = config;
	}
	
	function isRegistered(componentName) {
	    return defaultConfigRegistry.hasOwnProperty(componentName);
	}
	
	function unregister(componentName) {
	    delete defaultConfigRegistry[componentName];
	    registry.clearCachedDefinition(componentName);
	}
	
	var defaultLoader = {
	    getConfig: function(componentName, callback) {
	        var result = defaultConfigRegistry.hasOwnProperty(componentName)
	            ? defaultConfigRegistry[componentName]
	            : null;
	        callback(result);
	    },
	
	    loadComponent: function(componentName, config, callback) {
	        var errorCallback = makeErrorCallback(componentName);
	        possiblyGetConfigFromAmd(errorCallback, config, function(loadedConfig) {
	            resolveConfig(componentName, errorCallback, loadedConfig, callback);
	        });
	    },
	
	    loadTemplate: function(componentName, templateConfig, callback) {
	        resolveTemplate(makeErrorCallback(componentName), templateConfig, callback);
	    },
	
	    loadViewModel: function(componentName, viewModelConfig, callback) {
	        resolveViewModel(makeErrorCallback(componentName), viewModelConfig, callback);
	    }
	};
	
	var createViewModelKey = 'createViewModel';
	
	// Takes a config object of the form { template: ..., viewModel: ... }, and asynchronously convert it
	// into the standard component definition format:
	//    { template: <ArrayOfDomNodes>, createViewModel: function(params, componentInfo) { ... } }.
	// Since both template and viewModel may need to be resolved asynchronously, both tasks are performed
	// in parallel, and the results joined when both are ready. We don't depend on any promises infrastructure,
	// so this is implemented manually below.
	function resolveConfig(componentName, errorCallback, config, callback) {
	    var result = {},
	        makeCallBackWhenZero = 2,
	        tryIssueCallback = function() {
	            if (--makeCallBackWhenZero === 0) {
	                callback(result);
	            }
	        },
	        templateConfig = config['template'],
	        viewModelConfig = config['viewModel'];
	
	    if (templateConfig) {
	        possiblyGetConfigFromAmd(errorCallback, templateConfig, function(loadedConfig) {
	            registry._getFirstResultFromLoaders('loadTemplate', [componentName, loadedConfig], function(resolvedTemplate) {
	                result['template'] = resolvedTemplate;
	                tryIssueCallback();
	            });
	        });
	    } else {
	        tryIssueCallback();
	    }
	
	    if (viewModelConfig) {
	        possiblyGetConfigFromAmd(errorCallback, viewModelConfig, function(loadedConfig) {
	            registry._getFirstResultFromLoaders('loadViewModel', [componentName, loadedConfig], function(resolvedViewModel) {
	                result[createViewModelKey] = resolvedViewModel;
	                tryIssueCallback();
	            });
	        });
	    } else {
	        tryIssueCallback();
	    }
	}
	
	function resolveTemplate(errorCallback, templateConfig, callback) {
	    if (typeof templateConfig === 'string') {
	        // Markup - parse it
	        callback(parseHtmlFragment(templateConfig));
	    } else if (templateConfig instanceof Array) {
	        // Assume already an array of DOM nodes - pass through unchanged
	        callback(templateConfig);
	    } else if (isDocumentFragment(templateConfig)) {
	        // Document fragment - use its child nodes
	        callback(makeArray(templateConfig.childNodes));
	    } else if (templateConfig['element']) {
	        var element = templateConfig['element'];
	        if (isDomElement(element)) {
	            // Element instance - copy its child nodes
	            callback(cloneNodesFromTemplateSourceElement(element));
	        } else if (typeof element === 'string') {
	            // Element ID - find it, then copy its child nodes
	            var elemInstance = document.getElementById(element);
	            if (elemInstance) {
	                callback(cloneNodesFromTemplateSourceElement(elemInstance));
	            } else {
	                errorCallback('Cannot find element with ID ' + element);
	            }
	        } else {
	            errorCallback('Unknown element type: ' + element);
	        }
	    } else {
	        errorCallback('Unknown template value: ' + templateConfig);
	    }
	}
	
	function resolveViewModel(errorCallback, viewModelConfig, callback) {
	    if (typeof viewModelConfig === 'function') {
	        // Constructor - convert to standard factory function format
	        // By design, this does *not* supply componentInfo to the constructor, as the intent is that
	        // componentInfo contains non-viewmodel data (e.g., the component's element) that should only
	        // be used in factory functions, not viewmodel constructors.
	        callback(function (params /*, componentInfo */) {
	            return new viewModelConfig(params);
	        });
	    } else if (typeof viewModelConfig[createViewModelKey] === 'function') {
	        // Already a factory function - use it as-is
	        callback(viewModelConfig[createViewModelKey]);
	    } else if ('instance' in viewModelConfig) {
	        // Fixed object instance - promote to createViewModel format for API consistency
	        var fixedInstance = viewModelConfig['instance'];
	        callback(function (/* params, componentInfo */) {
	            return fixedInstance;
	        });
	    } else if ('viewModel' in viewModelConfig) {
	        // Resolved AMD module whose value is of the form { viewModel: ... }
	        resolveViewModel(errorCallback, viewModelConfig['viewModel'], callback);
	    } else {
	        errorCallback('Unknown viewModel value: ' + viewModelConfig);
	    }
	}
	
	function cloneNodesFromTemplateSourceElement(elemInstance) {
	    switch (tagNameLower(elemInstance)) {
	    case 'script':
	        return parseHtmlFragment(elemInstance.text);
	    case 'textarea':
	        return parseHtmlFragment(elemInstance.value);
	    case 'template':
	        // For browsers with proper <template> element support (i.e., where the .content property
	        // gives a document fragment), use that document fragment.
	        if (isDocumentFragment(elemInstance.content)) {
	            return cloneNodes(elemInstance.content.childNodes);
	        }
	    }
	
	    // Regular elements such as <div>, and <template> elements on old browsers that don't really
	    // understand <template> and just treat it as a regular container
	    return cloneNodes(elemInstance.childNodes);
	}
	
	
	function possiblyGetConfigFromAmd(errorCallback, config, callback) {
	    if (typeof config.require === 'string') {
	        // The config is the value of an AMD module
	        if (window.amdRequire || window.require) {
	            (window.amdRequire || window.require)([config.require], callback);
	        } else {
	            errorCallback('Uses require, but no AMD loader is present');
	        }
	    } else {
	        callback(config);
	    }
	}
	
	function makeErrorCallback(componentName) {
	    return function (message) {
	        throw new Error('Component \'' + componentName + '\': ' + message);
	    };
	}
	
	
	// By default, the default loader is the only registered component loader
	registry.loaders.push(defaultLoader);
	
	// Overridable API for determining which component name applies to a given node. By overriding this,
	// you can for example map specific tagNames to components that are not preregistered.
	function getComponentNameForNode(node) {
	    if (node.nodeType !== node.ELEMENT_NODE) { return; }
	    var _tagNameLower = tagNameLower(node);
	    if (isRegistered(_tagNameLower)) {
	        // Try to determine that this node can be considered a *custom* element; see https://github.com/knockout/knockout/issues/1603
	        if (_tagNameLower.indexOf('-') != -1 || ('' + node) == "[object HTMLUnknownElement]") {
	            return _tagNameLower;
	        }
	    }
	}
	
	
	// getBindingAccessors
	// ---
	// Return the binding accessors for custom elements i.e.
	// `<cust-ele params='...'>` becomes
	// `<cust-ele data-bind='component: {name: "cust-ele", params: ...}'>`
	//
	function getBindingAccessors$1(node, context, parser, bindings) {
	    return addBindingsForCustomElement(bindings, node, context, /* valueAccessors */ true, parser);
	}
	
	
	function addBindingsForCustomElement(allBindings, node, bindingContext, valueAccessors, parser) {
	    // Determine if it's really a custom element matching a component
	    if (node.nodeType === 1) {
	        var componentName = bindingProvider.getComponentNameForNode(node);
	        if (componentName) {
	            // It does represent a component, so add a component binding for it
	            allBindings = allBindings || {};
	
	            if (allBindings.component) {
	                // Avoid silently overwriting some other 'component' binding that may already be on the element
	                throw new Error('Cannot use the "component" binding on a custom element matching a component');
	            }
	
	            var componentBindingValue = {
	                'name': componentName,
	                'params': getComponentParamsFromCustomElement(node, bindingContext, parser)
	            };
	
	            allBindings.component = valueAccessors
	                ? function() { return componentBindingValue; }
	                : componentBindingValue;
	        }
	    }
	
	    return allBindings;
	}
	
	
	function getComponentParamsFromCustomElement(node, context, parser) {
	    var accessors = parser.parse(node.getAttribute('params'));
	    if (!accessors || Object.keys(accessors).length === 0) {
	        return {
	            $raw: {}
	        };
	    }
	
	    var rawParamComputedValues = objectMap(accessors,
	        function(paramValue /*, paramName */ ) {
	            return computed(paramValue, null, {
	                disposeWhenNodeIsRemoved: node
	            });
	        }
	    );
	
	    var params = objectMap(rawParamComputedValues,
	        function(paramValueComputed /*, paramName */ ) {
	            var paramValue = paramValueComputed.peek();
	            // Does the evaluation of the parameter value unwrap any observables?
	            if (!paramValueComputed.isActive()) {
	                // No it doesn't, so there's no need for any computed wrapper. Just pass through the supplied value directly.
	                // Example: "someVal: firstName, age: 123" (whether or not firstName is an observable/computed)
	                return paramValue;
	            } else {
	                // Yes it does. Supply a computed property that unwraps both the outer (binding expression)
	                // level of observability, and any inner (resulting model value) level of observability.
	                // This means the component doesn't have to worry about multiple unwrapping. If the value is a
	                // writable observable, the computed will also be writable and pass the value on to the observable.
	                return computed({
	                    read: function() {
	                        return unwrap(paramValueComputed());
	                    },
	                    write: isWriteableObservable(paramValue) && function(value) {
	                        paramValueComputed()(value);
	                    },
	                    disposeWhenNodeIsRemoved: node
	                });
	            }
	        }
	    );
	    // For consistency, absence of a "params" attribute is treated the same as the presence of
	    // any empty one. Otherwise component viewmodels need special code to check whether or not
	    // 'params' or 'params.$raw' is null/undefined before reading subproperties, which is annoying.
	
	    if (!params.hasOwnProperty('$raw')) {
	        params.$raw = rawParamComputedValues;
	    }
	    return params;
	}
	
	
	var bindingProvider = {
	    nodeHasBindings: function (node) {
	        return bindingProvider.getComponentNameForNode(node);
	    },
	    getBindingAccessors: getBindingAccessors$1,
	    getComponentNameForNode: getComponentNameForNode
	};
	
	//
	// Export the Components
	//
	// ko.bindingHandlers.component
	//
	
	var components = {
	    // -- Registry --
	    get: registry.get,
	    clearCachedDefinition: registry.clearCachedDefinition,
	
	    // -- Loader --
	    register: register,
	    isRegistered: isRegistered,
	    unregister: unregister,
	    defaultLoader: defaultLoader,
	    // "Privately" expose the underlying config registry for use in old-IE shim
	    _allRegisteredComponents: defaultConfigRegistry,
	
	    // -- Custom elements --
	    addBindingsForCustomElement: addBindingsForCustomElement,
	
	    // -- Binding handler --
	    bindingHandler: componentBinding,
	
	    // -- Extend the Binding Provider --
	    // to recognize and bind <custom-element>'s.
	    bindingProvider: bindingProvider
	};
	
	
	// This is to ensure that "component.loaders = [a,b,c]" works as expected.
	Object.defineProperty(components, 'loaders', {
	    enumerable: true,
	    get: function () { return registry.loaders; },
	    set: function (loaders) { registry.loaders = loaders; }
	});
	
	/* eslint semi: 0 */
	// --- TODO ---
	// Component
	// Other extenders
	// Other bindings
	
	var coreUtils = {};
	
	arrayForEach([
	    "extend",
	    "setTimeout",
	    "arrayForEach",
	    "arrayFirst",
	    "arrayFilter",
	    "arrayGetDistinctValues",
	    "arrayIndexOf",
	    "arrayMap",
	    "arrayPushAll",
	    "arrayRemoveItem",
	    "getFormFields",
	    "peekObservable",
	    "postJson",
	    "parseJson",
	    "registerEventHandler",
	    "stringifyJson",
	    "range",
	    "toggleDomNodeCssClass",
	    "triggerEvent",
	    "unwrapObservable",
	    "objectForEach",
	    "addOrRemoveItem",
	    "setTextContent",
	    "domData",
	    "parseHtmlFragment",
	    "setHtml",
	    "compareArrays",
	    "setDomNodeChildrenFromArrayMapping"
	], function (coreUtil) {
	    coreUtils[coreUtil] = utils[coreUtil];
	});
	
	coreUtils.domNodeDisposal = {
	    addDisposeCallback: addDisposeCallback,
	    otherNodeCleanerFunctions: otherNodeCleanerFunctions,
	    removeDisposeCallback: removeDisposeCallback,
	    removeNode: removeNode,
	};
	
	
	extend(coreUtils, {
	    setDomNodeChildrenFromArrayMapping:  setDomNodeChildrenFromArrayMapping,
	    unwrapObservable: unwrap,
	    peekObservable: peek
	});
	
	
	// Create the binding provider and default bindings.
	var provider = new Provider();
	options.bindingProviderInstance = provider;
	provider.bindingHandlers.set(bindings);
	provider.bindingHandlers.set(bindings$1);
	provider.bindingHandlers.set(bindings$2);
	provider.bindingHandlers.set(bindings$3);
	provider.bindingHandlers.set({ each: bindings$3.foreach });
	provider.addNodePreprocessor(preprocessors[0].nodePreProcessor);
	provider.addNodePreprocessor(preprocessors[1].nodePreProcessor);
	provider.bindingHandlers.set({ component: components.bindingHandler });
	provider.addProvider(components.bindingProvider);
	
	
	extend(options.filters, filters);
	
	
	// Expose the API.
	var index = {
	    // --- Top-level ---
	    version: '4.0.0-alpha1',
	    options: options,
	
	    extenders: extenders,
	    filters: options.filters,
	
	
	    // --- Utilities ---
	    cleanNode: cleanNode,
	    memoization: memoization,
	    removeNode: removeNode,
	    tasks: tasks,
	    utils: coreUtils,
	    dependencyDetection: dependencyDetection,
	
	
	    // -- Observable ---
	    isObservable: isObservable,
	    isSubscribable: isSubscribable,
	    isWriteableObservable: isWriteableObservable,
	    isWritableObservable: isWriteableObservable,
	    observable: observable,
	    observableArray: observableArray,
	    peek: peek,
	    subscribable: subscribable,
	    unwrap: unwrap,
	    toJS: toJS,
	    toJSON: toJSON,
	
	    // ... Computed ...
	    computed: computed,
	    isComputed: isComputed,
	    isPureComputed: isPureComputed,
	    pureComputed: pureComputed,
	
	
	    // --- Templates ---
	    nativeTemplateEngine: nativeTemplateEngine,
	    renderTemplate: renderTemplate,
	    setTemplateEngine: setTemplateEngine,
	    templateEngine: templateEngine,
	    templateSources: {
	        domElement: domElement,
	        anonymousTemplate: anonymousTemplate
	    },
	
	    // --- Binding ---
	    applyBindingAccessorsToNode: applyBindingAccessorsToNode,
	    applyBindings: applyBindings,
	    applyBindingsToDescendants: applyBindingsToDescendants,
	    applyBindingsToNode: applyBindingsToNode,
	    bindingHandlers: provider.bindingHandlers,
	    bindingProvider: Provider,
	    contextFor: contextFor,
	    dataFor: dataFor,
	    getBindingHandler: getBindingHandler$1,
	    virtualElements: virtualElements,
	    domNodeDisposal: coreUtils.domNodeDisposal,
	
	    // --- Components ---
	    components: components
	};
	
	return index;
	
	})));


/***/ },
/* 369 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 370 */,
/* 371 */,
/* 372 */,
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = undefined;
	
	var _getIterator2 = __webpack_require__(374);
	
	var _getIterator3 = _interopRequireDefault(_getIterator2);
	
	var _classCallCheck2 = __webpack_require__(379);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(380);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Application = function () {
	    /**
	     * @constructor
	     */
	    function Application() {
	        var _this = this;
	
	        (0, _classCallCheck3.default)(this, Application);
	
	        this.ready(function (status) {
	            _this.bindViewModels('ViewModels/');
	        });
	    }
	
	    /**
	     * @param {String} prefix
	     * @return {Application}
	     */
	
	
	    (0, _createClass3.default)(Application, [{
	        key: 'bindViewModels',
	        value: function bindViewModels(prefix) {
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;
	
	            try {
	                for (var _iterator = (0, _getIterator3.default)(document.querySelectorAll('[data-vm]')), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var node = _step.value;
	
	                    var cls = __webpack_require__(384)("./" + prefix + node.getAttribute('data-vm')).default;
	
	                    ko.applyBindings(new cls(node), node);
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }
	
	            return this;
	        }
	
	        /**
	         * @param {Function} callback
	         * @return {Application}
	         */
	
	    }, {
	        key: 'ready',
	        value: function ready(callback) {
	            if (document.readyState === 'loading') {
	                document.addEventListener('DOMContentLoaded', function (event) {
	                    callback(document.readyState);
	                });
	            } else {
	                callback(document.readyState);
	            }
	
	            return this;
	        }
	    }]);
	    return Application;
	}();
	
	exports.default = Application;

/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(375), __esModule: true };

/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(347);
	__webpack_require__(303);
	module.exports = __webpack_require__(376);

/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(316)
	  , get      = __webpack_require__(377);
	module.exports = __webpack_require__(311).getIterator = function(it){
	  var iterFn = get(it);
	  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
	  return anObject(iterFn.call(it));
	};

/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	var classof   = __webpack_require__(378)
	  , ITERATOR  = __webpack_require__(344)('iterator')
	  , Iterators = __webpack_require__(326);
	module.exports = __webpack_require__(311).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};

/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(334)
	  , TAG = __webpack_require__(344)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function(it, key){
	  try {
	    return it[key];
	  } catch(e){ /* empty */ }
	};
	
	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ },
/* 379 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _defineProperty = __webpack_require__(381);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }
	
	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();

/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(382), __esModule: true };

/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(383);
	var $Object = __webpack_require__(311).Object;
	module.exports = function defineProperty(it, key, desc){
	  return $Object.defineProperty(it, key, desc);
	};

/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(309);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(319), 'Object', {defineProperty: __webpack_require__(315).f});

/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./Application": 373,
		"./Application.js": 373,
		"./Support/Dropdown": 385,
		"./Support/Dropdown.js": 385,
		"./ViewModels/HeaderViewModel": 386,
		"./ViewModels/HeaderViewModel.js": 386,
		"./ViewModels/LoginViewModel": 387,
		"./ViewModels/LoginViewModel.js": 387,
		"./ViewModels/RegistrationViewModel": 388,
		"./ViewModels/RegistrationViewModel.js": 388,
		"./bootstrap": 1,
		"./bootstrap.js": 1,
		"./router": 299,
		"./router.js": 299
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 384;


/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = undefined;
	
	var _classCallCheck2 = __webpack_require__(379);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(380);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Dropdown = function () {
	
	    /**
	     * @param {String} dataIdValue
	     * @param {String} activeClass
	     * @param {String} dataIdField
	     */
	
	    /**
	     * @type {KnockoutObservable<Boolean>}
	     */
	    function Dropdown() {
	        var dataIdValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'no-handle';
	
	        var _this = this;
	
	        var activeClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'active';
	        var dataIdField = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'data-id';
	        (0, _classCallCheck3.default)(this, Dropdown);
	        this.visible = ko.observable(false);
	        this.active = ko.observable('');
	
	        window.addEventListener('click', function (event) {
	            var current = event.target;
	
	            while (current) {
	                if (current.getAttribute(dataIdField) === dataIdValue) {
	                    return;
	                }
	                current = current.parentElement;
	            }
	
	            _this.visible(false);
	        });
	
	        this.visible.subscribe(function (state) {
	            _this.active(state ? activeClass : '');
	        });
	    }
	
	    /**
	     * @return {Dropdown}
	     */
	
	
	    /**
	     * @type {KnockoutObservable<String>}
	     */
	
	
	    (0, _createClass3.default)(Dropdown, [{
	        key: 'toggle',
	        value: function toggle() {
	            this.visible(!this.visible());
	
	            return true;
	        }
	    }]);
	    return Dropdown;
	}();
	
	exports.default = Dropdown;

/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;
	
	var _classCallCheck2 = __webpack_require__(379);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _Dropdown = __webpack_require__(385);
	
	var _Dropdown2 = _interopRequireDefault(_Dropdown);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var HeaderViewModel = function HeaderViewModel() {
	  (0, _classCallCheck3.default)(this, HeaderViewModel);
	  this.resources = new _Dropdown2.default('resources-handler');
	  this.user = new _Dropdown2.default('user-handler');
	}
	/**
	 * @type {Dropdown}
	 */
	
	
	/**
	 * @type {Dropdown}
	 */
	;
	
	exports.default = HeaderViewModel;

/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;
	
	var _classCallCheck2 = __webpack_require__(379);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var LoginViewModel = function LoginViewModel() {
	  (0, _classCallCheck3.default)(this, LoginViewModel);
	};
	
	exports.default = LoginViewModel;

/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = undefined;
	
	var _getIterator2 = __webpack_require__(374);
	
	var _getIterator3 = _interopRequireDefault(_getIterator2);
	
	var _classCallCheck2 = __webpack_require__(379);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(380);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var RegistrationViewModel = function () {
	
	    /**
	     * @type {KnockoutObservable<T>}
	     */
	
	    /**
	     * @type {[*]}
	     */
	    function RegistrationViewModel() {
	        var _this = this;
	
	        (0, _classCallCheck3.default)(this, RegistrationViewModel);
	        this.errors = [{ id: 'repeat', message: 'Пароли не совпадают', visible: ko.observable(false) }, { id: 'password_required', message: 'Пароль не может быть пустым', visible: ko.observable(false) }, { id: 'email', message: 'Email не похож на настоящий', visible: ko.observable(false) }, { id: 'email_required', message: 'Email не может быть пустым', visible: ko.observable(false) }];
	        this.passwordVisible = ko.observable(false);
	        this.email = ko.observable('');
	        this.password = {
	            original: ko.observable(''),
	            repeat: ko.observable('')
	        };
	
	        this.email.subscribe(function (e) {
	            var email = (_this.email() || '').toString();
	
	            _this._validate('email_required', email.length > 0);
	
	            if (email.length > 0) {
	                _this._validate('email', email.match(/^.+@.+\..{2,}$/));
	            }
	        });
	
	        this.password.original.subscribe(function (e) {
	            var password = (_this.password.original() || '').toString();
	
	            _this._validate('password_required', password.length > 0);
	            _this.passwordCompare();
	        });
	
	        this.password.repeat.subscribe(function (e) {
	            var password = (_this.password.repeat() || '').toString();
	
	            _this._validate('password_required', password.length > 0);
	            _this.passwordCompare();
	        });
	    }
	
	    /**
	     * @type {{original: KnockoutObservable<T>, repeat: KnockoutObservable<T>, matched: KnockoutObservable<T>}}
	     */
	
	
	    /**
	     * @type {KnockoutObservable<T>}
	     */
	
	
	    (0, _createClass3.default)(RegistrationViewModel, [{
	        key: 'togglePasswordVisibility',
	        value: function togglePasswordVisibility() {
	            this.passwordVisible(!this.passwordVisible());
	
	            return false;
	        }
	
	        /**
	         * @param key
	         * @param status
	         * @private
	         */
	
	    }, {
	        key: '_validate',
	        value: function _validate(key, status) {
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;
	
	            try {
	                for (var _iterator = (0, _getIterator3.default)(this.errors), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var error = _step.value;
	
	                    if (error.id === key) {
	                        error.visible(!status);
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }
	        }
	    }, {
	        key: 'passwordCompare',
	        value: function passwordCompare() {
	            if (this.password.original() && this.password.repeat()) {
	                this._validate('repeat', this.password.original() === this.password.repeat());
	            }
	        }
	    }, {
	        key: 'register',
	        value: function register() {
	            var _arr = [this.password.original, this.password.repeat, this.email];
	
	            for (var _i = 0; _i < _arr.length; _i++) {
	                var field = _arr[_i];
	                field.notifySubscribers();
	            }
	
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;
	
	            try {
	                for (var _iterator2 = (0, _getIterator3.default)(this.errors), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    var error = _step2.value;
	
	                    if (error.visible()) {
	                        document.location = '#';
	                        return false;
	                    }
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }
	
	            return true;
	        }
	    }]);
	    return RegistrationViewModel;
	}();
	
	exports.default = RegistrationViewModel;

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,